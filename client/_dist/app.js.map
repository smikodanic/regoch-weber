{"version":3,"file":"app.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,KAAK,6DAA6D;AAC3F;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe,KAAK;AACpB;AACA,6BAA6B;AAC7B,+CAA+C,QAAQ;AACvD;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU,kDAAkD;AACzE,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,qCAAqC;AAC/D;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yDAAyD,YAAY;AACrE;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU,kDAAkD;AACzE,eAAe;AACf;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,gBAAgB,6DAA6D;AAC7E;AACA;AACA,aAAa;AACb;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;AAGA;;AAEA,iEAAe,YAAY,EAAC;;;;;;;;;;;;AC1HiB;;;AAG7C;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB,qBAAqB;AACrB;;;;AAIA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA,aAAa,YAAY;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,oCAAoC;AACpC,0BAA0B;AAC1B,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB,kBAAkB;AAClB,kBAAkB;AAClB,cAAc;AACd,iDAAiD;AACjD,IAAI,2EAAiB,sBAAsB;AAC3C;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB,kBAAkB;AAClB,kBAAkB;AAClB,cAAc;AACd,iDAAiD;AACjD;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA,aAAa,UAAU,2EAA2E;AAClG,eAAe;AACf;AACA;AACA,IAAI,uEAAe;AACnB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU,2EAA2E;AAClG,eAAe;AACf;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,UAAU,2EAA2E;AAClG,eAAe;AACf;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,UAAU,2EAA2E;AAClG,eAAe;AACf;AACA;AACA;AACA;;;AAGA;;;AAGA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;AC9MrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA,0CAA0C,iBAAiB,MAAM,sCAAsC,eAAe;AACtH,kCAAkC,4BAA4B,WAAW;AACzE;;AAEA,0CAA0C;AAC1C,mCAAmC;;AAEnC,2BAA2B;AAC3B;AACA,2CAA2C;AAC3C,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe;AACf;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,uCAAuC;AACvC,uCAAuC;AACvC;AACA,QAAQ,OAAO;AACf;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe;AACf;AACA;AACA,qCAAqC;AACrC,sCAAsC;;AAEtC;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA,+CAA+C,uCAAuC;AACtF,WAAW,wBAAwB,YAAY;AAC/C;AACA;AACA;;;AAGA;AACA,YAAY,WAAW;AACvB,aAAa,QAAQ;AACrB;AACA;AACA,2BAA2B;AAC3B,2BAA2B;;AAE3B,8BAA8B,YAAY,MAAM,sBAAsB,MAAM,YAAY;AACxF,iDAAiD;;AAEjD;AACA;;AAEA;AACA;AACA,gFAAgF,MAAM;AACtF;AACA;AACA;;AAEA,4DAA4D,UAAU,aAAa;AACnF;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,gCAAgC;AAChC,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,KAAK;AAClB,eAAe;AACf;AACA;AACA,yCAAyC,sBAAsB,UAAU,sBAAsB;AAC/F,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA,qCAAqC,UAAU,IAAI;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN,uCAAuC,QAAQ,QAAQ,WAAW;AAClE;;AAEA;AACA;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AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD,yBAAyB;;AAEzB;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA,2GAA2G;AAC3G;AACA;AACA;AACA,iCAAiC;AACjC,uBAAuB,0CAA0C;;AAEjE;AACA;AACA,gIAAgI;AAChI;AACA;AACA;AACA;AACA,QAAQ,OAAO;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,QAAQ;AACR;;AAEA,QAAQ;AACR;AACA;AACA;AACA,uBAAuB;AACvB,mDAAmD;AACnD;AACA,2DAA2D;AAC3D,qDAAqD;AACrD;AACA;;AAEA,QAAQ;AACR;AACA,uCAAuC,QAAQ;AAC/C,6CAA6C;AAC7C;AACA;AACA;AACA,qDAAqD;AACrD;AACA;;AAEA,QAAQ;AACR;AACA,uBAAuB;AACvB;AACA;AACA;AACA,qDAAqD;AACrD;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA,qCAAqC;;AAErC;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA,sCAAsC,SAAS;;AAE/C;AACA;AACA,kDAAkD,SAAS,KAAK,UAAU;AAC1E,kCAAkC;AAClC,iBAAiB,2BAA2B,SAAS;AACrD,qBAAqB;;AAErB;AACA;AACA,8HAA8H;AAC9H;AACA;AACA;AACA;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;;AAEA,MAAM;AACN;;AAEA,MAAM;AACN;AACA;AACA;AACA,iDAAiD;AACjD;AACA,gEAAgE;AAChE;AACA;AACA;;AAEA,MAAM;AACN;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,aAAa;AACb;;;;AAIA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA,oDAAoD,SAAS,IAAI,MAAM;AACvE,mCAAmC;AACnC,iBAAiB;;AAEjB;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,2EAA2E,SAAS,OAAO;AAC3F,MAAM;AACN,2EAA2E,SAAS,OAAO;AAC3F,MAAM;AACN,2EAA2E,SAAS,OAAO;AAC3F;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,kBAAkB;AAClB,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,qBAAqB;AACrB;AACA;AACA,mBAAmB;AACnB,qBAAqB;AACrB;AACA;AACA,mBAAmB;AACnB,qBAAqB;AACrB;AACA;AACA,mBAAmB;AACnB,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA,aAAa;AACb;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA,kCAAkC,SAAS,GAAG;AAC9C,6DAA6D;AAC7D;AACA;AACA,6CAA6C,4DAA4D,SAAS;;AAElH,4CAA4C;AAC5C,wCAAwC;;AAExC,aAAa;AACb;;;;AAIA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kEAAkE,IAAI;AACtE,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA,iBAAiB;AACjB;AACA,kEAAkE,IAAI;AACtE;AACA,sBAAsB;AACtB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;;AAGA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;;AAEA;AACA,gDAAgD,SAAS;;AAEzD,gDAAgD,aAAa;AAC7D,yBAAyB;;AAEzB,qBAAqB;AACrB;AACA;AACA,wCAAwC,IAAI;AAC5C;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iEAAiE,IAAI;AACrE,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA,iBAAiB;AACjB;AACA,mFAAmF,IAAI;AACvF;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ,wCAAwC,mBAAmB;AAChF,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA,+DAA+D,IAAI;AACnE,mBAAmB;AACnB;;;;;AAKA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D,kCAAkC;AAClC,iBAAiB;AACjB,qBAAqB;;AAErB;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,MAAM,OAAO;AACb;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC,kCAAkC;;;AAGlC;AACA,2EAA2E;;;AAG3E;AACA;AACA;;AAEA,MAAM;AACN;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,aAAa;AACb;;;;;;AAMA;;;;;AAKA,iEAAe,IAAI,EAAC;;;;;;;UClqBpB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA,2EAA2E;AAC3E;AACA;AACA,6GAA6G;AAC7G;AACA;AACA;AACA,wHAAwH,cAAc;AACtI;;;;AAIA;;AAEA;AACA,aAAa,QAAQ,qCAAqC;AAC1D;AACA;AACA;AACA,cAAc,wBAAwB;AACtC,yBAAyB,uBAA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AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,mDAAmD;AACnD,kDAAkD;AAClD;;AAEA,gEAAgE;AAChE;AACA,mEAAmE;;;AAGnE;AACA;;;;AAIA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,aAAa,YAAY;AACzB,eAAe;AACf;AACA;AACA;AACA;;;;AAIA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;;;;AAIA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA,mEAAmE;AACnE,4BAA4B;;AAE5B,8BAA8B,iDAAiD,KAAK,yBAAyB;;AAE7G;AACA,mBAAmB;AACnB;;AAEA;AACA,+CAA+C;;AAE/C;AACA;AACA,oEAAoE,sBAAsB,yBAAyB;AACnH;;AAEA,MAAM;AACN,4CAA4C,iBAAiB,YAAY,mBAAmB,mBAAmB;AAC/G,aAAa;AACb;AACA;;;;AAIA;;;;;;AAMA,oDAAe,MAAM,EAAC;;;;;AC7HtB;;AAEA;AACA,aAAa,QAAQ,4BAA4B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,gCAAgC,kCAAkC,KAAK;AACtJ,sCAAsC;AACtC;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,oBAAoB,aAAa;AACjC,wBAAwB;AACxB;AACA;AACA;;AAEA,kBAAkB;AAClB;;AAEA;AACA,8BAA8B;;;AAG9B;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD,aAAa;;AAEb;AACA;;AAEA,MAAM;AACN;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA,sBAAsB,aAAa;AACnC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,sBAAsB,aAAa;AACnC,0BAA0B;AAC1B,+DAA+D,mBAAmB,MAAM,KAAK;AAC7F;AACA;;AAEA;AACA;;AAEA,KAAK;;AAEL;AACA;;;;AAIA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA,6BAA6B,EAAE,sEAAsE;;AAErG,iEAAiE;AACjE,sBAAsB,iBAAiB,cAAc,eAAe,OAAO,UAAU,KAAK,QAAQ;;AAElG,8DAA8D;AAC9D;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA,sBAAsB,cAAc,wBAAwB,kBAAkB,OAAO,IAAI;AACzF,+EAA+E;;AAE/E;AACA;;AAEA;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,eAAe;AAC5B,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA,iFAAiF,eAAe;AAChG,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;;;;AAIA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA,wDAAwD;AACxD;AACA;;;;AAIA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,SAAS,oCAAoC,iCAAiC,SAAS;AAC7G;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,UAAU,+DAA+D;AACtF,eAAe;AACf;AACA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;AACA,aAAa,QAAQ,aAAa;AAClC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ,0BAA0B;AAC/C,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;;AAGA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;AAKA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C,oDAAoD;AACpD,oDAAoD;AACpD,4CAA4C;AAC5C,oDAAoD;AACpD,0DAA0D;AAC1D;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD,MAAM;AACN;AACA;AACA;;AAEA;;AAEA,gBAAgB;AAChB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ,4BAA4B;AACjD,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;;;;AAIA;;;AAGA,qDAAe,UAAU,EAAC;;;ACnnB1B;AACA;AACA;AACA,iDAAe;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;ACjDsC;AACL;AACU;AACA;;AAE7C,yBAAyB;;;;AAIzB;;AAEA;AACA,qBAAqB,KAAK,aAAa;AACvC,sBAAsB,UAAS,EAAE,wCAAwC;AACzE;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA,kCAAkC,4CAA4C,KAAK;AACnF,sDAAsD;AACtD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,gCAAgC,kCAAkC,KAAK;AACpJ,oCAAoC;AACpC;AACA;AACA,2BAA2B,cAAU;AACrC;;AAEA,2BAA2B,yBAAyB,IAAI,qBAAqB,GAAG;AAChF;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe;AACf;AACA;AACA;AACA,kCAAkC,yCAAyC,KAAK;AAChF,sDAAsD;AACtD;AACA;;;AAGA;AACA;AACA;AACA,aAAa,MAAM;AACnB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,YAAY,qDAAqD;AAC9E,eAAe;AACf;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,YAAY,qDAAqD;AAC9E,eAAe;AACf;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,YAAY;AACzB,eAAe;AACf;AACA;AACA,uBAAuB,aAAM;;AAE7B;AACA,uGAAuG,4CAA4C,SAAS;;AAE5J,+BAA+B;;AAE/B;AACA,mCAAmC;AACnC,sCAAsC;AACtC,uCAAuC,IAAI;AAC3C,qCAAqC,+BAA+B,SAAS;AAC7E;AACA;;AAEA,QAAQ;AACR,sCAAsC;AACtC,qCAAqC,+BAA+B,SAAS;AAC7E;AACA;;AAEA,QAAQ;AACR,+DAA+D,iBAAiB,wBAAwB;AACxG;;AAEA,QAAQ;AACR;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,IAAI,4CAAiB;AACrB,2BAA2B;AAC3B,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;AACA,wBAAwB;AACxB;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA,aAAa,UAAU,uBAAuB;AAC9C;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,UAAU,0BAA0B;AACjD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA,aAAa,UAAU,8CAA8C;AACrE;AACA;AACA;AACA;;;AAGA;;;AAGA,8CAAe,GAAG,EAAC;;;;;AClQU;;;AAG7B,oBAAoB,mBAAI;;AAExB;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,mBAAmB,KAAK;AACxB,mBAAmB,QAAQ;AAC3B;AACA;AACA,oCAAoC,UAAU,GAAG,KAAK;AACtD,2CAA2C;AAC3C,SAAS;;AAET;AACA,oCAAoC,UAAU,GAAG,KAAK;AACtD,kDAAkD;AAClD;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;;;;AAKA;;;AAGA,gDAAe,KAAK,EAAC;;;ACnHU;AACK;;;AAGpC,yBAAyB,SAAK;;AAE9B;AACA;AACA;AACA,0BAA0B;AAC1B,uBAAuB;AACvB,kBAAkB,oBAAK;AACvB;;;;AAIA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe;AACf;AACA,oBAAoB;;AAEpB;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A,CAAC,EAAC;;;ACFF,MAAM,qBAAU;AAChB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGsB;;;ACjDtB;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;;AAEoB;;;ACPyB;AACJ;;;ACDE;;AAE3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,2DAAe,QAAQ,EAAC;;;ACvBmB;;;AAG3C,6BAA6B,cAAU;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA,iEAAe,cAAc,EAAC;;;AC9Ba;;;AAG3C,uBAAuB,cAAU;;AAEjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,2DAAe,QAAQ,EAAC;;;ACxBmB;;;AAG3C,2BAA2B,cAAU;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,+DAAe,YAAY,EAAC;;;ACxBe;;;AAG3C,2BAA2B,cAAU;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,QAAQ;AAC/C;AACA;;AAEA;;;AAGA,+DAAe,YAAY,EAAC;;;ACrBuB;;;AAGnD,mCAAmC,cAAU;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC,oBAAY;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,oBAAY;AACpD;AACA;AACA;AACA;;AAEA;;;AAGA,sEAAe,oBAAoB,EAAC;;;ACnDO;;;AAG3C,wBAAwB,cAAU;;AAElC;AACA;AACA,4BAA4B,8BAA8B;AAC1D;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA,yBAAyB,6BAA6B;AACtD;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;;AAEA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,wBAAwB,KAAK,KAAK,KAAK,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;;;AAGA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAGA,2DAAe,SAAS,EAAC;;;AChFkB;;;AAG3C,6BAA6B,cAAU;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;;AAEA;;AAEA;;;AAGA,gEAAe,cAAc,EAAC;;;ACtBa;;;AAG3C,iCAAiC,cAAU;;AAE3C;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;;AAEA;;;AAGA,oEAAe,kBAAkB,EAAC;;;ACxBS;;;AAG3C,8BAA8B,cAAU;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAIA,iEAAe,eAAe,EAAC;;;AC7DoB;;;AAGnD,yBAAyB,cAAU;;AAEnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,4BAA4B;AACpC,QAAQ,2BAA2B;AACnC,QAAQ,0BAA0B;AAClC,QAAQ,0BAA0B;AAClC,QAAQ,2BAA2B;AACnC,QAAQ,2BAA2B;AACnC,QAAQ,2BAA2B;AACnC,QAAQ;AACR;;AAEA;AACA;;AAEA;AACA,gEAAgE;AAChE,sDAAsD;AACtD;AACA,QAAQ,qDAAqD;AAC7D,QAAQ;AACR;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;AACA;;AAEA;AACA,0BAA0B;;AAE1B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;AAEA;AACA;AACA;AACA,QAAQ,6BAA6B;AACrC,QAAQ,4BAA4B;AACpC,QAAQ,2BAA2B;AACnC,QAAQ,4BAA4B;AACpC,QAAQ,4BAA4B;AACpC,QAAQ,4BAA4B;AACpC,QAAQ,4BAA4B;AACpC,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,QAAQ,mDAAmD;AAC3D,QAAQ,mDAAmD;AAC3D,QAAQ;AACR;AACA;;;AAGA;AACA;AACA;AACA,QAAQ,uBAAuB;AAC/B,QAAQ,wBAAwB;AAChC,QAAQ;AACR;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,UAAU,cAAiB;;AAE3B,4BAA4B,6BAA6B,WAAW;;AAEpE,UAAU,cAAiB;;AAE3B;AACA,4CAA4C;AAC5C;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;;AAGA;AACA;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA,4DAAe,UAAU,EAAC;;;ACvSiB;;;AAG3C,kCAAkC,cAAU;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,2BAA2B;AACnC,QAAQ,8BAA8B;AACtC;;AAEA;AACA;;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,2GAA2G,qCAAqC;AAChJ,4GAA4G,kDAAkD;AAC9J;AACA,sFAAsF;AACtF,iEAAiE;AACjE;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA,qEAAe,mBAAmB,EAAC;;;ACvJgB;;;AAGnD,yBAAyB,cAAU;;AAEnC;AACA;AACA;AACA;AACA,0BAA0B,QAAW;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAa;AACnC;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,0CAA0C;AAC9D,0BAA0B,mCAAmC,iBAAiB,GAAG;AACjF,uBAAuB,mCAAmC;AAC1D,oBAAoB,0CAA0C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","sources":["webpack://regoch-weber/./sys/lib/eventEmitter.js","webpack://regoch-weber/./sys/lib/navig.js","webpack://regoch-weber/./sys/mvc/Aux.js","webpack://regoch-weber/./sys/mvc/DataRgListeners.js","webpack://regoch-weber/./sys/mvc/DataRg.js","webpack://regoch-weber/./sys/mvc/View.js","webpack://regoch-weber/webpack/bootstrap","webpack://regoch-weber/webpack/runtime/define property getters","webpack://regoch-weber/webpack/runtime/hasOwnProperty shorthand","webpack://regoch-weber/webpack/runtime/make namespace object","webpack://regoch-weber/./sys/router/RegochRouter.js","webpack://regoch-weber/./sys/router/Router.js","webpack://regoch-weber/./sys/lib/HTTPClient.js","webpack://regoch-weber/./sys/conf/$debugOpts.js","webpack://regoch-weber/./sys/App.js","webpack://regoch-weber/./sys/mvc/Model.js","webpack://regoch-weber/./sys/mvc/Controller.js","webpack://regoch-weber/./sys/lib/Cookie.js","webpack://regoch-weber/./sys/lib/Auth.js","webpack://regoch-weber/./sys/lib/Form.js","webpack://regoch-weber/./sys/lib/BrowserStorage.js","webpack://regoch-weber/./sys/lib/Paginator.js","webpack://regoch-weber/./sys/lib/util.js","webpack://regoch-weber/./sys/lib/index.js","webpack://regoch-weber/./sys/index.js","webpack://regoch-weber/./client/_cache/views.js","webpack://regoch-weber/./client/env.js","webpack://regoch-weber/./client/conf/$debugOpts.js","webpack://regoch-weber/./client/conf/authOpts.js","webpack://regoch-weber/./client/conf/index.js","webpack://regoch-weber/./client/controllers/HomeCtrl.js","webpack://regoch-weber/./client/controllers/QuickstartCtrl.js","webpack://regoch-weber/./client/controllers/DocsCtrl.js","webpack://regoch-weber/./client/controllers/ExamplesCtrl.js","webpack://regoch-weber/./client/controllers/NotfoundCtrl.js","webpack://regoch-weber/./client/controllers/playground/Controller_hooksCtrl.js","webpack://regoch-weber/./client/controllers/playground/ModelCtrl.js","webpack://regoch-weber/./client/controllers/playground/View_rgIncCtrl.js","webpack://regoch-weber/./client/controllers/playground/View_loadViewsCtrl.js","webpack://regoch-weber/./client/controllers/playground/View_lazyJSCtrl.js","webpack://regoch-weber/./client/controllers/playground/DataRgCtrl.js","webpack://regoch-weber/./client/controllers/playground/DataRgListenersCtrl.js","webpack://regoch-weber/./client/controllers/playground/CookieCtrl.js","webpack://regoch-weber/./client/controllers/playground/BrowserStorageCtrl.js","webpack://regoch-weber/./client/controllers/playground/FormCtrl.js","webpack://regoch-weber/./client/controllers/playground/LoginCtrl.js","webpack://regoch-weber/./client/controllers/playground/LoginokCtrl.js","webpack://regoch-weber/./client/controllers/playground/Navig1Ctrl.js","webpack://regoch-weber/./client/controllers/playground/Navig2Ctrl.js","webpack://regoch-weber/./client/controllers/playground/PaginatorCtrl.js","webpack://regoch-weber/./client/controllers/playground/AntiflickCtrl.js","webpack://regoch-weber/./client/controllers/playground/I18nCtrl.js","webpack://regoch-weber/./client/app.js"],"sourcesContent":["/**\n * The EventEmitter based on window CustomEvent. Inspired by the NodeJS event lib.\n */\nclass EventEmitter {\n\n  constructor() {\n    this.activeOns = []; // [{eventName:string, listener:Function, listenerWindow:Function}]\n  }\n\n\n  /**\n   * Create and emit the event\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {any} detail - event argument\n   * @returns {void}j\n   */\n  emit(eventName, detail = {}) {\n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n\n  /**\n   * Listen for the event\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {Function} listener - callback function, for example msg => {...}\n   * @returns {void}\n   */\n  on(eventName, listener) {\n    const listenerWindow = event => {\n      listener.call(null, event);\n    };\n\n    this._removeOne(eventName, listener);\n    this.activeOns.push({ eventName, listener, listenerWindow });\n    window.addEventListener(eventName, listenerWindow);\n  }\n\n\n  /**\n   * Listen for the event only once\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {Function} listener - callback function\n   * @returns {void}\n   */\n  once(eventName, listener) {\n    const listenerWindow = event => {\n      listener.call(null, event);\n\n      this._removeOne(eventName, listener, listenerWindow);\n    };\n\n    window.addEventListener(eventName, listenerWindow, { once: true });\n  }\n\n\n  /**\n   * Stop listening the event for specific listener.\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @param {Function} listener - callback function, for example msg => {...}\n   * @returns {void}\n   */\n  off(eventName, listener) {\n    this._removeOne(eventName, listener);\n  }\n\n\n  /**\n   * Stop listening the event for all listeners defined with on().\n   * For example eventEmitter.on('msg', fja1) & eventEmitter.on('msg', fja2) then eventEmitter.off('msg') will remove fja1 and fja2 listeners.\n   * @param {string} eventName - event name, for example: 'pushstate'\n   * @returns {void}\n   */\n  offAll(eventName) {\n    let ind = 0;\n    for (const activeOn of this.activeOns) {\n      if (activeOn.eventName === eventName) {\n        window.removeEventListener(activeOn.eventName, activeOn.listenerWindow);\n        this.activeOns.splice(ind, 1);\n      }\n      ind++;\n    }\n  }\n\n\n  /**\n   * Get all active listeners.\n   * @returns {{eventName:string, listener:Function, listenerWindow:Function}[]}\n   */\n  getListeners() {\n    return { ...this.activeOns };\n  }\n\n\n\n\n\n  /*** PRIVATES ***/\n  /**\n   * Remove a listener from window and this.activeOns\n   */\n  _removeOne(eventName, listener) {\n    if (!listener) { throw new Error('eventEmitter._removeOne Error: listener is not defined'); }\n    let ind = 0;\n    for (const activeOn of this.activeOns) {\n      if (activeOn.eventName === eventName && activeOn.listener.toString() === listener.toString()) {\n        window.removeEventListener(activeOn.eventName, activeOn.listenerWindow);\n        this.activeOns.splice(ind, 1);\n      }\n      ind++;\n    }\n  }\n\n\n\n\n\n}\n\n\nconst eventEmitter = new EventEmitter();\n\nexport default eventEmitter;\n","import eventEmitter from './eventEmitter.js';\n\n\n/**\n * Manage the URL in browser's address bar.\n */\nclass Navig {\n\n  constructor() {\n    this.previous = { uri: '', ctrl: null };\n    this.current = { uri: '', ctrl: null };\n  }\n\n\n\n  /********** SETTERS & GETTERS ********/\n  /**\n   * Set previous uri and controller.\n   */\n  setPrevious() {\n    this.previous = { ...this.current };\n  }\n\n  /**\n   * Set current uri and controller.\n   * @param {Controller} ctrl - instance of the current controller\n   */\n  setCurrent(ctrl) {\n    const uri = this.getCurrentURI();\n    this.current = { uri, ctrl };\n  }\n\n  /**\n  * Get the current URI. The uri is path + query string, without hash, for example: /page1.html?q=12\n  * @returns {string}\n  */\n  getPrevioustURI() {\n    return this.previous.uri;\n  }\n\n  /**\n   * Get the current URI. The uri is path + query string, without hash, for example: /page1.html?q=12\n   * @returns {string}\n   */\n  getCurrentURI() {\n    return window.location.pathname + window.location.search;\n  }\n\n\n  /**\n   * Reset the previous controller properties and execute destroy()\n   * @param {object} trx - regoch router transitional variable (defined in router.js -> _exe())\n   */\n  async resetPreviousController(trx) {\n    const ctrl_prev = this.previous.ctrl;\n    if (!!ctrl_prev) {\n      await ctrl_prev.destroy(trx); // execute destroy() defined in the previous controller\n      ctrl_prev.rgKILL(); // kill the previous controller event listeners\n      ctrl_prev.emptyModel(); // empty the previous controller $model\n\n      // purge non-standard controller properties\n      const ctrlProps = Object.keys(ctrl_prev);\n      for (const ctrlProp of ctrlProps) {\n        if (\n          ctrlProp !== '$debugOpts' &&\n          ctrlProp !== '$fridge' &&\n          ctrlProp !== '$model' &&\n          ctrlProp !== '$modeler' &&\n          ctrlProp !== '$navig' &&\n          ctrlProp !== '$rg' &&\n          ctrlProp !== '$httpClient' &&\n          ctrlProp !== '$baseURIhost' &&\n          ctrlProp !== '$auth'\n        ) {\n          delete ctrl_prev[ctrlProp];\n          // console.log('purged::', ctrlProp);\n        }\n      }\n\n    }\n\n  }\n\n\n\n\n  /************ NAVIGATION ************/\n  /**\n   * Navigates to a view using an absolute URL path. The controller middlewares will be executed.\n   * https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\n   * @param {string} url - absolute URL path, /customer/product/25?limit=25\n   * @param {any} state - the state data. Fetch it with event.detail\n   * @param {string} title\n   */\n  goto(url, state, title) {\n    if (!url) { throw new Error('The argument \"url\" is not defined'); }\n    if (!state) { state = {}; }\n    if (!title) { title = ''; }\n    state = { ...state, url };\n    window.history.pushState(state, title, url); // change URL in the browser address bar\n    eventEmitter.emit('pushstate', state); // pushstate event to activate controller in the router.js\n  }\n\n\n  /**\n   * Just change the browser URL and do not execute controller middlewares.\n   * @param {string} url - absolute URL path, /customer/product/25?limit=25\n   * @param {any} state - the state data. Fetch it with event.detail\n   * @param {string} title\n   */\n  goblind(url, state, title) {\n    if (!url) { throw new Error('The argument \"url\" is not defined'); }\n    if (!state) { state = {}; }\n    if (!title) { title = ''; }\n    state = { ...state, url };\n    window.history.pushState(state, title, url); // change URL in the browser address bar\n  }\n\n\n  /**\n   * Go forward like forward button is clicked.\n   */\n  forward() {\n    window.history.forward();\n  }\n\n  /**\n   * Go back like back button is clicked.\n   */\n  back() {\n    window.history.back();\n  }\n\n  /**\n   * Loads a specific page from the session history.\n   * You can use it to move forwards and backwards through the history depending on the delta value.\n   * @param {number} delta - history index number, for example: -1 is like back(), and 1 is like forward()\n   */\n  go(delta) {\n    window.history.go(delta);\n  }\n\n  /**\n   * Reloads the page like refresh button is clicked.\n   */\n  reload() {\n    window.location.reload();\n  }\n\n\n\n\n  /********** EVENT LISTENERS ************/\n  /**\n   * Listen for the 'pushstate' event.\n   * The pushstate hapen when element with data-rg-href attribute is clicked.\n   * @param {Function} listener - callback function with event parameter, for example pevent => { ... }\n   * @returns {void}\n   */\n  onPushstate(listener) {\n    eventEmitter.on('pushstate', listener);\n  }\n\n\n  /**\n   * Listen for the 'popstate' event.\n   * The popstate event is fired each time when the current history entry changes (user navigates to a new state).\n   * That happens when user clicks on browser's Back/Forward button or when history.back(), history.forward(), history.go() methods are programatically called.\n   * Also popstate event occur when the a.href link is clicked (even if it contains only hashtag, for example: <a href=\"#\">test</a>).\n   * The event.state is property of the event is equal to the history state object.\n   * @param {Function} listener - callback function with event parameter, for example pevent => { ... }\n   * @returns {void}\n   */\n  onPopstate(listener) {\n    window.addEventListener('popstate', listener);\n  }\n\n\n  /**\n   * Listen for the URL changes.\n   * The URL is contained of path and search query but without hash, for example: /page1.html?q=12.\n   * @param {Function} listener - callback function with event parameter, for example pevent => { ... }\n   * @returns {void}\n   */\n  onUrlChange(listener) {\n    this.onPushstate(listener);\n    this.onPopstate(listener);\n  }\n\n\n  /**\n   * Listen for the 'hashchange' event.\n   * This happens when window.location.hash is changed. For example /product#image --> /product#description\n   * @param {Function} listener - callback function with event parameter, for example pevent => { ... }\n   * @returns {void}\n   */\n  onHashchange(listener) {\n    window.addEventListener('hashchange', listener);\n  }\n\n\n}\n\n\nconst navig = new Navig();\n\nexport default navig;\n","/**\n * Auxilary controller methods.\n */\nclass Aux {\n\n  /***** CONTROLLER PROPERTY GETTER/SETTER *****/\n  /**\n   * Get the controller property's value. For example controller's property is this.$model.firstName in JS and in HTML data-rg-print=\"$model.firstName\"\n   * @param {string} prop - controller property name, for example: company.name, this.company.name, $model.car.color, this.$model.car.color, $fridge.color, ...\n   * @returns {any}\n   */\n  _getControllerValue(prop) {\n    prop = this._solveInterpolated(prop); // first solve {{...}} brackets, for example: $model.pet___{{pets.$i0._id}} -> $model.pet___12345\n    prop = this._solveMath(prop); // $model.pet___solveMath/{{ctrlProp}} + 1/ -> $model.pet___8\n    prop = prop.replace(/^this\\./, '');\n\n    const propSplitted = prop.split('.'); // ['company', 'name']\n    const prop1 = propSplitted[0]; // company\n\n    let val = this[prop1]; // controller property value\n    propSplitted.forEach((prop, key) => {\n      if (key !== 0 && val != undefined) { val = val[prop]; }\n    });\n\n    return val;\n  }\n\n\n  /**\n   * Set the controller property's value.\n   * For example controller's property is this.product.name\n   * @param {string} prop - controller property name, for example: $model.product.name\n   * @param {any} val - controller property value\n   * @returns {void}\n   */\n  _setControllerValue(prop, val) {\n    const propSplitted = prop.split('.'); // ['$model', 'product', 'name']\n    let i = 1;\n    let obj = this;\n    for (const prop of propSplitted) {\n      if (i !== propSplitted.length) { // not last property\n        if (obj[prop] === undefined) { obj[prop] = {}; }\n        obj = obj[prop];\n      } else { // on last property associate the value\n        obj[prop] = val;\n      }\n      i++;\n    }\n  }\n\n\n\n  /***** MODEL PROPERTY GETTER/SETTER *****/\n  /**\n   * Get the model value\n   * @param {string} mprop - $model property path (without $model), for example 'car.year' is 'this.$model.car.year'\n   */\n  _getModelValue(mprop) {\n    const prop = '$model.' + mprop;\n    const val = this._getControllerValue(prop);\n    return val;\n  }\n\n\n  /**\n   * Set the $model property's value with <input data-rg-model=\"modelName.mprop1.mprop2\">.\n   * Up to 5 levels deep and every object level is a new Proxy object.\n   * --- This method will trigger render() because this.$model is Proxy object. ---\n   * @param {string} mprop - $model property path (without $model), for example: 'company.ceo.name' represents this.$model.company.ceo.name\n   * @param {any} val - the value of $model property i.e. mprop\n   * @returns {void}\n   */\n  _setModelValue(mprop, val) {\n    const mprops = mprop.split('.'); // ['company', 'cto',  'name']\n    const modelName = mprops.shift(); // modelName:: 'company'  AND  props:: ['cto',  'name']\n\n    if (mprops.length === 0) {\n      this.$model[modelName] = val;\n\n    } else if (mprops.length === 1) {\n      const prop1 = mprops[0];\n      const obj = this.$model[modelName] || {};\n      obj[prop1] = val;\n      this.$model[modelName] = obj;\n\n    } else if (mprops.length === 2) {\n      const prop1 = mprops[0];\n      const prop2 = mprops[1];\n      const obj = this.$model[modelName] || {};\n      obj[prop1] = obj[prop1] || {};\n      obj[prop1][prop2] = val;\n      this.$model[modelName] = obj;\n\n    } else if (mprops.length === 3) {\n      const prop1 = mprops[0];\n      const prop2 = mprops[1];\n      const prop3 = mprops[2];\n      const obj = this.$model[modelName] || {};\n      obj[prop1] = obj[prop1] || {};\n      obj[prop1][prop2] = obj[prop1][prop2] || {};\n      obj[prop1][prop2][prop3] = val;\n      this.$model[modelName] = obj;\n\n    } else if (mprops.length === 4) {\n      const prop1 = mprops[0];\n      const prop2 = mprops[1];\n      const prop3 = mprops[2];\n      const prop4 = mprops[3];\n      const obj = this.$model[modelName] || {};\n      obj[prop1] = obj[prop1] || {};\n      obj[prop1][prop2] = obj[prop1][prop2] || {};\n      obj[prop1][prop2][prop3] = obj[prop1][prop2][prop3] || {};\n      obj[prop1][prop2][prop3][prop4] = val;\n      this.$model[modelName] = obj;\n\n    } else if (mprops.length === 5) {\n      const prop1 = mprops[0];\n      const prop2 = mprops[1];\n      const prop3 = mprops[2];\n      const prop4 = mprops[3];\n      const prop5 = mprops[4];\n      const obj = this.$model[modelName] || {};\n      obj[prop1] = obj[prop1] || {};\n      obj[prop1][prop2] = obj[prop1][prop2] || {};\n      obj[prop1][prop2][prop3] = obj[prop1][prop2][prop3] || {};\n      obj[prop1][prop2][prop3][prop4] = obj[prop1][prop2][prop3][prop4] || {};\n      obj[prop1][prop2][prop3][prop4][prop5] = val;\n      this.$model[modelName] = obj;\n    }\n\n  }\n\n\n\n  /***** SOLVERS *****/\n  /**\n   * Replace iteration variable $i with the number. Use only inside data-rg-for and data-rg-repeat.\n   * @param {number} i - number to replace $i with\n   * @param {string} txt - text which needs to be replaced, usually it contains HTML tags\n   * @param {string} $iExtension - extension of the variable name. For example if $iExtension is 21 then the $i21 will be replaced.\n   * @returns {string}\n   */\n  _solve_$i(i, txt, $iExtension) {\n    let reg;\n    if (!$iExtension || $iExtension === '0') { reg = new RegExp('\\\\$i0|\\\\$i', 'g'); } // $i can be used instead of $i0\n    else { reg = new RegExp(`\\\\$i${$iExtension}`, 'g'); }\n    txt = txt.replace(reg, i);\n    return txt;\n  }\n\n\n  /**\n   * Find {{ctrlProp}} occurrences in the txt and replace it with the controller property value.\n   * @param {string} txt - text which needs to be replaced\n   */\n  _solveInterpolated(txt) {\n    const openingChar = '{{';\n    const closingChar = '}}';\n\n    const reg = new RegExp(`${openingChar}\\\\s*${this.$rg.varnameChars}\\\\s*${closingChar}`, 'g');\n    const interpolations = txt.match(reg) || []; // [\"age\", \"user.name\"]\n\n    for (const interpolation of interpolations) {\n      const prop = interpolation.replace(openingChar, '').replace(closingChar, '').trim();\n\n      let val = this._getControllerValue(prop);\n      if (val === undefined) {\n        this._debug('warnings', `_solveInterpolatedWarn:: Controller property ${prop} is undefined.`, 'Maroon', 'LightYellow');\n        val = '';\n      }\n      txt = txt.replace(interpolation, val);\n\n      // nested interpolation, for example: data-rg-echo=\"{{docs.$i.{{fields.$i}}}}\"\n      if (reg.test(txt)) {\n        txt = this._solveInterpolated(txt);\n      }\n    }\n\n    return txt;\n  }\n\n\n  /**\n   * Replace solveMath/expression/ in the txt (HTML code) with the evaluated value.\n   * @param {string} txt  - text which needs to be replaced, usually it contains HTML tags\n   */\n  _solveMath(txt) {\n    const reg = /solveMath\\/[\\d\\+\\-\\*\\/\\%\\(\\)\\s]+\\//g;\n    const evs = txt.match(reg); // ['solveMath/0 + 1/', 'solveMath/5 / 2/']\n    if (!evs) { return txt; }\n\n    for (const ev of evs) {\n      const reg2 = /solveMath\\/([\\d\\+\\-\\*\\/\\%\\(\\)\\s]+)\\//;\n      const expression = ev.match(reg2)[1];\n      const result = eval(expression);\n      txt = txt.replace(reg2, result);\n    }\n\n    return txt;\n  }\n\n\n  /***** COMPARISONS *****/\n  /**\n   * Caclulate comparison with operators ! = < > && ||: data-rg-if=\"5 === 3\", data-rg-if=\"this.age > this.myAge\", data-rg-if=\"$model.age <= $model.myAge\"\n   * @param {any} attrVal - data-rg-if attribute value, for example: 5===3,\n   * @returns {boolean}\n   */\n  _calcComparison_A(attrVal) {\n    const reg = new RegExp(`\\\\$model\\\\.${this.$rg.varnameChars}|this\\\\.${this.$rg.varnameChars}`, 'g');\n    const props = attrVal.match(reg) || []; // controller properties: ['this.age', '$model.age']\n\n    let expression = attrVal;\n    for (const prop of props) {\n      const prop2 = prop.trim().replace(/^this\\./, '');\n      let val = this._getControllerValue(prop2);\n      if (typeof val === 'string') { val = `'${val}'`; }\n      // console.log(prop, val);\n      expression = expression.replace(prop, val);\n    }\n\n    let tf = false;\n    try {\n      tf = eval(expression);\n    } catch (err) {\n      console.error(`Bad expression \"${attrVal}\" --> ${expression}`);\n    }\n\n    // console.log(expression, '--', tf);\n    return tf;\n  }\n\n  /**\n   * Get true/false directly from the controller/model value: data-rg-if=\"is_active\", data-rg-if=\"$model.is_active\"\n   * Caclulate comparison with $ operators, simillar to mongoDB: data-rg-if=\"this.age $eq(18)\", data-rg-if=\"age $eq(18)\", data-rg-if=\"age $eq(this.myAge)\", data-rg-if=\"age $eq($model.myAge)\"\n   * @param {any} attrVal - data-rg-if attribute value, for example: is_active, age $gt(this.ctrlProp), age $eq($model.myAge)\n   * @returns {boolean}\n   */\n  _calcComparison_B(attrVal) {\n    const propCompSplitted = attrVal.split(/\\s+\\$/); // ['age', 'eq($model.myAge)'] or ['this.age', 'eq($model.myAge)']\n\n    const prop = propCompSplitted[0].trim().replace(/^this\\./, ''); // age\n    const val = this._getControllerValue(prop); // 33\n\n    const funcDef = propCompSplitted[1] ? '$' + propCompSplitted[1].trim() : undefined; // $eq($model.myAge)\n    const { funcName, funcArgs } = this._funcParse(funcDef); // funcName: $eq , funcArgs: [22]\n    const arg = !!funcArgs && !!funcArgs.length ? funcArgs[0] : undefined; // 22\n\n    let tf = !!val;\n    if (funcName === '$not') { tf = !val; }\n    else if (funcName === '$eq') { tf = val === arg; }\n    else if (funcName === '$ne') { tf = val !== arg; }\n    else if (funcName === '$gt') { tf = typeof val === 'number' ? val > arg : false; }\n    else if (funcName === '$gte') { tf = typeof val === 'number' ? val >= arg : false; }\n    else if (funcName === '$lt') { tf = typeof val === 'number' ? val < arg : false; }\n    else if (funcName === '$lte') { tf = typeof val === 'number' ? val <= arg : false; }\n    else if (funcName === '$in' && !!arg) { tf = arg.indexOf(val) !== -1; } // arg must be array\n    else if (funcName === '$nin' && !!arg) { tf = arg.indexOf(val) === -1; } // arg must be array\n    else if (funcName === '$reg' && !!arg) { tf = val !== undefined ? arg.test(val) : false; } // arg must be RegExp, val must contain regexp to be true\n    else if (funcName === '$nreg' && !!arg) { tf = val !== undefined ? !arg.test(val) : false; } // arg must be RegExp, val shouldn't contain regexp to be true\n\n    // console.log(`funcName:: ${funcName} -- val::${typeof val} ${val} vs. arg::${typeof arg} ${arg} => tf::${tf} --`);\n    return tf;\n  }\n\n\n\n  /***** FUNCTIONS *****/\n  /**\n   * Execute the assignment. For example: $model.age = 3 in data-rg-click=\"$model.age = 3\" will set model this.$model.age=3\n   * Examples: $model.age=3 , $model.name = 'Marko', $model.name=\"Marko\" , $model.age=$element.value , $model.age=this.ctrlProp , $model.age=$model.mdlProp\n   * @param {string} assignment - JS assignment, for example: age = 3 i.e. prop=val\n  * @param {HTMLElement} elem - element where is the data-rg-... attribute\n   * @param {Event} event - the DOM Event object\n   * @return {void}\n   */\n  _assignmentExe(assignment, element, event) {\n    try {\n      const splitted = assignment.split('='); // prop=val\n      const prop = splitted[0].trim();\n      let val = splitted[1].trim().replace(/\\'|\\\"|\\`/g, '');\n\n      // solve val if it's $element.value or ctrlProp (controller property)\n      const reg = new RegExp(this.$rg.varnameChars, '');\n      if (/^\\$element/.test(val)) { const element_prop = val.split('.')[1] || 'value'; val = element[element_prop]; } // data-rg-click=\"$model.x = $element.value\"\n      else if (/^\\$event/.test(val)) { const event_prop = val.split('.')[1] || 'type'; val = event[event_prop]; }  // data-rg-click=\"$model.x = $event.type\" (rarely used)\n      else if (/^\\$model/.test(val)) { val = val.replace('$model.', ''); val = this._getModelValue(val); }  // data-rg-click=\"$model.x = $model.y\"\n      else if (/^this\\./.test(val)) { val = val.replace('this.', ''); val = this._getControllerValue(val); } // data-rg-click=\"$model.x = this.ctrlProp\"\n      else { val = val; } // data-rg-click=\"$model.x = 888\"\n      this._setControllerValue(prop, val);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /**\n   * Parse function definition and return function name and arguments.\n   * For example: products.list(25, 'str', $event, $element) -> {funcName: 'products.list', funcArgs: [55, elem]}\n   * @param {string} funcDef - function definition in the data-rg- attribute\n   * @param {HTMLElement} elem - data-rg- HTML element on which is the event applied\n   * @param {Event} event - event (click, keyup, ...) applied on the data-rg- element (used only in the DataRgListeners)\n   * @returns {{funcName:string, funcArgs:any[], funcArgsStr:string}\n   */\n  _funcParse(funcDef, elem, event) {\n    if (!funcDef) { return {}; }\n\n    const matched = funcDef.match(/^(.+)\\((.*)\\)$/);\n    if (!matched) { console.error(`_funcParseErr: Function \"${funcDef}\" has bad definition.`); return {}; }\n    const funcName = matched[1] || ''; // function name: products.list\n\n    const funcArgsStr = !!matched[2] ? matched[2].trim() : ''; // function arguments: 25, 'str', $event, $element, this.products\n    const funcArgs = !funcArgsStr ? [] : funcArgsStr\n      .split(',')\n      .map(arg => {\n        arg = arg.trim();\n        if (arg === '$element') { arg = elem; } // DOM HTMLElement: func($element)\n        else if (arg === '$value') { arg = this._getElementValue(elem, true); } // DOM HTMLElement value (INPUT, SELECT, TEXTAREA,...): func($value)\n        else if (arg === '$event') { arg = event; } // DOM Event: func($event)\n        else if (/\"|'/.test(arg)) { arg = arg.replace(/\\'/g, ''); } // string: func('some str', \"some str\")\n        else if (/^-?\\d+\\.?\\d*$/.test(arg) && !/\\'/.test(arg)) { arg = +arg; } // number: func(12, -12, -12.22)\n        else if ((arg === 'true' || arg === 'false')) { arg = JSON.parse(arg); } // boolean: func(true, false)\n        else if (/^\\/.+\\/i?g?$/.test(arg)) { // if regular expression, for example in replace(/Some/i, 'some')\n          const mat = arg.match(/^\\/(.+)\\/(i?g?)$/);\n          arg = new RegExp(mat[1], mat[2]);\n        }\n        else if (/^\\$model\\./.test(arg)) { // model: func($model.cars)\n          const mprop = arg.replace(/^\\$model\\./, ''); // remove $model.\n          const val = this._getModelValue(mprop);\n          arg = val;\n        }\n        else if (/^this\\./.test(arg)) { // if contain this. i.e. controller property: func(this.pets)\n          const prop = arg.replace(/^this\\./, ''); // remove this.\n          const val = this._getControllerValue(prop);\n          arg = val;\n        } else { // finally take it as controller property (without this.): func(pets)\n          const prop = arg;\n          const val = this._getControllerValue(prop);\n          arg = val;\n        }\n\n        return arg;\n      });\n\n    return { funcName, funcArgs, funcArgsStr };\n  }\n\n\n  /**\n   * Execute the function. It can be the controller method or the function defined in the controller proerty.\n   * @param {string} funcName - function name, for example: runKEYUP or products.list\n   * @param {any[]} funcArgs - function argumants\n   * @return {void}\n   */\n  async _funcExe(funcName, funcArgs) {\n    try {\n      if (/\\./.test(funcName)) {\n        // execute the function in the controller property, for example: this.print.inConsole = () => {...}\n        const propSplitted = funcName.split('.'); // ['print', 'inConsole']\n        let func = this;\n        for (const prop of propSplitted) { func = func[prop]; }\n        await func(...funcArgs);\n      } else {\n        // execute the controller method\n        if (!this[funcName]) { throw new Error(`Method \"${funcName}\" is not defined in the \"${this.constructor.name}\" controller.`); }\n        await this[funcName](...funcArgs);\n      }\n\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n\n  /**\n   * Execute multiple functions, for example: data-rg-click=\"f1(); f2(a, b);\";\n   * @param {string} funcDefs - definition of the functions: func1();func2(a, b);\n   * @param {HTMLElement} elem - element where is the data-rg-... attribute\n   * @param {Event} event - the DOM Event object\n   */\n  async _funcsExe(funcDefs, elem, event) {\n    const statement_reg = /\\w\\s*\\=\\s*[a-zA-z0-9\\'\\\"\\$]+/; // regexp for statement, for example age = 3\n    if (statement_reg.test(funcDefs)) {\n      const assignment = funcDefs;\n      this._assignmentExe(assignment, elem, event);\n      return;\n    }\n\n    const funcDefs_arr = funcDefs.split(';').filter(funcDef => !!funcDef).map(funcDef => funcDef.trim());\n    for (const funcDef of funcDefs_arr) {\n      const { funcName, funcArgs } = this._funcParse(funcDef, elem, event);\n      await this._funcExe(funcName, funcArgs);\n    }\n  }\n\n\n\n  /***** DOM ELEMENTS *****/\n  /**\n   * Define new cloned element.\n   * The original element gets data-rg-xyz-id , unique ID to distinguish the element from other data-rg-xyz elements on the page.\n   * The cloned element gets data-rg-xyz-gen and data-rg-xyz-id attributes.\n   * @param {Element} elem - original element\n   * @param {string} attrName - attribute name: data-rg-for, data-rg-repeat, data-rg-print\n   * @param {string} attrVal - attribute value: 'continent @@ append'\n   * @returns {HTMLElement}\n   */\n  _genElem_define(elem, attrName, attrVal) {\n    // hide the original data-rg-xyz (reference) element\n    elem.style.display = 'none';\n\n    let uid = this._uid();\n\n    const dataRgId = elem.getAttribute(`${attrName}-id`);\n    if (!dataRgId) {\n      elem.setAttribute(`${attrName}-id`, uid); // add data-rg-xyz-id , unique ID (because the page can have multiple elements with [data-rg-xyz-gen=\"${attrVal}\"] and we need to distinguish them)\n    } else {\n      uid = dataRgId; // if the uid is already assigned\n    }\n\n    // clone the data-rg-xyz element\n    const newElem = elem.cloneNode(true);\n    newElem.removeAttribute(attrName);\n    newElem.setAttribute(`${attrName}-gen`, attrVal);\n    newElem.setAttribute(`${attrName}-id`, uid);\n    newElem.style.display = '';\n\n    return newElem;\n  }\n\n\n  /**\n   * Remove element with the specific data-rg-xyz-gen and data-rg-xyz-id attributes.\n   * @param {Element} elem - original element\n   * @param {string} attrName - attribute name: data-rg-for, data-rg-repeat, data-rg-print\n   * @param {string} attrVal - attribute value: 'continent @@ append'\n   * @returns\n   */\n  _genElem_remove(elem, attrName, attrVal) {\n    const uid = elem.getAttribute(`${attrName}-id`);\n    const genAttr_sel = `[${attrName}-gen=\"${attrVal}\"][${attrName}-id=\"${uid}\"]`;\n    const genElems = document.querySelectorAll(genAttr_sel);\n    for (const genElem of genElems) { genElem.remove(); }\n  }\n\n\n  /**\n   * Set the HTML form element value. Make correction according to the element & value type.\n   * @param {HTMLElement} elem - HTML form element\n   * @param {any} val - value to populate HTML form element (if val is undefined then it's empty string)\n   */\n  _setElementValue(elem, val = '') {\n    if (typeof val === 'object') {\n      if (elem.type === 'textarea') { val = JSON.stringify(val, null, 2); }\n      else { val = JSON.stringify(val); }\n    }\n    elem.value = String(val);\n    elem.setAttribute('value', val);\n  }\n\n\n  /**\n   * Get the HTML form element value. Make correction according to the element type & value type.\n   * Element types: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n   * @param {HTMLElement} elem - HTML form element\n   * @param {boolean} convertType - default true\n   * @returns {any} val - single value or array for checkbox and select-multiple\n   */\n  _getElementValue(elem, convertType = true) {\n    // pickup all elements with same name=\"something\", for example checkboxes\n    let val;\n\n    if (elem.type === 'checkbox') {\n      const elems = document.querySelectorAll(`[name=\"${elem.name}\"]`);\n      const valArr = [];\n      let i = 1;\n      for (const elem of elems) {\n        let v = elem.value;\n        if (convertType) { v = this._stringTypeConvert(elem.value); }\n        if (elem.checked) { valArr.push(v); val = valArr; }\n        if (i === elems.length && !val) { val = []; }\n        i++;\n      }\n\n    } else if (elem.type === 'select-multiple') {\n      const opts = elem.selectedOptions; // selected options\n      const valArr = [];\n      let i = 1;\n      for (const opt of opts) {\n        let v = opt.value;\n        if (convertType) { v = this._stringTypeConvert(opt.value); }\n        valArr.push(v);\n        val = valArr;\n        if (i === opts.length && !val) { val = []; }\n        i++;\n      }\n\n    } else if (elem.type === 'radio') {\n      let v = elem.value;\n      if (convertType) { v = this._stringTypeConvert(elem.value); }\n      if (elem.checked) { val = v; }\n\n    } else if (elem.type === 'number') {\n      const v = elem.valueAsNumber;\n      val = v;\n\n    } else if (elem.type === 'password') {\n      val = elem.value;\n\n    } else if (elem.type === 'file' && elem.multiple) {\n      val = elem.files;\n\n    } else if (elem.type === 'file') {\n      val = elem.files[0];\n\n    } else {\n      let v = elem.value;\n      if (convertType) { v = this._stringTypeConvert(elem.value); }\n      val = v;\n    }\n\n    return val;\n  }\n\n\n  /**\n  * Remove elements which has generated element as parent i.e. if the parent has data-rg-xyz-gen attribute then delete that parent.\n  * @param {string} attrName - attribute name - 'data-rg-for'\n  * @param {string|RegExp} attrValQuery - query the attribute value, for example: 'companies' , or /companies\\.\\$/i\n  * @returns {void}\n  */\n  _removeParentElements(attrName, attrValQuery) {\n    let elems = document.querySelectorAll(`[${attrName}]`);\n\n    if (!!attrValQuery && typeof attrValQuery === 'string') {\n      elems = document.querySelectorAll(`[${attrName}^=\"${attrValQuery}\"]`);\n\n    } else if (!!attrValQuery && attrValQuery instanceof RegExp) {\n      const elems2 = [];\n      for (const elem of elems) {\n        const attrVal = elem.getAttribute(attrName);\n        const tf = attrValQuery.test(attrVal);\n        if (tf) { elems2.push(elem); }\n      }\n      elems = elems2;\n    }\n\n    // removals\n    for (const elem of elems) {\n      const parentElem = elem.parentNode;\n      if (parentElem.hasAttribute(`${attrName}-gen`)) { parentElem.remove(); }\n    }\n  }\n\n\n  /**\n   * Get the DOM elements by the query.\n   * For example in data-rg-for=\"companies.$i{fields.$i}\" --> attrName will be 'data-rg-for' and attrQuery will be /^companies\\.\\$\\{fields/\n   * @param {string} attrName - attribute name - 'data-rg-for'\n   * @param {string|RegExp} attrValQuery - query the attribute value, for example: 'companies' , or /companies\\.\\$/i\n   * @returns {HTMLElement[]}\n   */\n  _listElements(attrName, attrValQuery) {\n    let elems = document.querySelectorAll(`[${attrName}]`);\n\n    if (!!attrValQuery && typeof attrValQuery === 'string') {\n      elems = document.querySelectorAll(`[${attrName}^=\"${attrValQuery}\"]`);\n\n    } else if (!!attrValQuery && attrValQuery instanceof RegExp) {\n      const elems2 = [];\n      for (const elem of elems) {\n        const attrVal = elem.getAttribute(attrName);\n        const tf = attrValQuery.test(attrVal);\n        if (tf) { elems2.push(elem); }\n      }\n      elems = elems2;\n    }\n\n    return elems;\n  }\n\n\n  /**\n   * Sort elements from higher to lower priority -> 3,2,1,0 . Priority is defined in the attribute value, data-rg-for=\"companies @@ <priority>\"\n   * @param {HTMLElement[]} elems - array of the elements with specific attribute name\n   * @param {string} attrName - attribute name, for example data-rg-for\n   */\n  _sortElementsByPriority(elems, attrName) {\n    // get priority number from data-rg-for=\"companies @@ 2\"\n    const getPriority = elem => {\n      const attrVal = elem.getAttribute(attrName);\n      const attrValSplited = attrVal.split(this.$rg.separator);\n      const priority = !!attrValSplited[1] ? attrValSplited[1].trim() : 0;\n      return +priority;\n    };\n\n    // convert elems to JS Array --> [{elem, priority}]  because elems doesn't have sort()\n    let elems_arr = [];\n    for (const elem of elems) {\n      const priority = getPriority(elem);\n      elems_arr.push({ elem, priority });\n    }\n\n    // sort elements descending\n    elems_arr = elems_arr.sort((elem1, elem2) => {\n      const prior1 = elem1.priority;\n      const prior2 = elem2.priority;\n      return prior2 - prior1;\n    });\n    // console.log('elems_arr::', elems_arr);\n\n    // convert JS Array to HTML Elements array\n    elems = elems_arr.map(elem_arr => elem_arr.elem);\n\n    return elems;\n  }\n\n\n\n  /***** MISC *****/\n  /**\n   * Convert element.value (string) in integer, float, boolean or JSON.\n   * @param {string} value\n   * @returns {string | number | boolean | object}\n   */\n  _stringTypeConvert(value) {\n    function isJSON(value) {\n      try { JSON.parse(value); }\n      catch (err) { return false; }\n      return true;\n    }\n\n    if (!!value && !isNaN(value) && !/\\./.test(value)) { // convert string into integer (12)\n      value = parseInt(value, 10);\n    } else if (!!value && !isNaN(value) && /\\./.test(value)) { // convert string into float (12.35)\n      value = parseFloat(value);\n    } else if (value === 'true' || value === 'false') { // convert string into boolean (true)\n      value = JSON.parse(value);\n    } else if (isJSON(value)) {\n      value = JSON.parse(value);\n    }\n\n    return value;\n  }\n\n\n  /**\n   * Create unique id.\n   */\n  _uid() {\n    const date = Date.now() / 1000;\n    const ms = (date + '').split('.')[1];\n    const rnd = Math.round(Math.random() * 1000);\n    const uid = ms + '-' + rnd;\n    return uid;\n  }\n\n\n  /**\n   * Debug the controller methods.\n   * @param {string} tip - debug type: rgprint, render, ...\n   * @param {string} text - the printed text\n   * @param {string} color - text color\n   * @param {string} background - background color\n   * @returns {object}\n   */\n  _debug(tip, text, color, background) {\n    if (this.$debugOpts[tip]) { console.log(`%c ${text}`, `color: ${color}; background: ${background}`); }\n    return this.$debugOpts;\n  }\n\n\n  _printError(err) {\n    const errMsg = err.message;\n    const errStack = err.stack.replace(/\\n/g, '<br>');\n    document.body.innerHTML = `\n      <div style=\"margin:0px 13px;\">\n        <h5 style=\"color:Gray\">Page Error</h5>\n        <b style=\"color:Red;font:14px Verdana;\">${errMsg}</b>\n        <br><span style=\"color:Gray;font:12px Verdana;\">${errStack}</span>\n      </div>\n    `;\n    console.error(err);\n  }\n\n\n\n}\n\n\nexport default Aux;\n","import Aux from './Aux.js';\nimport navig from '../lib/navig.js';\n\n\n/**\n * Parse HTML elements with the \"data-rg-\" attribute (event listeners)\n */\nclass DataRgListeners extends Aux {\n\n  constructor() {\n    super();\n  }\n\n\n  /**\n   * Remove all listeners (click, input, keyup, ...) from the elements with the \"data-rg-...\" attribute\n   * when controller is destroyed i.e. when URL is changed. See /sys/router.js\n   * @returns {void}\n   */\n  async rgKILL() {\n    // this._debug().rgKILL = true;\n    this._debug('rgKILL', `------- rgKILL (start) ctrl: ${this.constructor.name} -------`, 'orange', '#FFD8B6');\n\n    const promises = [];\n    let i = 1;\n    for (const rgListener of this.$rg.listeners) {\n      rgListener.elem.removeEventListener(rgListener.eventName, rgListener.handler);\n      this._debug('rgKILL', `${i}. killed:: ${rgListener.attrName} --- ${rgListener.eventName} --- ${rgListener.elem.localName} -- ${rgListener.elem.innerHTML} -- ctrl:: ${this.constructor.name}`, 'orange');\n      promises.push(Promise.resolve(true));\n      i++;\n    }\n\n    await Promise.all(promises);\n    this.$rg.listeners = [];\n    this._debug('rgKILL', '------- rgKILL (end) -------', 'orange', '#FFD8B6');\n  }\n\n\n\n  /**\n   * data-rg-href\n   * <a href=\"/product/12\" data-rg-href>Product 12</a>\n   * <a href=\"\" data-rg-href=\"/product/12\">Product 12</a>\n   * Href listeners and changing URLs (browser history states).\n   * NOTICE: Click on data-rg-href element will destroy the controller i.e. rgKILL() will be invoked.\n   * @returns {void}\n   */\n  rgHref() {\n    this._debug('rgHref', '--------- rgHref ------', 'orange', '#F4EA9E');\n\n    const attrName = 'data-rg-href';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgHref', `found elements:: ${elems.length}`, 'orange');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n\n      const handler = async event => {\n        event.preventDefault();\n\n        // change browser's address bar (emit 'pushstate' event)\n        const href = elem.getAttribute('data-rg-href') || elem.getAttribute('href') || '';\n        const url = href.trim();\n        const state = { href };\n        const title = !!elem.innerText ? elem.innerText.trim() : '';\n        if (!!url) { navig.goto(url, state, title); }\n\n        this._debug('rgHref', `Executed rgHref listener -->  href: ${href}, ctrl:: ${this.constructor.name}`, 'orangered');\n      };\n\n      const eventName = 'click';\n      elem.addEventListener(eventName, handler);\n      this.$rg.listeners.push({ attrName, elem, handler, eventName });\n      this._debug('rgHref', `pushed::  tag: ${elem.localName} | href=\"${elem.pathname}\" | rgListeners: ${this.$rg.listeners.length}`, 'orange');\n    }\n  }\n\n\n\n  /**\n   * data-rg-click=\"<controllerMethod> [@@ preventDefault]\"\n   * <button data-rg-click=\"myFunc()\">CLICK ME</button>\n   * Listen for click and execute the function i.e. controller method.\n   * @returns {void}\n   */\n  rgClick() {\n    this._debug('rgClick', '--------- rgClick ------', 'orange', '#F4EA9E');\n\n    const attrName = 'data-rg-click';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgClick', `found elements:: ${elems.length}`, 'orange');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName); // string 'myFunc(x, y, ...restArgs) @@ preventDefault'\n      if (!attrVal) { console.error(`Attribute \"data-rg-click\" has bad definition (data-rg-click=\"${attrVal}\").`); continue; }\n\n      const attrValSplited = attrVal.split(this.$rg.separator);\n      const funcDefs = attrValSplited[0]; // func1();func2(a, b);\n      const tf = !!attrValSplited[1] && attrValSplited[1].trim() === 'preventDefault';\n\n      const handler = async event => {\n        if (tf) { event.preventDefault(); }\n        await this._funcsExe(funcDefs, elem, event);\n        this._debug('rgClick', `Executed rgClick listener --> ${funcDefs} | preventDefault: ${tf}`, 'orangered');\n      };\n\n      const eventName = 'click';\n      elem.addEventListener(eventName, handler);\n      this.$rg.listeners.push({ attrName, elem, handler, eventName });\n      this._debug('rgClick', `pushed::  tag: ${elem.localName} | data-rg-click=\"${attrVal}\" | preventDefault: ${tf} | rgListeners: ${this.$rg.listeners.length}`, 'orange');\n    }\n  }\n\n\n  /**\n   * data-rg-keyup=\"<controllerMethod> [@@ keyCode]\"\n   * <input type=\"text\" data-rg-keyup=\"myFunc()\"> - it will execute myFunc on every key\n   * <input type=\"text\" data-rg-keyup=\"myFunc() @@ enter\"> - it will execute myFunc on Enter\n   * Parse the \"data-rg-keyup\" attribute. Listen for the keyup event on certain element and execute the controller method.\n   * @returns {void}\n   */\n  rgKeyup() {\n    this._debug('rgKeyup', '--------- rgKeyup ------', 'orange', '#F4EA9E');\n\n    const attrName = 'data-rg-keyup';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgKeyup', `found elements:: ${elems.length}`, 'orange');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName);\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      if (!attrValSplited[0]) { console.error(`Attribute \"data-rg-keyup\" has bad definition (data-rg-keyup=\"${attrVal}\").`); continue; }\n      const funcDefs = attrValSplited[0]; // func1();func2();\n\n      let keyCode = attrValSplited[1] || '';\n      keyCode = keyCode.trim().toLowerCase();\n\n      const handler = async event => {\n        let eventCode;\n        if (event.code) { eventCode = event.code.toLowerCase(); }\n        if (!!keyCode && keyCode !== eventCode) { return; }\n        await this._funcsExe(funcDefs, elem, event);\n        this._debug('rgKeyup', `Executed rgKeyup listener --> ${funcDefs} | eventCode: ${eventCode}`, 'orangered');\n      };\n\n      const eventName = 'keyup';\n      elem.addEventListener(eventName, handler);\n      this.$rg.listeners.push({ attrName, elem, handler, eventName });\n      this._debug('rgKeyup', `pushed::  tag: ${elem.localName} | data-rg-keyup=\"${attrVal}\" | ctrl=\"${this.constructor.name}\" | rgListeners: ${this.$rg.listeners.length}`, 'orange');\n    }\n  }\n\n\n\n  /**\n   * data-rg-change=\"<controllerMethod>\"\n   * <select data-rg-change=\"myFunc()\">\n   * Listen for change and execute the function i.e. controller method.\n   * @returns {void}\n   */\n  rgChange() {\n    this._debug('rgChange', '--------- rgChange ------', 'orange', '#F4EA9E');\n\n    const attrName = 'data-rg-change';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgChange', `found elements:: ${elems.length}`, 'orange');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName); // string 'myFunc(x, y, ...restArgs)'\n      if (!attrVal) { console.error(`Attribute \"data-rg-change\" has bad definition (data-rg-change=\"${attrVal}\").`); continue; }\n      const funcDefs = attrVal; // func1();func2();\n\n      const handler = async event => {\n        await this._funcsExe(funcDefs, elem, event);\n        this._debug('rgChange', `Executed rgChange listener --> ${funcDefs}`, 'orangered');\n      };\n\n      const eventName = 'change';\n      elem.addEventListener(eventName, handler);\n      this.$rg.listeners.push({ attrName, elem, handler, eventName });\n      this._debug('rgChange', `pushed::  tag: ${elem.localName} | data-rg-change=\"${attrVal}\" | rgListeners: ${this.$rg.listeners.length}`, 'orange');\n    }\n  }\n\n\n\n  /**\n   * data-rg-evt=\"eventName1 @@ <controllerMethod1> [&& eventName2 @@ <controllerMethod2>]\"\n   * Listen for event and execute the function i.e. controller method.\n   * Example:\n   * data-rg-evt=\"mouseenter @@ myFunc($element, $event, 25, 'some text')\"  - $element and $event are the DOM objects of the data-rg-evt element\n   * @returns {void}\n   */\n  rgEvt() {\n    this._debug('rgEvt', '--------- rgEvt ------', 'orange', '#F4EA9E');\n    const attrName = 'data-rg-evt';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgEvt', `found elements:: ${elems.length}`, 'orange');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName).trim(); // mouseenter @@ runEVT($element, $event, 'red') && mouseleave @@ runEVT($element, $event, 'green')\n      const directives = attrVal.split('&&');\n\n      for (const directive of directives) {\n        const attrValSplited = directive.split(this.$rg.separator);\n        if (!attrValSplited[0] || !attrValSplited[1]) { console.error(`Attribute \"data-rg-evt\" has bad definition (data-rg-evt=\"${attrVal}\").`); continue; }\n\n        const eventName = attrValSplited[0].trim();\n        const funcDefs = attrValSplited[1]; // func1();func2();\n\n        const handler = async event => {\n          await this._funcsExe(funcDefs, elem, event);\n          this._debug('rgEvt', `Executed rgEvt listener --> ${funcDefs}`, 'orangered');\n        };\n\n        elem.addEventListener(eventName, handler);\n        this.$rg.listeners.push({ eventName, attrName, elem, handler, eventName });\n        this._debug('rgEvt', `pushed::  tag: ${elem.localName} | data-rg-evt | event: ${eventName} | rgListeners: ${this.$rg.listeners.length}`, 'orange');\n      }\n    }\n  }\n\n\n\n  /**\n   * data-rg-set=\"<controllerProperty> [@@convertType|convertTypeDont]\"\n   * Parse the \"data-rg-set\" attribute. Get the value from elements like INPUT, SELECT, TEXTAREA, .... and set the controller property i.e. $model.\n   * Examples:\n   * data-rg-set=\"product\" - product is the controller property\n   * data-rg-set=\"product.name\"\n   * data-rg-set=\"product.price @@ convertType\" -> will convert price to number\n   * data-rg-set=\"product.price @@ convertTypeDont\" -> will not convert price to number, it will stay string\n   * @returns {void}\n   */\n  rgSet() {\n    this._debug('rgSet', '--------- rgSet ------', 'orange', '#F4EA9E');\n\n    const attrName = 'data-rg-set';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgSet', `found elements:: ${elems.length}`, 'orange');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName);\n      if (!attrVal) { console.error(`Attribute \"data-rg-set\" has bad definition (data-rg-set=\"${attrVal}\").`); continue; }\n\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const prop = attrValSplited[0].trim();\n\n      const convertType_param = !!attrValSplited[1] ? attrValSplited[1].trim() : ''; // 'convertType' | 'convertTypeDont'\n      const convertType = convertType_param === 'convertTypeDont' ? false : true;\n\n      const handler = event => {\n        const val = this._getElementValue(elem, convertType);\n        this._setControllerValue(prop, val);\n        this._debug('rgSet', `Executed rgSet listener --> controller property:: ${prop} = ${val}`, 'orangered');\n      };\n\n      const eventName = 'input';\n      elem.addEventListener(eventName, handler);\n      this.$rg.listeners.push({ attrName, elem, handler, eventName });\n      this._debug('rgSet', `pushed::  <${elem.localName} ${attrName}=\"${attrVal}\"> | rgListeners: ${this.$rg.listeners.length}`, 'orange');\n    }\n  }\n\n\n\n  /**\n   * data-rg-model=\"<controllerProp> [@@convertType|convertTypeDont]\"\n   * Bind controller property and view INPUT, SELECT, TEXTAREA, ...etc in both directions.\n   * When the view is updated the controller property will be updated and when controller property is updated the view will be updated.\n   * This is a shortcut of rgSet and rgValue, for example <input type=\"text\" data-rg-input=\"product\" data-rg-set=\"product\"> is <input type=\"text\" data-rg-model=\"product\">\n   * Example:\n   * data-rg-model=\"product.name\"\n   * data-rg-model=\"$model.product.name\"  --> $model. should be omitted althought it will not cause issue\n   * data-rg-model=\"product.price @@ convertType\" -> will convert price to number\n   * data-rg-model=\"product.price @@ convertTypeDont\" -> will not convert price to number, it will stay string\n   * @returns {void}\n   */\n  rgModel() {\n    this._debug('rgModel', '--------- rgModel ------', 'orange', '#F4EA9E');\n\n    const attrName = 'data-rg-model';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgModel', `found elements:: ${elems.length}`, 'orange');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName);\n      if (!attrVal) { console.error(`Attribute \"data-rg-model\" has bad definition (data-rg-model=\"${attrVal}\").`); continue; }\n\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const mprop = attrValSplited[0].replace('$model.', '').trim(); // $model property name (without $model.)\n\n      const convertType_param = !!attrValSplited[1] ? attrValSplited[1].trim() : ''; // 'convertType' | 'convertTypeDont'\n      const convertType = convertType_param === 'convertTypeDont' ? false : true;\n\n      /** SETTER **/\n      const val1 = this._getModelValue(mprop);\n      this._setElementValue(elem, val1);\n      this._debug('rgModel', `rgModel set element value  --> controller property:: ${mprop} = ${val1} | elem.type:: ${elem.type}`, 'orangered');\n\n      /** LISTENER **/\n      const handler = event => {\n        const val2 = this._getElementValue(elem, convertType);\n        this._setModelValue(mprop, val2); // this will trigger render()\n        this._debug('rgModel', `Executed rgModel listener --> controller property:: ${mprop} = ${val2}`, 'orangered');\n      };\n\n      const eventName = 'input';\n      elem.addEventListener(eventName, handler);\n      this.$rg.listeners.push({ attrName, elem, handler, eventName });\n      this._debug('rgModel', `rgModel listener -- pushed::  <${elem.localName} ${attrName}=\"${attrVal}\"> -- rgListeners: ${this.$rg.listeners.length}`, 'orange');\n    }\n\n  }\n\n\n\n}\n\n\nexport default DataRgListeners;\n\n","import DataRgListeners from './DataRgListeners.js';\n\n\n/**\n * Parse HTML elements with the \"data-rg-\" attribute (non-listeners)\n */\nclass DataRg extends DataRgListeners {\n\n  constructor() {\n    super();\n\n    this.$rg = {\n      separator: '@@', // separator in the data-rg- attribute\n      elems: {},  // set by rgElem()\n      listeners: [], // collector of the data-rg- listeners  [{attrName, elem, handler, eventName}]\n      varnameChars: '[a-zA-Z\\\\d\\\\$\\\\_\\\\.]+' // valid characters in the variable name\n    };\n  }\n\n\n  /**\n   * data-rg-setinitial=\"<controllerProperty> [@@convertType|convertTypeDont]\"\n   * Parse the \"data-rg-setinitial\" attribute in the form tag.\n   * Get the element value and set the controller property value. The element is input, textarea or select tag.\n   * Examples:\n   * data-rg-setinitial=\"product\" or data-rg-setinitial=\"product @@convertType\" - convert data type automatically, for example: '5' convert to Number, or JSON to Object\n   * data-rg-setinitial=\"employee.name @@convertTypeDont\" - do not convert data type automatically\n   * @returns {void}\n   */\n  rgSetinitial() {\n    this._debug('rgSetinitial', '--------- rgSetinitial ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-setinitial';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgSetinitial', `found elements:: ${elems.length}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName) || ''; // 'controllerProperty @@convertTypeNot'\n      if (!attrVal) { console.error(`rgSetinitial Error:: Attribute has bad definition (data-rg-setinitial=\"${attrVal}\").`); continue; }\n\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const prop = attrValSplited[0].trim();\n\n      const convertType_param = !!attrValSplited[1] ? attrValSplited[1].trim() : ''; // 'convertType' | 'convertTypeDont'\n      const convertType = convertType_param === 'convertTypeDont' ? false : true;\n\n      const val = this._getElementValue(elem, convertType);\n      this._setControllerValue(prop, val);\n\n      this._debug('rgSetinitial', `elem.type:: ${elem.type} -- set initial --> ${prop}:: ${val}`, 'navy');\n    }\n  }\n\n\n  /************** GENERATORS (create or remove HTML elements) *************/\n  /**\n   * data-rg-for=\"<controllerProperty> [@@<priority>]\"\n   * Parse the \"data-rg-for\" attribute. Multiply element by the controllerProperty array value.\n   * Element with the higher priprity will be parsed before.\n   * Examples:\n   * data-rg-for=\"companies\"\n   * data-rg-for=\"company.employers\"\n   * data-rg-for=\"company.employers @@ 2\" --> priority is 2\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgFor(attrValQuery) {\n    this._debug('rgFor', `--------- rgFor (start) ------`, 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-for';\n    this._removeParentElements(attrName, attrValQuery);\n    let elems = this._listElements(attrName, attrValQuery);\n    elems = this._sortElementsByPriority(elems, attrName); // sorted elements\n    this._debug('rgFor', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName); // company.employers\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const priority = !!attrValSplited[1] ? attrValSplited[1].trim() : 0;\n\n      const prop = attrValSplited[0].trim();\n      const val = this._getControllerValue(prop); // Array\n\n      if (this._debug().rgFor) { console.log('rgFor -->', 'attrVal::', attrVal, ' | val::', val, ' priority::', priority); }\n\n      // remove all gen elems\n      this._genElem_remove(elem, attrName, attrVal);\n\n      // hide element if val is not defined\n      if (!val || (!!val && !val.length)) { elem.style.display = 'none'; continue; }\n\n\n      // multiply new element by cloning and adding sibling elements\n      const newElem = this._genElem_define(elem, attrName, attrVal);\n      const newElemsTotal = val.length;\n      for (let i = 1; i <= newElemsTotal; i++) {\n        // place newElem as sibling of the elem\n        elem.parentNode.insertBefore(newElem, elem.nextSibling);\n\n        // solve outerHTML - $i0, {{ctrlProp}}, solveMath//\n        const i2 = newElemsTotal - i; // 3,2,1,0\n        let outerHTML = this._solve_$i(i2, newElem.outerHTML, priority); // replace $i, $i1, $i12 with the number\n        outerHTML = this._solveInterpolated(outerHTML); // parse interpolated text in the variable name, for example: pet_{{$model.pets.$i0._id}}\n        outerHTML = this._solveMath(outerHTML);\n        newElem.outerHTML = outerHTML;\n      }\n\n    }\n\n    this._debug('rgFor', '--------- rgFor (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n\n  /**\n   * data-rg-repeat=\"controllerProperty\"\n   * Parse the \"data-rg-repeat\" attribute. Repeat the element n times wher n is defined in the controller property.\n   * It's same as rgFor() except the controller property is not array but number.\n   * Examples:\n   * data-rg-repeat=\"totalRows\"\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgRepeat(attrValQuery) {\n    this._debug('rgRepeat', `--------- rgRepeat (start) ------`, 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-repeat';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgRepeat', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName);\n\n      const prop = attrVal.trim();\n      const val = +this._getControllerValue(prop);\n      this._debug('rgRepeat', `Element will be repeated ${val} times.`, 'navy');\n\n      // remove all gen elems\n      this._genElem_remove(elem, attrName, attrVal);\n\n\n      // multiply element by cloning and adding sibling elements\n      const newElem = this._genElem_define(elem, attrName, attrVal);\n      const newElemsTotal = val;\n      for (let i = 1; i <= newElemsTotal; i++) {\n        // place newElem as sibling of the elem\n        elem.parentNode.insertBefore(newElem, elem.nextSibling);\n\n        // solve outerHTML - $in, {{ctrlProp}}, solveMath//\n        const i2 = newElemsTotal - i; // 3,2,1,0\n        let outerHTML = this._solve_$i(i2, newElem.outerHTML, ''); // replace $i, $i1, $i12 with the number\n        outerHTML = this._solveInterpolated(outerHTML); // parse interpolated text in the variable name, for example: pet_{{$model.pets.$i0._id}}\n        outerHTML = this._solveMath(outerHTML);\n        newElem.outerHTML = outerHTML;\n      }\n\n    }\n\n    this._debug('rgRepeat', '--------- rgRepeat (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n  /**\n   * data-rg-print=\"<controllerProperty> [@@ inner|outer|sibling|prepend|append]\"\n   * data-rg-print=\"company.name @@ inner\"\n   * data-rg-print=\"company.name @@ inner @@ keep\"   - keep the innerHTML when value is undefined\n   * Parse the \"data-rg-print\" attribute. Print the controller's property to view.\n   * Examples:\n   * data-rg-print=\"product\" - product is the controller property\n   * data-rg-print=\"product.name @@ outer\"\n   * data-rg-print=\"product.name @@ sibling\"\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * for example product.name in the data-rg-print=\"product.name @@ inner\". This speed up parsing because it's limited only to one element.\n   * @returns {void}\n   */\n  rgPrint(attrValQuery) {\n    this._debug('rgPrint', `--------- rgPrint (start) ------`, 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-print';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgPrint', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName);\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      // get val and apply pipe to the val\n      const propPipe = attrValSplited[0].trim(); // controller property name with pipe:  company.name | slice(0,21)\n      const propPipeSplitted = propPipe.split('|');\n      const prop = propPipeSplitted[0].trim(); // company.name\n      let val = this._getControllerValue(prop);\n\n      // correct val\n      const toKeep = !!attrValSplited[2] ? attrValSplited[2].trim() === 'keep' : false; // to keep the innerHTML as value when val is undefined\n      if (val === undefined) { val = toKeep ? elem.innerHTML : ''; } // the default value is defined in the HTML tag\n      else if (typeof val === 'object') { val = JSON.stringify(val); }\n      else if (typeof val === 'number') { val = +val; }\n      else if (typeof val === 'string') { val = val; }\n      else if (typeof val === 'boolean') { val = val.toString(); }\n      else { val = val; }\n\n      // apply pipe, for example: data-rg-print=\"val | slice(0,130)\"\n      let pipe_funcDef = propPipeSplitted[1]; // slice(0, 130), json, ...\n      if (!!pipe_funcDef && !!val) {\n        pipe_funcDef = pipe_funcDef.trim();\n        const { funcName, funcArgs } = this._funcParse(pipe_funcDef, elem);\n        if (typeof val[funcName] === 'function') { val = val[funcName](...funcArgs); }\n      }\n\n      // define action\n      let act = attrValSplited[1] || 'inner';\n      act = act.trim();\n\n      // remove all gen elems\n      this._genElem_remove(elem, attrName, attrVal);\n\n      // generate new element and place it in the sibling position\n      let newElem;\n      if (act !== 'inner') {\n        newElem = this._genElem_define(elem, attrName, attrVal);\n        elem.parentNode.insertBefore(newElem, elem.nextSibling);\n      }\n\n\n      // load content in the element\n      if (act === 'inner') {\n        elem.innerHTML = val;\n      } else if (act === 'outer') {\n        const id2 = newElem.getAttribute('data-rg-print-id');\n        newElem.outerHTML = `<span data-rg-print-gen=\"${attrVal}\" data-rg-print-id=\"${id2}\">${val}</span>`;\n      } else if (act === 'sibling') {\n        elem.style.display = '';\n        const id2 = newElem.getAttribute('data-rg-print-id');\n        newElem.outerHTML = `<span data-rg-print-gen=\"${attrVal}\" data-rg-print-id=\"${id2}\">${val}</span>`;\n      } else if (act === 'prepend') {\n        newElem.innerHTML = val + ' ' + elem.innerHTML;\n      } else if (act === 'append') {\n        newElem.innerHTML = elem.innerHTML + ' ' + val;\n      } else if (act === 'inset') {\n        newElem.innerHTML = elem.innerHTML.replace('{{}}', val);\n      } else {\n        elem.innerHTML = val;\n      }\n\n      this._debug('rgPrint', `rgPrint:: ${propPipe} = ${val} -- act::\"${act}\" -- toKeep::${toKeep}`, 'navy');\n    }\n\n    this._debug('rgPrint', '--------- rgPrint (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n\n\n  /************ NON-GENERATORS (will not generate new HTML elements or remove existing - will not change the DOM structure) ***********/\n  /**\n   * data-rg-if=\"<controllerProperty>\"\n   * Parse the \"data-rg-if\" attribute. Show or hide the HTML element by setting display:none.\n   * Examples:\n   * data-rg-if=\"this.ifAge\" - rend() will not be triggered when this.ifAge is changed\n   * data-rg-if=\"$model.ifAge $eq(22)\" - rend() will be triggered when $model.ifAge is changed\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgIf(attrValQuery) {\n    this._debug('rgIf', '--------- rgIf (start) ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-if';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgIf', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName).trim(); // age_tf , $model.age === 3, age > this.myAge , age < $model.yourAge , age $lt($model.age)\n      if (!attrVal) { console.error(`Attribute \"data-rg-if\" has bad definition (data-rg-if=\"${attrVal}\").`); continue; }\n\n      /* define tf */\n      let tf = false;\n      if (/\\!|<|>|=/.test(attrVal)) {\n        // parse data-rg-if with = < > && ||: data-rg-if=\"5<2\", data-rg-if=\"$model.age >= $model.myAge\", data-rg-if=\"this.age > 3\" (this. will not be rendered)\n        tf = this._calcComparison_A(attrVal);\n      } else {\n        // parse data-rg-if with pure controller value: data-rg-if=\"is_active\"\n        // parse data-rg-if with the comparison operators: $not(), $eq(22), $ne(22), ...  --> data-rg-if=\"age $eq(5)\" , data-rg-if=\"$model.age $eq($model.myAge)\", data-rg-if=\"$model.age $gt(this.myNum)\"\n        tf = this._calcComparison_B(attrVal);\n      }\n\n      /* hide/show elem */\n      if (tf) {\n        const dataRgPrint_attrVal = elem.getAttribute('data-rg-print');\n        if (!!dataRgPrint_attrVal && /outer|sibling|prepend|append|inset/.test(dataRgPrint_attrVal)) { elem.style.display = 'none'; } // element with data-rg-print should stay hidden because of _genElem_define()\n        else { elem.style.display = ''; }\n      } else {\n        elem.style.display = 'none';\n      }\n\n      this._debug('rgIf', `rgIf:: <${elem.tagName} data-rg-if=\"${attrVal}\"> => tf: ${tf} -- outerHTML: ${elem.outerHTML}`, 'navy');\n    }\n\n    this._debug('rgIf', '--------- rgIf (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n\n  /**\n   * data-rg-spinner=\"<controllerProperty>\"\n   * Parse the \"data-rg-spinner\" attribute. Load the spinner inside data-rg-spinner element when expression with $model is true.\n   * This method acts like rgIf.\n   * @param {string} bool - to show or hide the element\n   * @returns {void}\n   */\n  rgSpinner(attrValQuery) {\n    this._debug('rgSpinner', '--------- rgSpinner (start) ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-spinner';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgSpinner', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName).trim(); // ifAge\n      if (!attrVal) { console.error(`Attribute \"data-rg-spinner\" has bad definition (data-rg-spinner=\"${attrVal}\").`); continue; }\n\n      /* define tf */\n      let tf = false;\n      if (/\\!|<|>|=/.test(attrVal)) {\n        // parse data-rg-if with = < > && ||: data-rg-if=\"5<2\", data-rg-if=\"$model.age >= $model.myAge\", data-rg-if=\"this.age > 3\" (this. will not be rendered)\n        tf = this._calcComparison_A(attrVal);\n      } else {\n        // parse data-rg-if with pure controller value: data-rg-if=\"is_active\"\n        // parse data-rg-if with the comparison operators: $not(), $eq(22), $ne(22), ...  --> data-rg-if=\"age $eq(5)\" , data-rg-if=\"$model.age $eq($model.myAge)\", data-rg-if=\"$model.age $gt(this.myNum)\"\n        tf = this._calcComparison_B(attrVal);\n      }\n\n      /* hide/show spinner */\n      if (tf) {\n        const styleScoped = `\n        <span data-rg-spinner-gen>\n          <style scoped>\n            [data-rg-spinner]>span:after {\n              content: '';\n              display: block;\n              font-size: 10px;\n              width: 1em;\n              height: 1em;\n              margin-top: -0.5em;\n              animation: spinner 1500ms infinite linear;\n              border-radius: 0.5em;\n              box-shadow: #BEBEBE 1.5em 0 0 0, #BEBEBE 1.1em 1.1em 0 0, #BEBEBE 0 1.5em 0 0, #BEBEBE -1.1em 1.1em 0 0, #BEBEBE -1.5em 0 0 0, #BEBEBE -1.1em -1.1em 0 0, #BEBEBE 0 -1.5em 0 0, #BEBEBE 1.1em -1.1em 0 0;\n            }\n            @-webkit-keyframes spinner {\n              0% { transform: rotate(0deg);}\n              100% { transform: rotate(360deg); }\n            }\n            @-moz-keyframes spinner {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n            @-o-keyframes spinner {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n            @keyframes spinner {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n          </style>\n        </span>\n        `;\n\n        // 1. add SPAN and STYLE tags\n        elem.insertAdjacentHTML('beforeend', styleScoped);\n\n        // 2. center span spinner in the parent element\n        const elemRect = elem.getBoundingClientRect(); // {x,y,width,height}}\n        const spinnerElem = elem.querySelector('span[data-rg-spinner-gen]');\n\n        spinnerElem.style.position = 'relative';\n\n        const x = elemRect.width / 2;\n        spinnerElem.style.left = x + 'px';\n\n        const y = elemRect.height / 2;\n        spinnerElem.style.top = y + 'px';\n\n        this._debug('rgSpinner', `spinner position:: x=${x}px , y=${y}px`, 'navy');\n\n      } else {\n        elem.innerHTML = '';\n      }\n\n      this._debug('rgSpinner', `rgSpinner:: <${elem.tagName} data-rg-spinner=\"${attrVal}\"> => tf: ${tf}`, 'navy');\n    }\n\n    this._debug('rgSpinner', '--------- rgSpinner (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n\n  /**\n   * data-rg-switch=\"<controllerProperty> [@@ multiple]\"\n   * Parse the \"data-rg-switch\" attribute. Show or hide elements depending if \"data-rg-switchcase\" value matches controller property.\n   * Examples:\n   * data-rg-switch=\"ctrlprop\" - ctrlprop is string, number or boolean\n   * data-rg-switch=\"ctrlprop @@ multiple\" - ctrlprop is array of string, number or boolean\n   * Notice @@ multiple can select multiple switchcases.\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgSwitch(attrValQuery) {\n    this._debug('rgSwitch', '--------- rgSwitch (start) ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-switch';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgSwitch', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName) || ''; // 'controllerProperty @@ multiple'\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const isMultiple = !!attrValSplited[1] ? attrValSplited[1].trim() === 'multiple' : false;\n\n      const prop = attrValSplited[0].trim();\n      const val = this._getControllerValue(prop);\n\n      // get data-rg-switchcase and data-rg-switchdefault attribute values\n      const switchcaseElems = elem.querySelectorAll('[data-rg-switch] > [data-rg-switchcase]');\n      const switchdefaultElem = elem.querySelector('[data-rg-switch] > [data-rg-switchdefault]');\n\n      // set data-rg-switchcase\n      let isMatched = false; // is data-rg-switchcase value matched\n      for (const switchcaseElem of switchcaseElems) {\n        let switchcaseAttrVal = switchcaseElem.getAttribute('data-rg-switchcase');\n        switchcaseAttrVal = switchcaseAttrVal.trim();\n\n        if (!isMultiple && switchcaseAttrVal === val) { switchcaseElem.style.display = ''; isMatched = true; }\n        else if (isMultiple && val && val.indexOf(switchcaseAttrVal) !== -1) { switchcaseElem.style.display = ''; isMatched = true; }\n        else { switchcaseElem.style.display = 'none'; }\n\n        this._debug('rgSwitch', `data-rg-switch=\"${attrVal}\" data-rg-switchcase=\"${switchcaseAttrVal}\" --val:: \"${val}\" --isMatched: ${isMatched}`, 'navy');\n      }\n\n      // set data-rg-switchdefault\n      if (!!switchdefaultElem) { !isMatched ? switchdefaultElem.style.display = '' : switchdefaultElem.style.display = 'none'; }\n\n      this._debug('rgSwitch', `data-rg-switch=\"${attrVal}\" data-rg-switchdefault --isMatched: ${isMatched}`, 'navy');\n    }\n\n    this._debug('rgSwitch', '--------- rgSwitch (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n\n  /**\n   * data-rg-disabled=\"<controllerProperty>\"\n   * Parse the \"data-rg-disabled\" attribute. set the element to disabled state.\n   * Examples:\n   * data-rg-disabled=\"ifAge\"\n   * data-rg-disabled=\"ifAge $eq(22)\"\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgDisabled(attrValQuery) {\n    this._debug('rgDisabled', '--------- rgDisabled (start) ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-disabled';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgDisabled', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName).trim(); // ifAge\n      if (!attrVal) { console.error(`rgDisabled Error:: Attribute has bad definition (data-rg-disabled=\"${attrVal}\").`); continue; }\n\n      /* define tf */\n      let tf = false;\n      if (/\\!|<|>|=/.test(attrVal)) {\n        // parse data-rg-if with = < > && ||: data-rg-if=\"5<2\", data-rg-if=\"$model.age >= $model.myAge\", data-rg-if=\"this.age > 3\" (this. will not be rendered)\n        tf = this._calcComparison_A(attrVal);\n      } else {\n        // parse data-rg-if with pure controller value: data-rg-if=\"is_active\"\n        // parse data-rg-if with the comparison operators: $not(), $eq(22), $ne(22), ...  --> data-rg-if=\"age $eq(5)\" , data-rg-if=\"$model.age $eq($model.myAge)\", data-rg-if=\"$model.age $gt(this.myNum)\"\n        tf = this._calcComparison_B(attrVal);\n      }\n\n      /* disable/enable the element */\n      if (tf) { elem.disabled = true; }\n      else { elem.disabled = false; }\n\n      this._debug('rgDisabled', `rgDisabled:: data-rg-disabled=\"${attrVal}\" -- outerHTML: ${elem.outerHTML}`, 'navy');\n    }\n\n    this._debug('rgDisabled', '--------- rgDisabled (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n\n  /**\n   * data-rg-value=\"<controllerProperty>\"\n   * Parse the \"data-rg-value\" attribute. Sets the element's \"value\" attribute from the controller property value.\n   * Examples:\n   * data-rg-value=\"product\"\n   * data-rg-value=\"$model.employee.name\"\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgValue(attrValQuery) {\n    this._debug('rgValue', '--------- rgValue ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-value';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgValue', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName);\n      if (!attrVal) { console.error(`rgValue Error:: Attribute has bad definition (data-rg-value=\"${attrVal}\").`); continue; }\n\n      const prop = attrVal.trim();\n      const val = this._getControllerValue(prop);\n\n      this._setElementValue(elem, val);\n\n      this._debug('rgValue', `elem.type:: ${elem.type} -- ${prop}:: ${val}`, 'navy');\n    }\n  }\n\n\n\n  /**\n   * data-rg-checked=\"<controllerProperty>\"\n   * Sets the \"checked\" attribute with the controller property value.\n   * The controller property is an array. If the checkbox value is in that array then the checkbox is checked.\n   * Use it for checkboxes only.\n   * Examples:\n   * data-rg-checked=\"selectedProducts\"\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgChecked(attrValQuery) {\n    this._debug('rgChecked', '--------- rgChecked ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-checked';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgChecked', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName);\n      if (!attrVal) { console.error(`rgChecked Error:: Attribute has bad definition (data-rg-checked=\"${attrVal}\").`); continue; }\n\n      const prop = attrVal.trim();\n      const val = this._getControllerValue(prop); // val must be array\n      if (!Array.isArray(val)) { console.error(`rgChecked Error:: The controller property ${prop} is not array.`); continue; }\n\n      if (val.indexOf(elem.value) !== -1) { elem.checked = true; }\n      else { elem.checked = false; }\n\n      this._debug('rgChecked', `elem.type:: ${elem.type} -- ${prop}:: ${val}`, 'navy');\n    }\n  }\n\n\n\n  /**\n   * data-rg-class=\"<controllerProperty> [@@ add|replace]\"\n   * Parse the \"data-rg-class\" attribute. Set element class attribute.\n   * Examples:\n   * data-rg-class=\"myKlass\" - add new classes to existing classes\n   * data-rg-class=\"myKlass @@ add\" - add new classes to existing classes\n   * data-rg-class=\"myKlass @@ replace\" - replace existing classes with new classes\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgClass(attrValQuery) {\n    this._debug('rgClass', '--------- rgClass ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-class';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgClass', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName) || ''; // 'controllerProperty'\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const prop = attrValSplited[0].trim(); // controller property name company.name\n      const valArr = this._getControllerValue(prop) || []; // ['my-bold', 'my-italic']\n      if (!Array.isArray(valArr)) { console.log(`%c rgClassWarn:: The controller property \"${prop}\" is not an array.`, `color:Maroon; background:LightYellow`); continue; }\n\n      let act = attrValSplited[1] || '';\n      act = act.trim() || 'add';\n\n      if (act == 'replace' && !!valArr.length) { elem.removeAttribute('class'); }\n      for (const val of valArr) { elem.classList.add(val); }\n\n      this._debug('rgClass', `data-rg-class=\"${attrVal}\" --- ctrlProp:: ${prop} | ctrlVal:: ${valArr} | act:: ${act}`, 'navy');\n    }\n  }\n\n\n\n  /**\n   * data-rg-style=\"<controllerProperty> [@@ add|replace]\"\n   * Parse the \"data-rg-style\" attribute. Set element style attribute.\n   * Examples:\n   * data-rg-style=\"myStyl\" - add new styles to existing sytles\n   * data-rg-style=\"myStyl @@ add\" - add new styles to existing sytles\n   * data-rg-style=\"myStyl @@ replace\" - replace existing styles with new styles\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgStyle(attrValQuery) {\n    this._debug('rgStyle', '--------- rgStyle ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-style';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgStyle', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName) || ''; // 'controllerProperty'\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const prop = attrValSplited[0].trim();\n      const valObj = this._getControllerValue(prop); // {fontSize: '21px', color: 'red'}\n\n      let act = attrValSplited[1] || '';\n      act = act.trim() || 'add';\n\n      if (act == 'replace') { elem.removeAttribute('style'); }\n\n      let styleProps = [];\n      if (!!valObj) {\n        styleProps = Object.keys(valObj);\n        for (const styleProp of styleProps) { elem.style[styleProp] = valObj[styleProp]; }\n      }\n\n      this._debug('rgStyle', `data-rg-style=\"${attrVal}\" --- prop:: \"${prop}\" | styleProps:: \"${styleProps}\" | act:: \"${act}\"`, 'navy');\n    }\n  }\n\n\n\n  /**\n   * data-rg-src\"<controllerProperty> [@@<defaultSrc>]\"\n   * Parse the \"data-rg-src\" attribute. Set element src attribute.\n   * Examples:\n   * data-rg-src=\"imageURL\" - define <img src=\"\">\n   * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n   * @returns {void}\n   */\n  rgSrc(attrValQuery) {\n    this._debug('rgSrc', '--------- rgSrc ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-src';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgSrc', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName) || '';\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const prop = attrValSplited[0].trim();\n      const val = this._getControllerValue(prop);\n\n      // when val is undefined load defaultSrc\n      let defaultSrc = attrValSplited[1] || '';\n      defaultSrc = defaultSrc.trim();\n\n      const src = val || defaultSrc;\n      elem.src = src;\n\n      this._debug('rgSrc', `data-rg-src=\"${attrVal}\" --prop:: \"${prop}\" --src:: \"${src}\"`, 'navy');\n    }\n  }\n\n\n\n  /**\n  * data-rg-attr\"<controllerProperty> [@@<attributeName>]\"\n  * Parse the \"data-rg-attr\" attribute. Set element's attribute value.\n  * Examples:\n  * data-rg-attr=\"pageURL @@ href\" - define <a href=\"\">\n  * @param {string|RegExp} attrValQuery - controller property name, query for the attribute value\n  * @returns {void}\n  */\n  rgAttr(attrValQuery) {\n    this._debug('rgAttr', '--------- rgAttr ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-attr';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgAttr', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName) || ''; // pageURL @@ href\n      const attrValSplited = attrVal.split(this.$rg.separator);\n\n      const prop = attrValSplited[0].trim();\n      const val = this._getControllerValue(prop);\n\n      if (!attrValSplited[1]) { console.error(`Attribute name is not defined in the ${attrName}=\"${attrVal}\".`); continue; }\n      const attribute_name = attrValSplited[1].trim(); // href\n\n      elem.setAttribute(attribute_name, val);\n\n      this._debug('rgAttr', `data-rg-attr=\"${attrVal}\" --prop:: \"${prop}\" --val:: \"${val}\" --> added ${attribute_name}=\"${val}\"`, 'navy');\n    }\n  }\n\n\n\n  /**\n   * data-rg-elem=\"<rgelemsProp>\"     --> rgelemsProp is the property of the this.$rg.elems, for example data-rg-elem=\"myElement\" => this.$rg.elems.myElement\n   * Parse the \"data-rg-elem\" attribute. Transfer the DOM element to the controller property \"this.$rg.elems\".\n   * Examples:\n   * data-rg-elem=\"paragraf\" -> fetch it with this.$rg.elems['paragraf']\n   * @param {string|RegExp} attrValQuery - query for the attribute value\n   * @returns {void}\n   */\n  rgElem(attrValQuery) {\n    this._debug('rgElem', '--------- rgElem ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-elem';\n    const elems = this._listElements(attrName, attrValQuery);\n    this._debug('rgElem', `found elements:: ${elems.length} | attrValQuery:: ${attrValQuery}`, 'navy');\n    if (!elems.length) { return; }\n\n    // associate values\n    for (const elem of elems) {\n      const attrVal = elem.getAttribute(attrName) || ''; // 'paragraf'\n      this.$rg.elems[attrVal] = elem;\n    }\n  }\n\n\n\n  /**\n   * data-rg-echo=\"<text>\"\n   * Parse the \"data-rg-echo\" attribute. Prints the \"text\" in the HTML element as innerHTML.\n   * Examples:\n   * data-rg-echo=\"$i+1\"  --> prints the iteration number\n   * @returns {void}\n   */\n  rgEcho() {\n    this._debug('rgEcho', '--------- rgEcho (start) ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-echo';\n    const elems = this._listElements(attrName, '');\n    this._debug('rgEcho', `found elements:: ${elems.length}`, 'navy');\n    if (!elems.length) { return; }\n\n    // associate values\n    for (const elem of elems) {\n      let txt = elem.getAttribute('data-rg-echo');\n\n      this._debug('rgEcho', `rgEcho txt before: ${txt}`, 'navy', '#B6ECFF');\n\n      txt = this._solveInterpolated(txt); // parse interpolated text in the variable name, for example: pet_{{$model.pets.$i0._id}}\n      txt = this._solveMath(txt); // calculte for example solveMath/$i0 + 1/\n      txt = txt.replace(/\\[/g, '<').replace(/\\]/g, '>'); // solve html tags, [b style='color:red']3[/b]\n\n      this._debug('rgEcho', `rgEcho txt after: ${txt}\\n`, 'navy', '#B6ECFF');\n\n      elem.innerHTML = txt;\n    }\n\n    this._debug('rgEcho', '--------- rgEcho (end) ------', 'navy', '#B6ECFF');\n  }\n\n\n\n  /**\n   * Parse the words with i18n> prefix and replace it with the corersponding word in /i18n/{lang}.json\n   */\n  rgI18n() {\n\n  }\n\n\n\n}\n\n\nexport default DataRg;\n","import DataRg from './DataRg.js';\n\n\nclass View extends DataRg {\n\n  constructor() {\n    super();\n    // window.regochWeber.viewsCached is defined by the App:controllerViewsCached()\n  }\n\n\n\n  /************** INCLUDES ****************/\n  /**\n   * Include HTML components with the data-rg-inc attribute.\n   * Process:\n   * 1) Select all elements which has data-rg-inc but not data-rg-cin.\n   * 2) Put data-rg-cin which marks that the data-rg-inc element has beed parsed.\n   * 3) Load the content in the data-rg-inc element as inner, outer, sibling, append or prepend. Every loaded element will have data-rg-incgen attribute to mark elements generated with data-rg.inc.\n   * 4) Add data-rg-cin attribute to the element with the data-rg-inc to mark that the content is loaded and prevent load in the next iteration.\n   * ) Multiple iterations will haeppen when data-rg-inc elements are nested. In case of multiple iterations only in the first iteration will be deleted all data-rg-incgen elements to make reset.\n   * Examples:\n   * <header data-rg-inc=\"/html/header.html\">---header---</header>\n   * <header data-rg-inc=\"/html/header.html @@  @@ h2 > small\">---header---</header>\n   * <header data-rg-inc=\"/html/header.html @@ inner\">---header---</header>\n   * <header data-rg-inc=\"/html/header.html @@ prepend\">---header---</header>\n   * <header data-rg-inc=\"/html/header.html @@ append\">---header---</header>\n   * <header data-rg-inc=\"/html/header.html @@ outer @@ h2 > small\">---header---</header>\n   * <header data-rg-inc=\"/html/header.html @@ outer @@ b:nth-child(2)\"></header>\n   * @param {boolean} delIncgens - delete data-rg-incgen elements (only in the first iteration)\n   * @returns {void}\n   */\n  async rgInc(delIncgens = true) {\n    const elems = document.querySelectorAll('[data-rg-inc]:not([data-rg-cin])');\n    this._debug('rgInc', '--------- rgInc ------', '#8B0892', '#EDA1F1');\n    this._debug('rgInc', `elems found: ${elems.length}`, '#8B0892');\n    if (!elems.length) { return; }\n\n    // remove all data-rg-incgen elements (just first iteration)\n    if (delIncgens) {\n      const elems2 = document.querySelectorAll('[data-rg-incgen]');\n      this._debug('rgInc', `data-rg-incgen elems deleted: ${elems2.length}`, '#8B0892');\n      for (const elem2 of elems2) { elem2.remove(); }\n    }\n\n    for (const elem of elems) {\n      // extract attribute data\n      const attrValue = elem.getAttribute('data-rg-inc');\n      const path_dest_cssSel = attrValue.replace(/\\s+/g, '').replace(/^\\//, '').split(this.$rg.separator); // remove empty spaces and leading /\n      const viewPath = !!path_dest_cssSel && !!path_dest_cssSel.length ? 'inc/' + path_dest_cssSel[0] : '';\n      const dest = !!path_dest_cssSel && path_dest_cssSel.length >= 2 ? path_dest_cssSel[1] : 'inner';\n      const cssSel = !!path_dest_cssSel && path_dest_cssSel.length === 3 ? path_dest_cssSel[2] : '';\n      if (this._debug().rgInc) { console.log('\\n******** path_dest_cssSel:: ', viewPath, dest, cssSel, '********'); }\n      if (!viewPath) { console.error('viewPath is not defined'); return; }\n\n      // Get HTML content. First try from the cached JSON and if it doesn't exist then request from the server.\n      let nodes, str;\n      if (!!window && !!window.regochWeber && !!window.regochWeber.viewsCached && !!window.regochWeber.viewsCached[viewPath]) { // HTML content from the cached file /cache/views.json\n        const cnt = this.fetchCachedView(viewPath, cssSel);\n        nodes = cnt.nodes;\n        str = cnt.str;\n        this._debug('rgInc', '--from cached JSON', '#8B0892');\n      } else { // HTML content by requesting the server\n        const cnt = await this.fetchRemoteView(viewPath, cssSel);\n        nodes = cnt.nodes;\n        str = cnt.str;\n        this._debug('rgInc', '--from server', '#8B0892');\n      }\n\n      if (this._debug().rgInc) {\n        console.log('elem::', elem);\n        console.log('nodes loaded::', nodes);\n        // console.log('str loaded::', str);\n      }\n\n\n      // load content in the element\n      if (dest === 'inner') {\n        elem.innerHTML = str;\n\n      } else if (dest === 'outer') {\n        elem.outerHTML = str;\n\n      } else if (dest === 'sibling') {\n        const parent = elem.parentNode;\n        const sibling = elem.nextSibling;\n        for (const node of nodes) {\n          if (!node) { return; }\n          const nodeCloned = node.cloneNode(true); // clone the node because inserBefore will delete it\n          if (nodeCloned.nodeType === 1) {\n            nodeCloned.setAttribute('data-rg-incgen', ''); // add attribute data-rg-incgen to mark generated nodes\n            if (!elem.hasAttribute('data-rg-cin')) { parent.insertBefore(nodeCloned, sibling); }\n          }\n        }\n\n      } else if (dest === 'prepend') {\n        const i = nodes.length;\n        for (let i = nodes.length - 1; i >= 0; i--) {\n          if (!!nodes.length && !nodes[i]) { return; }\n          const nodeCloned = nodes[i].cloneNode(true);\n          if (nodeCloned.nodeType === 1) {\n            nodeCloned.setAttribute('data-rg-incgen', '');\n            if (!elem.hasAttribute('data-rg-cin')) { elem.prepend(nodeCloned); }\n          }\n        }\n\n      } else if (dest === 'append') {\n        for (const node of nodes) {\n          if (!node) { return; }\n          const nodeCloned = node.cloneNode(true);\n          if (nodeCloned.nodeType === 1) {\n            nodeCloned.setAttribute('data-rg-incgen', '');\n            if (!elem.hasAttribute('data-rg-cin')) { elem.append(nodeCloned); }\n          }\n        }\n\n      }\n\n\n      // set \"data-rg-cin\" attribute which marks that the content is included in the data-rg-inc element and parse process is finished\n      elem.setAttribute('data-rg-cin', '');\n\n      // continue with the next parse iteration (when data-rg-inc elements are nested)\n      if (/data-rg-inc/.test(str)) { await this.rgInc(false); }\n\n    }\n\n  }\n\n\n  /************** VIEWS ****************/\n  /**\n   * Parse elements with the data-rg-view attribute and load router views.\n   * This method should be used in the controller.\n   * When 'sibling', 'prepend' and 'append' is used comment and text nodes will not be injected (only HTML elements (nodeType === 1)).\n   * Example: <main data-rg-view=\"#main\"></main> and in the controller await this.loadView('#sibling', 'pages/home/sibling.html', 'sibling');\n   * @param {string} viewName - view name, for example: '#home'\n   * @param {string} viewPath - view file path (relative to /view/ directory): 'pages/home/main.html'\n   * @param {string} dest - destination where to place the view: inner, outer, sibling, prepend, append\n   * @param {string} cssSel - CSS selector to load part of the view file: 'div > p.bolded:nth-child(2)'\n   * @returns {elem:Element, str:string, nodes:Node[]}\n   */\n  async loadView(viewName, viewPath, dest = 'inner', cssSel) {\n    const attrSel = `[data-rg-view=\"${viewName}\"]`;\n\n    // get a HTML element with data-rg-view attribute\n    const elem = document.querySelector(attrSel);\n    this._debug('loadView', `--------- loadView ${attrSel} -- ${viewPath} ---------`, '#8B0892', '#EDA1F1');\n    if (this._debug().loadView) { console.log('elem::', elem); }\n    if (!elem) { throw new Error(`Element ${attrSel} not found.`); }\n    if (!viewPath) { throw new Error(`View path is not defined.`); }\n\n    // Get HTML content. First try from the cached JSON and if it doesn't exist then request from the server.\n    let nodes, str;\n    if (!!window && !!window.regochWeber && !!window.regochWeber.viewsCached && !!window.regochWeber.viewsCached[viewPath]) { // HTML content from the cached file /cache/views.json\n      const cnt = this.fetchCachedView(viewPath, cssSel);\n      nodes = cnt.nodes;\n      str = cnt.str;\n      this._debug('loadView', '--from cached JSON', '#8B0892');\n    } else { // HTML content by requesting the server\n      const cnt = await this.fetchRemoteView(viewPath, cssSel);\n      nodes = cnt.nodes;\n      str = cnt.str;\n      this._debug('loadView', '--from server', '#8B0892');\n    }\n\n    if (this._debug().loadView) {\n      console.log('nodes loaded::', nodes);\n      // console.log('str loaded::', str);\n    }\n\n\n    // empty content from the element by removing the data-rg-viewgen elements\n    this.emptyView(viewName, dest);\n\n\n    // load content in the element\n    if (dest === 'inner') {\n      elem.innerHTML = str;\n\n    } else if (dest === 'outer') {\n      elem.outerHTML = str;\n\n    } else if (dest === 'sibling') {\n      const parent = elem.parentNode;\n      const sibling = elem.nextSibling;\n      for (const node of nodes) {\n        const nodeCloned = node.cloneNode(true); // clone the node because insertBefore will delete it\n        if (nodeCloned.nodeType === 1) {\n          nodeCloned.setAttribute('data-rg-viewgen', viewName); // mark generated nodes\n          parent.insertBefore(nodeCloned, sibling);\n        }\n      }\n\n    } else if (dest === 'prepend') {\n      const i = nodes.length;\n      for (let i = nodes.length - 1; i >= 0; i--) {\n        const nodeCloned = nodes[i].cloneNode(true);\n        if (nodeCloned.nodeType === 1) {\n          nodeCloned.setAttribute('data-rg-viewgen', viewName);\n          elem.prepend(nodeCloned);\n        }\n      }\n\n    } else if (dest === 'append') {\n      for (const node of nodes) {\n        const nodeCloned = node.cloneNode(true);\n        if (nodeCloned.nodeType === 1) {\n          nodeCloned.setAttribute('data-rg-viewgen', viewName);\n          elem.append(nodeCloned);\n        }\n      }\n\n    }\n\n    return { elem, str, nodes };\n  }\n\n\n\n  /**\n   * Load multiple views.\n   * TIP: When using isAsync=false cache views in the regoch.json.\n   * @param {any[][]} viewDefs - array of arrays: [[viewName, viewPath, dest, cssSel]]\n   * @param {boolean} isAsync - to load asynchronously one by one (default: true)\n   * @returns {void}\n   */\n  async loadViews(viewDefs, isAsync = true) {\n    for (const viewDef of viewDefs) {\n      const viewName = viewDef[0];\n      const viewPath = viewDef[1];\n      const dest = viewDef[2];\n      const cssSel = viewDef[3];\n      !!isAsync ? await this.loadView(viewName, viewPath, dest, cssSel) : this.loadView(viewName, viewPath, dest, cssSel);\n    }\n  }\n\n\n\n  /**\n   * Empty a\n   * @param {string} viewName - view name\n   * @param {string} dest - destination where the view was placed: inner, outer, sibling, prepend, append\n   * @returns {void}\n   */\n  emptyView(viewName, dest = 'inner') {\n    const attrSel = `[data-rg-view=\"${viewName}\"]`;\n    const elem = document.querySelector(attrSel);\n    this._debug('emptyView', `--------- emptyView ${attrSel} | ${dest} ---------`, '#8B0892', '#EDA1F1');\n    if (this._debug().emptyView) { console.log('elem::', elem); }\n    if (!elem) { return; }\n\n    // empty the interpolated content\n    if (dest === 'inner') {\n      elem.innerHTML = '';\n    } else if (dest === 'outer') {\n      elem.outerHTML = '';\n    } else if (dest === 'sibling') {\n      for (const genElem of document.querySelectorAll(`[data-rg-viewgen=\"${viewName}\"`)) { genElem.remove(); }\n    } else if (dest === 'prepend') {\n      for (const genElem of document.querySelectorAll(`[data-rg-viewgen=\"${viewName}\"`)) { genElem.remove(); }\n    } else if (dest === 'append') {\n      for (const genElem of document.querySelectorAll(`[data-rg-viewgen=\"${viewName}\"`)) { genElem.remove(); }\n    }\n\n  }\n\n\n  /**\n   * To show body content or not. This method is used to prevent flicker effects.\n   * The HTML content in body tag shouldn't be visible until all data is not fetched in init() and all data-rg- elements are not rendered in rend().\n   * Use this method in the controller's loader(), init(), postrend() --> this.showViews(true|false);\n   * Also it can be used in the app.preflight() and app.postflight() to affect all controllers.\n   * @param {boolean} bool - true or false\n   * @param {boolean} spinner - true or false, to show the spinner during transition time\n   */\n  showViews(bool, spinner) {\n    /*** without spinner - whole body will be hidden ***/\n    if (!spinner) {\n      if (bool) { document.body.style.visibility = 'visible'; }\n      else { document.body.style.visibility = 'hidden'; }\n      return;\n    }\n\n\n    /*** with spinner - only body child tags will be hidden***/\n    // hide/show all body child tag nodes\n    for (const childNode of document.body.childNodes) {\n      if (childNode.nodeType === 1) {\n        if (bool) { childNode.style.visibility = 'visible'; }\n        else { childNode.style.visibility = 'hidden'; }\n      }\n    }\n\n    // hide/show loading spinner\n    const divElem = document.createElement('div');\n    divElem.setAttribute('data-rg-spinner-showviews', '');\n    const styleScoped = `\n        <span>\n          <style scoped>\n            [data-rg-spinner-showviews]>span:after {\n              content: '';\n              display: block;\n              font-size: 13px;\n              width: 1em;\n              height: 1em;\n              margin-top: 55px;\n              margin-left: auto;\n              margin-right: auto;\n              animation: spinner 1500ms infinite linear;\n              border-radius: 0.5em;\n              box-shadow: #BEBEBE 1.5em 0 0 0, #BEBEBE 1.1em 1.1em 0 0, #BEBEBE 0 1.5em 0 0, #BEBEBE -1.1em 1.1em 0 0, #BEBEBE -1.5em 0 0 0, #BEBEBE -1.1em -1.1em 0 0, #BEBEBE 0 -1.5em 0 0, #BEBEBE 1.1em -1.1em 0 0;\n            }\n            @-webkit-keyframes spinner {\n              0% { transform: rotate(0deg);}\n              100% { transform: rotate(360deg); }\n            }\n            @-moz-keyframes spinner {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n            @-o-keyframes spinner {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n            @keyframes spinner {\n              0% { transform: rotate(0deg); }\n              100% { transform: rotate(360deg); }\n            }\n          </style>\n        </span>\n        `;\n\n    divElem.insertAdjacentHTML('beforeend', styleScoped);\n    if (bool) {\n      const foundDivElem = document.querySelector('[data-rg-spinner-showviews]');\n      document.body.removeChild(foundDivElem);\n    } else {\n      document.body.prepend(divElem);\n    }\n  }\n\n\n\n\n\n  /*************** HTML CONTENT FETCHERS *****************/\n  /**\n   * Fetch view from a cached file app/cache/views.json.\n   * @param {string} viewPath - view file path (relative to /view/ directory): 'pages/home/main.html'\n   * @param {string} cssSel - CSS selector to load part of the view file: 'div > p.bolded:nth-child(2)'\n   * @returns {object}\n   */\n  fetchCachedView(viewPath, cssSel) {\n    // convert HTML string to Document\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(window.regochWeber.viewsCached[viewPath], 'text/html');\n\n    // define nodes and string\n    let nodes; // array of DOM nodes (Node[])\n    let str; // HTML content as string (string)\n    if (!cssSel) {\n      nodes = /\\<title|\\<meta|\\<link\\<base/.test(window.regochWeber.viewsCached[viewPath]) ? doc.head.childNodes : doc.body.childNodes;\n      str = window.regochWeber.viewsCached[viewPath];\n    } else {\n      const elem = doc.querySelector(cssSel);\n      nodes = [elem];\n      str = !!elem ? elem.outerHTML : '';\n    }\n\n    return { nodes, str };\n  }\n\n\n  /**\n   * Fetch view by sending a HTTP request to the server.\n   * @param {string} viewPath - view file path (relative to /view/ directory): 'pages/home/main.html'\n   * @param {string} cssSel - CSS selector to load part of the view file: 'div > p.bolded:nth-child(2)'\n   * @returns {object}\n   */\n  async fetchRemoteView(viewPath, cssSel) {\n    const path = `/client/views/${viewPath}`; // /client/views/pages/home/main.html\n    const url = new URL(path, this.$baseURIhost).toString(); // resolve the URL\n    const answer = await this.$httpClient.askHTML(url, cssSel);\n    const content = answer.res.content;\n    if (answer.status !== 200 || !content) { throw new Error(`Status isn't 200 or content is empty for ${viewPath}`); }\n\n    const nodes = answer.res.content.nodes; // Node[]\n    const str = answer.res.content.str; // string\n\n    return { nodes, str };\n  }\n\n\n\n  /************ JS LOADERS *********/\n  /**\n   * Create <script> tags and execute js scripts.\n   * @param {string[]} urls - array of JS script URLs\n   * @param {number} waitMS - wait for miliseconds before loading process\n   */\n  async lazyJS(urls, waitMS = 0) {\n    if (!urls) { return; }\n    for (const url of urls) {\n      await new Promise(r => setTimeout(r, waitMS));\n      // check if SCRIPT already exists and if exists remove it\n      const elems = document.body.querySelectorAll(`script[src=\"${url}\"]`);\n      if (elems.length) { this.unlazyJS([url]); }\n\n      // add the SCRIPT tag\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = url;\n      script.defer = true;\n      script.setAttribute('data-rg-lazyjs', '');\n      document.body.appendChild(script);\n    }\n  }\n\n\n  /**\n   * Remove SCRIPT tag with data-rg-lazyjs attribute and the specific url.\n   * @param {string[] | undefined} urls - array of JS script URLs\n   */\n  unlazyJS(urls) {\n    if (!urls) { return; }\n    for (const url of urls) {\n      const elems = document.body.querySelectorAll(`script[src=\"${url}\"][data-rg-lazyjs]`);\n      for (const elem of elems) {\n        if (!!elem) { elem.remove(); }\n      }\n    }\n  }\n\n\n  /**\n   * Remove all SCRIPT tags with the data-rg-lazyjs attribute.\n   */\n  unlazyAllJS() {\n    const elems = document.querySelectorAll('script[data-rg-lazyjs]') || [];\n    for (const elem of elems) {\n      if (!!elem) { elem.remove(); }\n    }\n  }\n\n\n  /**\n   * Do not create <script> tags, just load js scripts.\n   * This can work only for local files due to CORS.\n   * @param {string[]} urls - array of JS script URLs\n   */\n  async loadJS(urls) {\n    if (!urls) { return; }\n    for (let url of urls) {\n      // correct the URL\n      url = url.trim();\n      if (!/^http/.test(url)) {\n        url = new URL(url, this.$baseURIhost).toString(); // resolve the URL\n      }\n\n      const jsContents = [];\n      const answer = await this.$httpClient.askJS(url);\n      jsContents.push(answer.res.content);\n      for (const jsContent of jsContents) { eval(jsContent); }\n    }\n  }\n\n\n  /**\n   * <script src=\"...\" data-rg-lazyjs>\n   * Parse the \"data-rg-lazyjs\" attribute. Reload all SCRIPT elements with data-rg-lazyjs attribute.\n   * Remove all SCRIPT tags with the data-rg-lazyjs attributes and immediatelly after reload them.\n   * @param {number} waitMS - wait for miliseconds before loading process\n   * @returns {Promise<void>}\n   */\n  async rgLazyjs(waitMS = 0) {\n    this._debug('rgLazyjs', '--------- rgLazyjs ------', 'navy', '#B6ECFF');\n\n    const attrName = 'data-rg-lazyjs';\n    const elems = document.querySelectorAll(`[${attrName}]`);\n\n    this._debug('rgLazyjs', `found elements:: ${elems.length}`, 'navy');\n    if (!elems.length) { return; }\n\n    const urls = []; // url in the src attribute\n    for (const elem of elems) {\n      const url = elem.getAttribute('src');\n      this._debug('rgLazyjs', `  src=\"${url}\"`, 'navy');\n      urls.push(url);\n    }\n\n    this.unlazyAllJS();\n    await this.lazyJS(urls, waitMS);\n  }\n\n\n\n\n  /************ CSS LOADERS *********/\n  /**\n   * Create <link rel=\"stylesheet\"> tags and load CSS.\n   * Usually use it in the loader() controller hook.\n   * @param {string[]} urls - array of CSS file URLs, ['/client/assets/css/common.css', '/client/assets/css/home.css']\n   */\n  loadCSS(urls) {\n    if (!urls) { return; }\n    for (const url of urls) {\n      // check if LINK tag already exists and if exists remove it\n      const elems = document.body.querySelectorAll(`link[href=\"${url}\"]`);\n      if (elems.length) { this.unloadCSS([url]); }\n\n      // create LINK tag\n      const linkCSS = document.createElement('link');\n      linkCSS.setAttribute('rel', 'stylesheet');\n      linkCSS.setAttribute('href', url);\n      linkCSS.defer = true;\n      document.head.appendChild(linkCSS);\n    }\n  }\n\n  /**\n   * Remove <link rel=\"stylesheet\"> tags and unload CSS.\n   * Usually use it in the loader() controller hook.\n   * @param {string[]} urls - array of CSS file URLs, ['/client/assets/css/common.css', '/client/assets/css/home.css'] or just ['/client/assets/css/'] to remove all folder files\n   */\n  unloadCSS(urls) {\n    if (!urls) { return; }\n    for (const url of urls) {\n      const elems = document.head.querySelectorAll(`link[rel=\"stylesheet\"][href=\"${url}\"]`);\n      for (const elem of elems) {\n        if (!!elem) { elem.remove(); }\n      }\n    }\n  }\n\n  /**\n   * Append <style data-rg-ref=\"#reference\"></style> tags in the <head>.\n   * Usually use it in the loader() controller hook.\n   * @param {string} cssRules - CSS rules, for example: div {font-weight: bold; color:red;}\n   * @param {string} ref - reference\n   */\n  addCSS(cssRules, ref) {\n    const style = document.createElement('style');\n    style.textContent = cssRules;\n    style.setAttribute('type', 'text/css');\n    style.setAttribute('data-rg-ref', ref);\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Remove <style data-rg-ref=\"#reference\"></style> tag.\n   * Usually use it in the destroy() controller hook.\n   * @param {string} ref - reference\n   */\n  delCSS(ref) {\n    const style = document.createElement(`style[data-rg-ref=\"${ref}\"]`);\n    if (!!style) { style.remove(); }\n  }\n\n\n\n\n  /*************** PAGE HEAD *************/\n  /**\n   * Set the text in the <title> tag.\n   * @param {string} title\n   */\n  setTitle(title) {\n    document.title = title;\n  }\n\n  /**\n   * Set the page description.\n   * @param {string} desc\n   */\n  setDescription(desc) {\n    const elem = document.head.querySelector('meta[name=\"description\"]');\n    if (!elem) { throw new Error('The meta[name=\"description\"] tag is not placed in the HTML file.'); }\n    elem.setAttribute('content', desc);\n  }\n\n  /**\n   * Set the page keywords.\n   * @param {string} kys - for example: 'regoch, app, database'\n   */\n  setKeywords(kys) {\n    const elem = document.head.querySelector('meta[name=\"keywords\"]');\n    if (!elem) { throw new Error('The meta[name=\"keywords\"] tag is not placed in the HTML file.'); }\n    elem.setAttribute('content', kys);\n  }\n\n\n  /**\n   * Set the document language.\n   * @param {string} langCode - 'en' | 'hr' | 'de' | ...\n   */\n  setLang(langCode) {\n    const elem = document.querySelector('html');\n    elem.setAttribute('lang', langCode);\n  }\n\n\n  /**\n   * Load the <head> tag content from the view file.\n   * @param {string} viewPath - view file path (relative to /view/ directory): 'pages/home/head.html'\n   * @param {string} dest - destination where to place the view: inner, prepend, append\n   */\n  async loadHead(viewPath, dest = 'inner') {\n    // get the <head> HTML element\n    const elem = document.querySelector('head');\n    this._debug('loadHead', `--------- loadHead -- ${viewPath} ---------`, '#8B0892', '#EDA1F1');\n    if (this._debug().loadView) { console.log('elem::', elem); }\n    if (!elem) { throw new Error(`Element HEAD not found.`); }\n    if (!viewPath) { throw new Error(`View path is not defined.`); }\n\n    // Get HTML content. First try from the cached JSON and if it doesn't exist then request from the server.\n    let nodes, str;\n    if (!!window.regochWeber.viewsCached[viewPath]) { // HTML content from the cached file /cache/views.json\n      const cnt = this.fetchCachedView(viewPath);\n      nodes = cnt.nodes;\n      str = cnt.str;\n      this._debug('loadHead', '--from cached JSON', '#8B0892');\n    } else { // HTML content by requesting the server\n      const cnt = await this.fetchRemoteView(viewPath);\n      nodes = cnt.nodes;\n      str = cnt.str;\n      this._debug('loadHead', '--from server', '#8B0892');\n    }\n\n    if (this._debug().loadHead) { console.log('nodes::', nodes); }\n    if (this._debug().loadHead) { console.log('str::', str); }\n\n\n    // remove previously generated elements, i.e. elements with the data-rg-headgen attribute\n    for (const genElem of document.querySelectorAll(`[data-rg-headgen`)) { genElem.remove(); }\n\n\n    // load content in the head\n    if (dest === 'inner') {\n      elem.innerHTML = str;\n\n    } else if (dest === 'prepend') {\n      const i = nodes.length;\n      for (let i = nodes.length - 1; i >= 0; i--) {\n        const nodeCloned = nodes[i].cloneNode(true);\n        if (nodeCloned.nodeType === 1) {\n          nodeCloned.setAttribute('data-rg-headgen', '');\n          elem.prepend(nodeCloned);\n        }\n      }\n\n    } else if (dest === 'append') {\n      for (const node of nodes) {\n        const nodeCloned = node.cloneNode(true);\n        if (nodeCloned.nodeType === 1) {\n          nodeCloned.setAttribute('data-rg-headgen', '');\n          elem.append(nodeCloned);\n        }\n      }\n\n    }\n\n    return { elem, str, nodes };\n  }\n\n\n\n\n\n}\n\n\n\n\nexport default View;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Terminology\n * =================================\n * route :string - defined route in the def() method - /room/subscribe/:room_name/:id\n * routeParsed.full :string - full route (start and end slashes removed) - 'room/subscribe/:room_name/:id'\n * routeParsed.segments :number - number the full route segments (with param parts) - 4\n * routeParsed.base :number - route part without params segments (start and end slashes removed) - 'room/subscribe'\n *\n * uri :string - current URI - /room/subscribe/sasa/123?x=123&y=abc&z=false\n * uriParsed.path :string - complete uri (start and end slashes removed) - '/room/subscribe/sasa/123'\n * uriParsed.segments :number - number of the uri segments - 4\n * uriParsed.queryString :string - uri part after question mark as string - 'x=123&y=abc&z=false'\n * uriParsed.queryObject :object - uri part parsed as object - {x: 123, y: 'abc', z: false}\n *\n * body :any - data sent along with uri as the transitional object - trx: {uri, body}\n *\n * func :Function - route function - a function which is executed when certain route is matched against the uri\n * trx :object - transitional object which can be changed in the route functions, required field is \"uri\" - {uri, body, uriParsed, routeParsed, params, query}\n *\n * Notice\n *-----------\n * Variables \"uri\" and \"body\" are analogous to HTTP POST request, for example:  POST /room/subscribe/sasa/123?key=999  {a: 'something})\n */\n\n\n\nclass RegochRouter {\n\n  /**\n   * @param {object} routerOpts - router initial options {debug:boolean}\n   */\n  constructor(routerOpts) {\n    this.routerOpts = routerOpts || {};\n    this.trx; // transitional object {uri:string, body:any, ...}\n    this.routeDefs = []; // route definitions [{route:string, routeParsed:object, funcs:Function[] }]\n  }\n\n\n  /**\n   * Set transitional object.\n   * @param {object} obj - {uri, body, ...}\n   * @returns {void}\n   */\n  set trx(obj) {\n    // required properties\n    if (!obj.uri) { throw new Error('The \"uri\" property is required.'); }\n\n    // \"uri\" and \"body\" as properties with constant value (can not be modified)\n    Object.defineProperty(obj, 'uri', {\n      value: obj.uri,\n      writable: false\n    });\n\n    Object.defineProperty(obj, 'body', {\n      value: obj.body,\n      writable: false\n    });\n\n    // parse uri\n    obj.uriParsed = this._uriParser(obj.uri);\n\n    this._trx = obj;\n  }\n\n\n  /**\n   * Get transitional object.\n   * @returns {object} - {uri, body, ...}\n   */\n  get trx() {\n    return this._trx;\n  }\n\n\n\n  /**\n   * Define route, routeParsed and corresponding functions.\n   * @param {string} route - /room/subscribe/:room_name\n   * @param {Function[]} funcs - route functions, middlewares\n   * @returns {Router}\n   */\n  when(route, ...funcs) {\n    this.routeDefs.push({\n      route,\n      routeParsed: this._routeParser(route),\n      funcs\n    });\n    return this;\n  }\n\n\n  /**\n   * Redirect from one route to another route.\n   * @param {string} fromRoute - new route\n   * @param {string} toRoute - destination route (where to redirect)\n   * @param {Function} cb - callback function executed during redirection process, it's a route middleware appended to toRoute middlewares\n   * @returns {Router}\n   */\n  redirect(fromRoute, toRoute, cb) {\n    const toRouteDef = this.routeDefs.find(routeDef => routeDef.route === toRoute); // {route, routeParsed, funcs}\n    const toFuncs = !!toRouteDef ? toRouteDef.funcs : [];\n    this.when(fromRoute, cb, ...toFuncs); // assign destination functions to the new route\n    return this;\n  }\n\n\n  /**\n   * Define special route <notfound>\n   * @param {Function[]} funcs - middlewares which will be executed when route is not matched aginst URI\n   * @returns {Router}\n   */\n  notfound(...funcs) {\n    this.when('<notfound>', ...funcs);\n    return this;\n  }\n\n\n\n  /**\n   * Define special route <do>\n   * @param {Function[]} funcs - middlewares which will be executed on every request, e.g. every exe()\n   * @returns {Router}\n   */\n  do(...funcs) {\n    this.when('<do>', ...funcs);\n    return this;\n  }\n\n\n\n\n  /**\n   * Find the matched route and execute its middlewares.\n   * @returns {Promise<object>}\n   */\n  async exe() {\n    const trx_cloned = { ...this.trx }; // clone trx in case that this.trx is changing to fast\n    const uriParsed = trx_cloned.uriParsed; // shop/register/john/23\n\n    /*** FIND ROUTE ***/\n    // found route definition\n    const routeDef_found = this.routeDefs.find(routeDef => { // {route, routeParsed, funcs}\n      const routeParsed = routeDef.routeParsed; // {full, segments, base}\n      return this._routeRegexMatchNoParams(routeParsed, uriParsed) || this._routeWithParamsMatch(routeParsed, uriParsed);\n    });\n\n    // not found route definition\n    const routeDef_notfound = this.routeDefs.find(routeDef => routeDef.route === '<notfound>');\n\n    // do route definition\n    const routeDef_do = this.routeDefs.find(routeDef => routeDef.route === '<do>');\n\n    /*** EXECUTE FOUND ROUTE FUNCTIONS */\n    if (!!routeDef_found) {\n      trx_cloned.routeParsed = routeDef_found.routeParsed;\n      trx_cloned.query = uriParsed.queryObject;\n      trx_cloned.params = !!trx_cloned.routeParsed ? this._getParams(routeDef_found.routeParsed.full, uriParsed.path) : {};\n\n      for (const func of routeDef_found.funcs) { await func(trx_cloned); }\n    } else if (!!routeDef_notfound) {\n      for (const func of routeDef_notfound.funcs) { await func(trx_cloned); }\n    }\n\n\n    if (!!routeDef_do && !!routeDef_do.funcs && !!routeDef_do.funcs.length) {\n      for (const func of routeDef_do.funcs) { await func(trx_cloned); }\n    }\n\n\n    return trx_cloned;\n  }\n\n\n\n\n\n  /*********** ROUTE MATCHES  ***********/\n\n  /**\n   * Route regular expression match against the uri. Parameters are not defined in the route e.g. there is no /: chars.\n   * For example:\n   *       (route) /ads/autos/bmw - (uri) /ads/autos/bmw -> true\n   *       (route) /ads/a.+s/bmw  - (uri) /ads/autos/bmw -> true\n   * @param {object} routeParsed - {full, segments, base}\n   * @param {object} uriParsed - {path, segments, queryString, queryObject}\n   * @returns {boolean}\n   */\n  _routeRegexMatchNoParams(routeParsed, uriParsed) {\n    const routeReg = new RegExp(`^${routeParsed.full}$`, 'i');\n    const tf1 = routeReg.test(uriParsed.path); // route must match uri\n    const tf2 = routeParsed.segments === uriParsed.segments; // route and uri must have same number of segments\n    const tf = tf1 && tf2;\n    if (this.routerOpts.debug) { console.log(`\\n_routeRegexMatchNoParams:: (route) ${routeParsed.full} - (uri) ${uriParsed.path} -> ${tf}`); }\n    return tf;\n  }\n\n\n  /**\n   * Route with parameters match against the uri.\n   * (route) /shop/register/:name/:age - (uri) /shop/register/john/23\n   * @param {object} routeParsed - {full, segments, base}\n   * @param {object} uriParsed - {path, segments, queryString, queryObject}\n   * @returns {boolean}\n   */\n  _routeWithParamsMatch(routeParsed, uriParsed) {\n    const routeReg = new RegExp(`^${routeParsed.base}\\/`, 'i');\n    const tf1 = routeReg.test(uriParsed.path); // route base must match uri\n    const tf2 = routeParsed.segments === uriParsed.segments; // route and uri must have same number of segments\n    const tf3 = /\\/\\:/.test(routeParsed.full); // route must have at least one /:\n    const tf = tf1 && tf2 && tf3;\n    if (this.routerOpts.debug) { console.log(`_routeWithParamsMatch:: (route) ${routeParsed.full} - (uri) ${uriParsed.path} -> ${tf}`); }\n    return tf;\n  }\n\n\n\n\n  /*********** HELPERS  ***********/\n\n  /**\n   * Removing slashes from the beginning and the end.\n   * /ads/autos/bmw/ --> ads/autos/bmw\n   * //ads/autos/bmw/// --> ads/autos/bmw\n   * @param {string} path - uri path or route\n   * @returns {string}\n   */\n  _removeSlashes(path) {\n    return path.trim().replace(/^\\/+/, '').replace(/\\/+$/, '');\n  }\n\n\n  /**\n   * Convert string into integer, float or boolean.\n   * @param {string} value\n   * @returns {string | number | boolean | object}\n   */\n  _stringTypeConvert(value) {\n    function isJSON(str) {\n      try { JSON.parse(str); }\n      catch (err) { return false; }\n      return true;\n    }\n\n    if (!!value && !isNaN(value) && value.indexOf('.') === -1) { // convert string into integer (12)\n      value = parseInt(value, 10);\n    } else if (!!value && !isNaN(value) && value.indexOf('.') !== -1) { // convert string into float (12.35)\n      value = parseFloat(value);\n    } else if (value === 'true' || value === 'false') { // convert string into boolean (true)\n      value = JSON.parse(value);\n    } else if (isJSON(value)) {\n      value = JSON.parse(value);\n    }\n\n    return value;\n  }\n\n\n\n  /**\n   * Create query object from query string.\n   * @param  {string} queryString - x=abc&y=123&z=true\n   * @return {object}             - {x: 'abc', y: 123, z: true}\n   */\n  _toQueryObject(queryString) {\n    const queryArr = queryString.split('&');\n    const queryObject = {};\n\n    let eqParts, property, value;\n    queryArr.forEach(elem => {\n      eqParts = elem.split('='); // equotion parts\n      property = eqParts[0];\n      value = eqParts[1];\n\n      value = this._stringTypeConvert(value); // t y p e   c o n v e r s i o n\n\n      queryObject[property] = value;\n    });\n\n    return queryObject;\n  }\n\n\n\n  /**\n   * URI parser\n   * @param  {string} uri - /shop/register/john/23?x=abc&y=123&z=true  (uri === trx.uri)\n   * @returns {path:string, queryString:string, queryObject:object} - {path: 'shop/register/john/23', queryString: 'x=abc&y=123&z=true', queryObject: {x: 'abc', y: 123, z: true}}\n   */\n  _uriParser(uri) {\n    const uriDivided = uri.split('?');\n\n    const path = this._removeSlashes(uriDivided[0]); // /shop/register/john/23 -> shop/register/john/23\n    const segments = path.split('/').length;\n    const queryString = uriDivided[1];\n    const queryObject = !!queryString ? this._toQueryObject(queryString) : {};\n\n    const uriParsed = { path, segments, queryString, queryObject };\n    return uriParsed;\n  }\n\n\n  /**\n   * Route parser.\n   * Converts route string into the parsed object {full, segments, parser} which is used for matching against the URI.\n   * @param  {string} route - /shop/register/:name/:age/\n   * @returns {full:string, segments:number, base:string} - {full: 'shop/register/:name/:age', segments: 4, base: 'shop/register'}\n   */\n  _routeParser(route) {\n    const full = this._removeSlashes(route);\n    const segments = full.split('/').length;\n    const base = full.replace(/\\/\\:.+/, ''); // shop/register/:name/:age --> shop/register\n\n    const routeParsed = { full, segments, base };\n    return routeParsed;\n  }\n\n\n\n  /**\n   * Create parameters object.\n   * For example if route is /register/:name/:age AND uri is /register/john/23 then params is {name: 'john', age: 23}\n   * @param  {string} routeParsedFull - routeParsed.full -- shop/register/:name/:age\n   * @param  {string} uriParsedPath  - uriParsed.path -- shop/register/john/23\n   * @returns {object}\n   */\n  _getParams(routeParsedFull, uriParsedPath) {\n    const routeParts = routeParsedFull.split('/'); // ['shop', 'register', ':name', ':age']\n    const uriParts = uriParsedPath.split('/'); // ['shop', 'register', 'john', 23]\n\n    const params = {};\n\n    routeParts.forEach((routePart, index) => {\n      if (/\\:/.test(routePart)) {\n        const property = routePart.replace(/^\\:/, ''); // remove :\n\n        let value = uriParts[index];\n        value = this._stringTypeConvert(value); // t y p e   c o n v e r s i o n\n\n        params[property] = value;\n      }\n    });\n\n    return params;\n  }\n\n\n\n\n\n}\n\n\n\n\n\nexport default RegochRouter;\n\n","import RegochRouter from './RegochRouter.js';\n\n\nclass Router extends RegochRouter {\n\n  constructor(debugRouter, debug) {\n    super({ debug });\n    this.debugRouter = debugRouter;\n  }\n\n\n  /**\n   * Define the routes\n   * @param {string} route - route, for example: '/page1.html'\n   * @param {object} ctrl - route controller instance\n   * @param {{authGuards:string[]}} routeOpts - route options: {authGuards: ['autoLogin', 'isLogged', 'hasRole']}\n   * @returns {void}\n   */\n  _when(route, ctrl, routeOpts = {}) {\n    const authGuards = routeOpts.authGuards || [];\n\n    // prechecks\n    if (!route && !!ctrl) { throw new Error(`Route is not defined for \"${ctrl.constructor.name}\" controller.`); }\n    if (!!route && !ctrl) { throw new Error(`Controller is not defined for route \"${route}\".`); }\n    if (/autoLogin|isLogged|hasRole/.test(authGuards.join()) && !ctrl.$auth) { throw new Error(`Auth guards (autoLogin, isLogged, hasRole) are used but Auth is not injected in the controller ${ctrl.constructor.name}. Use App::controllerAuth().`); }\n\n    const assign_ctrl = trx => { trx.ctrl = ctrl; }; // add ctrl in trx so that controller it can be used in preflight and postflight\n\n    const guards = [];\n    if (authGuards.length && ctrl.$auth) {\n      const autoLogin = ctrl.$auth.autoLogin.bind(ctrl.$auth);\n      const isLogged = ctrl.$auth.isLogged.bind(ctrl.$auth);\n      const hasRole = ctrl.$auth.hasRole.bind(ctrl.$auth);\n      if (authGuards.indexOf('autoLogin') !== -1) { guards.push(autoLogin); }\n      if (authGuards.indexOf('isLogged') !== -1) { guards.push(isLogged); }\n      if (authGuards.indexOf('hasRole') !== -1) { guards.push(hasRole); }\n    }\n\n    const preflight = !!ctrl.$preflight ? ctrl.$preflight : []; // array of preflight functions, will be executed on every route before the controller's loader()\n    const processing = ctrl.processing.bind(ctrl);\n    const postflight = !!ctrl.$postflight ? ctrl.$postflight : []; // array of postflight functions, will be executed on every route ater the controller's postrend()\n\n\n    this.when(route, assign_ctrl, ...guards, ...preflight, processing, ...postflight);\n  }\n\n\n\n  /**\n   * Define 404 not found route\n   * @param {object} ctrl - route controller instance\n   * @returns {void}\n   */\n  _notfound(ctrl) {\n    const processing = ctrl.processing.bind(ctrl);\n    this.notfound(processing);\n  }\n\n\n\n  /**\n   * Define functions which will be executed on every route.\n   * @param {Function[]} funcs - function which will be executed on every request, e.g. every exe()\n   * @returns {Router}\n   */\n  _do(...funcs) {\n    this.do(...funcs);\n  }\n\n\n\n  /**\n   * Redirect from one route to another route.\n   * @param {string} fromRoute - new route\n   * @param {string} toRoute - destination route (where to redirect)\n   * @returns {Router}\n   */\n  _redirect(fromRoute, toRoute) {\n    const cb = () => {\n      window.history.pushState(null, '', toRoute); // change URL in the address bar\n    };\n    this.redirect(fromRoute, toRoute, cb);\n  }\n\n\n\n  /**\n   * Match routes against current browser URI and execute matched route.\n   * @param {Event} pevent - popstate or pushstate event\n   * @returns {void}\n   */\n  async _exe(pevent) {\n    try {\n      const start = new Date();\n      let uri = window.location.pathname + window.location.search; // the current uri -  The uri is path + query string, without hash, for example: /page1.html?q=12\n      uri = decodeURI(uri); // /sh/po%C5%A1ta?field=title --> /sh/pošta?field=title\n\n      if (this.debugRouter) { console.log(`%c --------- router exe start --> ${uri} ------`, 'color:#680C72; background:#E59FED'); }\n\n      // execute matched route middlewares\n      this.trx = { uri, pevent };\n      const trx = await this.exe();\n\n      const end = new Date();\n      trx.elapsedTime = (end - start) + ' ms'; // in miliseconds\n\n      if (this.debugRouter) {\n        console.log('Router trx::', trx);\n        console.log(`%c --------- router exe end --> elapsedTime: ${this.trx.elapsedTime} ------`, 'color:#680C72; background:#E59FED');\n      }\n\n    } catch (err) {\n      if (/AuthWarn::/.test(err.message)) { console.log(`%c${err.message}`, `color:#FF6500; background:#FFFEEE;`); }\n      else { console.error(err); }\n    }\n  }\n\n\n\n}\n\n\n\n\n\nexport default Router;\n","class HTTPClient {\n\n  /**\n   * @param {Object} opts - HTTP Client options {encodeURI, timeout, retry, retryDelay, maxRedirects, headers}\n   */\n  constructor(opts) {\n    this.url;\n    this.protocol = 'http:';\n    this.hostname = '';\n    this.port = 80;\n    this.pathname = '/';\n    this.queryString = '';\n\n    if (!opts) {\n      this.opts = {\n        encodeURI: false,\n        timeout: 8000,\n        responseType: '', // 'blob' for file download (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType)\n        retry: 3,\n        retryDelay: 5500,\n        maxRedirects: 3,\n        headers: {\n          'authorization': '',\n          'accept': '*/*', // 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\n          'content-type': 'text/html; charset=UTF-8'\n        }\n      };\n    } else {\n      this.opts = opts;\n    }\n\n    // initial values for timeout, responseType and req_headers\n    this.timeout = this.opts.timeout;\n    this.responseType = this.opts.responseType;\n    this.req_headers = { ...this.opts.headers };\n\n    // init the xhr\n    this.xhr = new XMLHttpRequest();\n\n    // set interceptor\n    this.interceptor;\n  }\n\n\n\n\n  /********** REQUESTS *********/\n\n  /**\n   * Sending one HTTP request to HTTP server.\n   *  - 301 redirections are not handled.\n   *  - retries are not handled\n   * @param {string} url - https://www.example.com/something?q=15\n   * @param {string} method - GET, POST, PUT, DELETE, PATCH\n   * @param {any} body_obj - http body payload\n   * @returns {Promise<answer>}\n   */\n  async askOnce(url, method = 'GET', body_obj) {\n\n    // answer (response object)\n    const answer = {\n      requestURL: url,\n      requestMethod: method,\n      status: 0,\n      statusMessage: '',\n      https: false,\n      req: {\n        headers: this.req_headers,\n        payload: undefined\n      },\n      res: {\n        headers: undefined,\n        content: undefined\n      },\n      time: {\n        req: this._getTime(),\n        res: undefined,\n        duration: undefined\n      }\n    };\n\n\n    // check and correct URL\n    try {\n      url = this._parseUrl(url);\n      answer.requestURL = url;\n      answer.https = /^https/.test(this.protocol);\n    } catch (err) {\n      // if URL is not properly defined\n      const ans = { ...answer }; // clone object to prevent overwrite of object properies once promise is resolved\n      ans.status = 400; // client error - Bad Request\n      ans.statusMessage = err.message || 'Bad Request';\n      ans.time.res = this._getTime();\n      ans.time.duration = this._getTimeDiff(ans.time.req, ans.time.res);\n\n      return ans; // send answer and stop further execution\n    }\n\n    /*** 0) intercept the request ***/\n    if (!!this.interceptor) { await this.interceptor(); }\n\n\n    /*** 1) init HTTP request ***/\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open\n    this.xhr.open(method, url, true, null, null);\n\n\n    // set the xhr options (works only after the xhr is opened)\n    this._xhr_timeout(this.timeout);\n    this._xhr_responseType(this.responseType);\n    this._xhr_requestHeaders(this.req_headers);\n\n\n    /*** 2) add body to HTTP request ***/\n    if (!!body_obj && !/GET/i.test(method)) {\n      answer.req.payload = body_obj;\n\n      const contentType = this.req_headers['content-type'] || '';\n      let body2send;\n      if (/application\\/json/.test(contentType)) { body2send = JSON.stringify(body_obj); }\n      else { body2send = body_obj; }\n\n      /*** 3) send request to server (with body) ***/\n      this.xhr.send(body2send);\n\n    } else {\n      /*** 3) send request to server (without body) ***/\n      this.xhr.send();\n    }\n\n\n\n    /** 4) wait for response */\n    const promise = new Promise((resolve, reject) => {\n\n      this.xhr.onload = res => {\n        // format answer\n        const ans = { ...answer }; // clone object to prevent overwrite of object properies once promise is resolved\n        ans.status = this.xhr.status; // 2xx -ok response, 4xx -client error (bad request), 5xx -server error\n        ans.statusMessage = this.xhr.statusText;\n        ans.res.headers = this.getResHeaders();\n        ans.res.content = res.target.response;\n        ans.time.res = this._getTime();\n        ans.time.duration = this._getTimeDiff(ans.time.req, ans.time.res);\n\n        resolve(ans);\n      };\n\n\n      this.xhr.onerror = error => {\n        this.kill();\n        const err = this._formatError(error, url);\n\n        // format answer\n        const ans = { ...answer }; // clone object to prevent overwrite of object properies once promise is resolved\n        ans.status = err.status;\n        ans.statusMessage = err.message;\n        ans.time.res = this._getTime();\n        ans.time.duration = this._getTimeDiff(ans.time.req, ans.time.res);\n\n        // do not resolve if it's already resolved by timeout\n        resolve(ans);\n      };\n\n\n      this.xhr.ontimeout = () => {\n        this.kill();\n\n        // format answer\n        const ans = { ...answer }; // clone object to prevent overwrite of object properies once promise is resolved\n        ans.status = 408; // 408 - timeout\n        ans.statusMessage = `Request aborted due to timeout (${this.opts.timeout} ms) ${url} `;\n        ans.time.res = this._getTime();\n        ans.time.duration = this._getTimeDiff(ans.time.req, ans.time.res);\n\n        resolve(ans);\n      };\n\n    });\n\n    return promise;\n  }\n\n\n\n  /**\n   * Sending HTTP request to HTTP server.\n   *  - 301 redirections are handled.\n   *  - retries are handled\n   * @param {String} url - https://www.example.com/contact\n   * @param {String} method - GET, POST, PUT, DELETE, PATCH\n   * @param {Object} body_obj - http body\n   * @returns {Promise<answer>}\n   */\n  async ask(url, method = 'GET', body_obj) {\n\n    let answer = await this.askOnce(url, method, body_obj);\n    const answers = [answer];\n\n\n    /*** a) HANDLE 3XX REDIRECTS */\n    let redirectCounter = 1;\n\n    while (!!answer && /^3\\d{2}/.test(answer.status) && redirectCounter <= this.opts.maxRedirects) { // 300, 301, 302, ...\n\n      const url_new = new URL(url, answer.res.headers.location); // redirected URL is in 'location' header\n      console.log(`#${redirectCounter} redirection ${answer.status} from ${this.url} to ${url_new}`);\n\n      answer = await this.askOnce(url_new, method, body_obj); // repeat request with new url\n      answers.push(answer);\n\n      redirectCounter++;\n    }\n\n\n    /*** b) HANDLE RETRIES when status = 408 timeout */\n    let retryCounter = 1;\n\n    while (answer.status === 408 && retryCounter <= this.opts.retry) {\n      console.log(`#${retryCounter} retry due to timeout (${this.opts.timeout}) on ${url}`);\n      await new Promise(resolve => setTimeout(resolve, this.opts.retryDelay)); // delay before retrial\n\n      answer = await this.askOnce(url, method, body_obj);\n      answers.push(answer);\n\n      retryCounter++;\n    }\n\n\n    return answers;\n  }\n\n\n\n  /**\n   * Fetch the JSON. Redirections and retries are not handled.\n   * @param {string} url - https://api.example.com/someurl\n   * @param {string} method - GET, POST, PUT, DELETE, PATCH\n   * @param {object|string} body - http body as Object or String type\n   * @returns {Promise<answer>}\n   */\n  async askJSON(url, method = 'GET', body) {\n\n    // convert body string to object\n    let body_obj = body;\n    if (!!body && typeof body === 'string') {\n      try {\n        body_obj = JSON.parse(body);\n      } catch (err) {\n        throw new Error('Body string is not valid JSON.');\n      }\n    }\n\n    // JSON request headers\n    this.setReqHeaders({\n      'content-type': 'application/json; charset=utf-8',\n      'accept': 'application/json'\n    });\n\n    const answer = await this.askOnce(url, method, body_obj);\n\n    // convert content string to object\n    if (!!answer.res.content) {\n      try {\n        answer.res.content = JSON.parse(answer.res.content);\n      } catch (err) {\n        throw new Error('Response content is not valid JSON.');\n      }\n    }\n\n    return answer;\n  }\n\n\n\n  /**\n   * Get the HTML file content or part of it filtered by the css selector.\n   * NOTE: The answer.res.content contains a list of nodes and the HTML string  {Node[], string}.\n   * @param {string} url - http://example.com/page.html\n   * @param {string} cssSel - css selector: div>p.alert\n   * @returns {Promise<answer>}\n   */\n  async askHTML(url, cssSel) {\n    const answer = await this.askOnce(url);\n\n    // convert HTML string to Document\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(answer.res.content, 'text/html');\n\n    // define nodes and string\n    let nodes; // array of DOM nodes https://developer.mozilla.org/en-US/docs/Web/API/Node (Node[])\n    let str; // HTML content as string (string)\n    if (!cssSel) {\n      nodes = doc.body.childNodes;\n      str = answer.res.content;\n    } else {\n      const elem = doc.querySelector(cssSel);\n      nodes = [elem];\n      str = !!elem ? elem.outerHTML : '';\n    }\n\n    answer.res.content = { nodes, str };\n    return answer;\n  }\n\n\n\n  /**\n   * Get the content of the Javascript file.\n   * @param {string} url - https://api.example.com/someurl\n   * @returns {Promise<answer>}\n   */\n  async askJS(url) {\n    this.setReqHeaders({\n      'content-type': 'application/javascript; charset=utf-8',\n      'accept': 'application/javascript'\n    });\n    const answer = await this.askOnce(url, 'GET');\n    answer.res.content = answer.res.content;\n    return answer;\n  }\n\n\n\n  /**\n   * Send POST request where body is new FormData() object.\n   * For example (frontend code):\n   * // create from data\n   * const formData = new FormData();\n   * formData.append('db_id', db_id);\n   * formData.append('coll_name', coll_name);\n   * formData.append('csv_file', csv_file);\n   * @param {string} url - https://api.example.com/someurl\n   * @param {FormData} formData - the FormData instance\n   * @returns {Promise<answer>}\n   */\n  async sendFormData(url, formData) {\n    // content-type should be removed for multipart/form-data as defined at https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\n    this.setReqHeaders({\n      'content-type': `multipart/form-data`,\n      'accept': '*/*'\n    });\n    this.delReqHeaders(['content-type']);\n\n    const answer = await this.askOnce(url, 'POST', formData);\n\n    // convert content string to object\n    if (!!answer.res.content) {\n      try {\n        answer.res.content = JSON.parse(answer.res.content);\n      } catch (err) {\n        console.log('WARNING: Response content is not JSON.');\n      }\n    }\n\n    return answer;\n  }\n\n\n  /**\n   * Convert JS Object to FormData and prepare it for sendFormData()\n   * @param {object} formObj - object which needs to be converted\n   * @returns {FormData}\n   */\n  object2formdata(formObj) {\n    const formData = new FormData();\n    for (const [key, val] of Object.entries(formObj)) { formData.set(key, val); }\n    return formData;\n  }\n\n\n\n  /** TODO\n   * Send HTML Form fields. Custom boundary for multipart/form-data .\n   * @param {string} url - https://api.example.com/someurl\n   * @param {FormData} formData - the FormData instance\n   * @param {string} contentType - request header content-type value, which can be application/x-www-form-urlencoded or multipart/form-data (for files) or text/plain (Forms with mailto:)\n   * @returns {Promise<answer>}\n   */\n  async sendForm(url, formData, contentType = 'application/x-www-form-urlencoded') {\n    // define boundary\n    let boundary = 'RegochWebHttpClient';\n    boundary += Math.floor(Math.random() * 32768);\n    boundary += Math.floor(Math.random() * 32768);\n    boundary += Math.floor(Math.random() * 32768);\n    console.log('boundary::', boundary);\n\n    const body = `--${boundary}\\r\\nContent-Disposition: form-data; name=\"db_id\"\\r\\n\\r\\n12345\\r\\n--${boundary}--`;\n    console.log('body::', body);\n\n    const answer = await this.askOnce(url, 'POST', formData);\n    return answer;\n  }\n\n\n\n  /**\n   * Stop the sent request.\n   * @returns {void}\n   */\n  kill() {\n    this.xhr.abort();\n  }\n\n\n  /**\n   * Set the interceptor function which will be executed every time before the HTTP request is sent.\n   * @param {Function} interceptor - callback function, for example (httpClient) => { httpClient.setReqHeader('Authorization', 'JWT aswas); }\n   * @returns {void}\n   */\n  setInterceptor(interceptor) {\n    this.interceptor = interceptor.bind(this);\n  }\n\n\n\n\n\n  /********** HEADERS *********/\n\n  /**\n   * Change request header object. The headerObj will be appended to previously defined this.req_headers and headers with the same name will be overwritten.\n   * @param {Object} headerObj - {'authorization', 'user-agent', accept, 'cache-control', 'host', 'accept-encoding', 'connection'}\n   * @returns {void}\n   */\n  setReqHeaders(headerObj) {\n    Object.keys(headerObj).forEach(prop => {\n      const headerName = prop;\n      const headerValue = headerObj[prop];\n      this.setReqHeader(headerName, headerValue);\n    });\n  }\n\n  /**\n   * Set (add/update) request header.\n   * Previously defined header will be overwritten.\n   * @param {String} headerName - 'content-type'\n   * @param {String} headerValue - 'text/html; charset=UTF-8'\n   * @returns {void}\n   */\n  setReqHeader(headerName, headerValue) {\n    headerName = headerName.toLowerCase();\n    this.req_headers[headerName] = headerValue;\n  }\n\n  /**\n   * Delete multiple request headers.\n   * @param {Array} headerNames - array of header names, for example: ['content-type', 'accept']\n   * @returns {void}\n   */\n  delReqHeaders(headerNames) {\n    headerNames.forEach(headerName => {\n      delete this.req_headers[headerName];\n    });\n  }\n\n  /**\n   * Get request headers\n   * @returns {object}\n   */\n  getReqHeaders() {\n    return this.req_headers;\n  }\n\n\n  /**\n   * Get response HTTP headers.\n   * @returns {object}\n   */\n  getResHeaders() {\n    const headersStr = this.xhr.getAllResponseHeaders();\n    const headersArr = headersStr.split('\\n');\n    const headersObj = {};\n    headersArr.forEach(headerFull => {\n      const splited = headerFull.split(':');\n      const prop = splited[0];\n      if (prop) {\n        const val = splited[1].trim();\n        headersObj[prop] = val;\n      }\n    });\n    return headersObj;\n  }\n\n\n\n\n  /********** PRIVATES *********/\n\n  /**\n   * Parse url.\n   * @param {String} url - http://www.adsuu.com/some/thing.php?x=2&y=3\n   */\n  _parseUrl(url) {\n    url = this._correctUrl(url);\n    const urlObj = new URL(url);\n    this.url = url;\n    this.protocol = urlObj.protocol;\n    this.hostname = urlObj.hostname;\n    this.port = urlObj.port;\n    this.pathname = urlObj.pathname;\n    this.queryString = urlObj.search;\n\n    // debug\n    /*\n    console.log('this.url:: ', this.url); // http://localhost:8001/www/products?category=databases\n    console.log('this.protocol:: ', this.protocol); // http:\n    console.log('this.hostname:: ', this.hostname); // localhost\n    console.log('this.port:: ', this.port); // 8001\n    console.log('this.pathname:: ', this.pathname); // /www/products\n    console.log('this.queryString:: ', this.queryString); // ?category=databases\n    */\n\n    return url;\n  }\n\n\n  /**\n   * URL corrections\n   */\n  _correctUrl(url) {\n    if (!url) { throw new Error('URL is not defined'); }\n\n    // 1. trim from left and right\n    url = url.trim();\n\n    // 2. add protocol\n    if (!/^https?:\\/\\//.test(url)) {\n      url = 'http://' + url;\n    }\n\n    // 3. remove multiple empty spaces and insert %20\n    if (this.opts.encodeURI) {\n      url = encodeURI(url);\n    } else {\n      url = url.replace(/\\s+/g, ' ');\n      url = url.replace(/ /g, '%20');\n    }\n\n    return url;\n  }\n\n\n  /**\n   * Beautify error messages.\n   * @param {Error} error - original error\n   * @return formatted error\n   */\n  _formatError(error, url) {\n    // console.log('_formatError::', error, url);\n    const err = new Error(error);\n\n\n    // reformatting NodeJS errors\n    if (error.target.status === 0) {\n      err.status = 0;\n      err.message = `Status:0 Bad Request ${url}`;\n    } else {\n      err.status = error.status || 400;\n      err.message = error.message;\n    }\n\n    err.original = error;\n\n    return err; // formatted error is returned\n  }\n\n\n  /**\n   * Get current date/time\n   */\n  _getTime() {\n    const d = new Date();\n    return d.toISOString();\n  }\n\n\n  /**\n   * Get time difference in seconds\n   */\n  _getTimeDiff(start, end) {\n    const ds = new Date(start);\n    const de = new Date(end);\n    return (de.getTime() - ds.getTime()) / 1000;\n  }\n\n\n\n  /********** PRIVATE XHR OPTIONS *********/\n  /**\n   * Modify request headers. This is the headers sent to the server.\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n   * To change it use header methods.\n   * @param {object} headers - headers object: { 'content-type': 'text/html', accept: 'application/json' }\n   * @returns {void}\n   */\n  _xhr_requestHeaders(headers) {\n    Object.keys(headers).forEach(prop => this.xhr.setRequestHeader(prop.toLowerCase(), headers[prop]));\n  }\n\n  /**\n   * Modify request timeout in miliseconds. This is the time for which will xhr wait for response from the server.\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout\n   * To change it use: httpClient.timeout = 120000;\n   * @param {number} ms - the timeout period\n   * @returns {void}\n   */\n  _xhr_timeout(ms) {\n    this.xhr.timeout = +ms || 0; // 0 means the request will never be timeout\n  }\n\n  /**\n   * Modify the response type. This is the reponse tye which client expects from the server. For example 'blob' if client waits for file download.\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\n   * To change it use: httpClient.responseType = 'blob';\n   * @param {string} type - text, arraybuffer, blob, document, json, ms-stream\n   * @returns {void}\n   */\n  _xhr_responseType(type) {\n    this.xhr.responseType = type || 'text';\n  }\n\n\n\n}\n\n\nexport default HTTPClient;\n","/**\n * System Default MVC Debug Options\n */\nexport default {\n  // general\n  warnings: false,\n\n  // Router\n  router: false,\n  regochRouter: false,\n\n  // Controller.js\n  render: false,\n  navig: false,\n\n  // View.js\n  rgInc: false,\n  loadView: false,\n  emptyView: false,\n  loadHead: false,\n  rgLazyjs: false,\n\n  // DataRg.js\n  rgFor: false,\n  rgRepeat: false,\n  rgPrint: false,\n\n  rgIf: false,\n  rgSpinner: false,\n  rgSwitch: false,\n  rgDisabled: false,\n  rgValue: false,\n  rgChecked: false,\n  rgClass: false,\n  rgStyle: false,\n  rgSrc: false,\n  rgAttr: false,\n  rgElem: false,\n  rgEcho: false,\n\n  // DataRgListeners.js\n  rgKILL: false,\n  rgHref: false,\n  rgClick: false,\n  rgKeyup: false,\n  rgChange: false,\n  rgEvt: false,\n  rgSet: false,\n  rgModel: false\n};\n","import Router from './router/Router.js';\nimport navig from './lib/navig.js';\nimport HTTPClient from './lib/HTTPClient.js';\nimport debugOpts from './conf/$debugOpts.js';\n\nwindow.regochWeber = {}; // init global variable\n\n\n\nclass App {\n\n  constructor() {\n    this.ctrls = {}; // { ctrlName1: {}, ctrlName2: {} }\n    this.$debugOpts = debugOpts; // object with the debug parameters -- {rgFor: true, rgIf: false}\n  }\n\n  /*============================== CONTROLLERS ==============================*/\n  /**\n   * Create controller instances and inject into the app.ctrls.\n   * @param  {Class[]} Ctrls - array of controller classes\n   * @returns {App}\n   */\n  controllers(Ctrls) {\n    for (const Ctrl of Ctrls) {\n      const ctrl = new Ctrl(this);\n      this.ctrls[Ctrl.name] = ctrl;\n    }\n    this._httpClient(); // define ctrl.$httpClient and ctrl.$baseURIhost\n    return this;\n  }\n\n\n  /**\n   * Define controller property/value. Sometimes it's useful that all controllers have same property with the same value.\n   * @param {string} name - controller property name\n   * @param {any} val - value\n   * @returns\n   */\n  _controllerProp(name, val) {\n    const controllersCount = Object.keys(this.ctrls).length;\n    if (controllersCount === 0) { throw new Error(`The controller property \"${name}\" should be defined after the method controllers().`); }\n    for (const ctrlName of Object.keys(this.ctrls)) { this.ctrls[ctrlName][name] = val; }\n    return this;\n  }\n\n\n  /**\n   * Set the $httpClient and $baseURIhost property in all controllers.\n   * The $httpClient is the default controller's HTTP client. It can be invoked with this.$httpClient in the controller.\n   * The $httpClient is used in View.js.\n   * For methods see lib/HttpClient.\n   * @returns {App}\n   */\n  _httpClient() {\n    const opts = {\n      encodeURI: true,\n      timeout: 21000,\n      retry: 0,\n      retryDelay: 1300,\n      maxRedirects: 0,\n      headers: {\n        'authorization': '',\n        'accept': '*/*', // 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\n        'content-type': 'text/html; charset=UTF-8'\n      }\n    };\n    const httpClient = new HTTPClient(opts);\n    this._controllerProp('$httpClient', httpClient);\n\n    const baseURIhost = `${window.location.protocol}//${window.location.host}`; // http://localhost:4400\n    this._controllerProp('$baseURIhost', baseURIhost);\n\n    return this;\n  }\n\n\n  /**\n   * Set the subproperty of the controller's $fridge property in all controllers.\n   * The $fridge object will be preserved during controller processing execution. Other controller's properties will be deleted.\n   * @param {string} name - $fridge property name\n   * @param {any} val - value\n   * @returns {App}\n   */\n  fridge(name, val) {\n    const controllersCount = Object.keys(this.ctrls).length;\n    if (controllersCount === 0) { throw new Error(`The $fridge property \"${name}\" should be defined after the method controllers().`); }\n    for (const ctrlName of Object.keys(this.ctrls)) { this.ctrls[ctrlName]['$fridge'][name] = val; }\n    return this;\n  }\n\n\n  /**\n   * Inject the auth library into the all controllers and use it as this.$auth in the controller.\n   * Useful in apps where authentication guards are required in all routes, for example when building a web panel.\n   * @param {Auth} auth - Auth class instance\n   * @returns {App}\n   */\n  auth(auth) {\n    this._controllerProp('$auth', auth);\n\n    // bindings because of this in Auth:login, logout, getLoggedUserInfo, etc methods,\n    // so the methods can be used in HTML, for example: data-rg-click=\"$auth.logout()\"\n    for (const ctrlName of Object.keys(this.ctrls)) {\n      const $auth = this.ctrls[ctrlName]['$auth'];\n      $auth.login = $auth.login.bind($auth);\n      $auth.logout = $auth.logout.bind($auth);\n      $auth.getLoggedUserInfo = $auth.getLoggedUserInfo.bind($auth);\n      $auth.setLoggedUserInfo = $auth.setLoggedUserInfo.bind($auth);\n      $auth.getJWTtoken = $auth.getJWTtoken.bind($auth);\n    }\n\n    return this;\n  }\n\n\n  /**\n   * Define preflight functions which will be executed on every route, before the controller processing() i.e. before loader().\n   * Never define $model in the preflight function because it will triger render() before loader().\n   * Define it before the routes() method.\n   * @param {Function[]} funcs - array of preflight functions (app, trx) => { ... }\n   * @returns {App}\n   */\n  preflight(...funcs) {\n    this._controllerProp('$preflight', funcs);\n    return this;\n  }\n\n\n  /**\n   * Define postflight functions which will be executed on every route, after the controller processing(), i.e. after the postrend().\n   * Here the $model can be defined (what wil trigger the render()).\n   * Define it before the routes() method.\n   * @param {Function[]} funcs - array of preflight functions (app, trx) => { ... }\n   * @returns {App}\n   */\n  postflight(...funcs) {\n    this._controllerProp('$postflight', funcs);\n    return this;\n  }\n\n\n  /**\n   * Define routes\n   * @param {string[][]} routesCnf\n   * @returns {App}\n   */\n  routes(routesCnf) {\n    const router = new Router(this.$debugOpts.router, this.$debugOpts.regochRouter);\n\n    for (const routeCnf of routesCnf) {\n      if (!routeCnf || (!!routeCnf && !Array.isArray(routeCnf)) || (!!routeCnf && !routeCnf.length)) { throw new Error(`Invalid route definition ${routeCnf}`); }\n\n      const cmd = routeCnf[0]; // 'when', 'notfound', 'do', 'redirect'\n\n      if (cmd === 'when') {\n        const route = routeCnf[1]; // '/page1'\n        const ctrlName = routeCnf[2]; // 'Page1Ctrl'\n        const routeOpts = routeCnf[3]; // {authGuards: ['autoLogin', 'isLogged', 'hasRole']}\n        if (!this.ctrls[ctrlName]) { throw new Error(`Controller \"${ctrlName}\" is not defined or not injected in the App.`); }\n        const ctrl = this.ctrls[ctrlName];\n        router._when(route, ctrl, routeOpts);\n\n      } else if (cmd === 'notfound') {\n        const ctrlName = routeCnf[1]; // 'NotfoundCtrl'\n        if (!this.ctrls[ctrlName]) { throw new Error(`Controller \"${ctrlName}\" is not defined or not injected in the App.`); }\n        const ctrl = this.ctrls[ctrlName];\n        router._notfound(ctrl);\n\n      } else if (cmd === 'do') {\n        const funcs = routeCnf.filter((routeCnfElem, key) => { if (key !== 0) { return routeCnfElem; } });\n        router._do(...funcs);\n\n      } else if (cmd === 'redirect') {\n        const fromRoute = routeCnf[1];\n        const toRoute = routeCnf[2];\n        router._redirect(fromRoute, toRoute);\n      }\n    }\n\n\n    // test URI against routes when browser's Reload button is clicked\n    router._exe();\n\n    // A) test URI against routes when element with data-rg-href attribute is clicked --> 'pushstate'\n    // B) test URI against routes when BACK/FORWARD button is clicked --> 'popstate'\n    navig.onUrlChange(pevent => {\n      router._exe(pevent); // pevent is popstate or pushstate event (see navig.onUrlChange())\n    });\n\n    return this;\n  }\n\n\n  /**\n   * Inject the content of the client/_cache/views.json.\n   * Useful to speed up the HTML view load, especially in data-rg-inc elements.\n   * @param {object} viewsCached - the content of the client/_cache/views.json file\n   * @returns {App}\n   */\n  viewsCached(viewsCached) {\n    // this.controllerProp('viewsCached', viewsCached);\n    window.regochWeber.viewsCached = viewsCached;\n    return this;\n  }\n\n\n  /**\n   * Define the debugging options. Set the controller's $debugOpts property.\n   * @param {object} $debugOpts\n   * @returns {App}\n   */\n  debugger($debugOpts) {\n    if (!!$debugOpts) { this.$debugOpts = $debugOpts; }\n    this._controllerProp('$debugOpts', this.$debugOpts);\n    return this;\n  }\n\n\n\n  /********** EVENTS **********/\n  /**\n   * Fired when HTML doc with the all resources is loaded.\n   * https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload\n   * @param {Function} cb - callback, () => { ... }\n   */\n  onReady(cb) {\n    window.onload = cb;\n  }\n\n\n  /**\n   * Fired when HTML doc is loaded without CSS, IMG and other resources.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\n   * @param {Function} cb - callback, event => { ... }\n   */\n  onDOMLoaded(cb) {\n    document.addEventListener('DOMContentLoaded', cb);\n  }\n\n\n  /**\n   * Listen for the DOM changes. Creates app.DOMObserver.\n   * How to use:\n   * app.createDOMObserver((mutationsList, observer) => { ... });\n   * const targetNode = document.querySelector('p#my-id); const config = { attributes: true, childList: true, subtree: true };\n   * app.DOMObserver.observe(targetNode, config);\n   * To stop observing use: app.DOMObserver.disconnect();\n   * https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n   * @param {Function} cb - callback, (mutationsList, observer) => { ... }\n   */\n  createDOMObserver(cb) {\n    this.DOMObserver = new MutationObserver(cb);\n  }\n\n\n}\n\n\nexport default App;\n","import View from './View.js';\n\n\nclass Model extends View {\n\n  constructor() {\n    super();\n    this.$model = {};\n    this.$modeler = {};\n  }\n\n\n  /**\n   * Proxy the this.$model object.\n   */\n  proxifyModel() {\n    const trapHandler = {\n      set: (obj, prop, value) => {\n        // console.log('obj-before::', { ...obj });\n        // console.log('prop::', prop);\n        // console.log('value::', value);\n        const tf = Reflect.set(obj, prop, value);\n        // console.log('obj-after::', obj);\n        this.render('$model.' + prop);\n        return tf;\n      }\n    };\n\n    this.$model = new Proxy(this.$model, trapHandler);\n  }\n\n\n\n  /**\n   * Define modeler (helper) methods, for example: this.$modeler.use('pets').mpush('dog');\n   * @returns [any[]]\n   */\n  modeler() {\n    /**\n     * @param {string} moelName - the model name, for example in $model.company.name --> modelName is company\n     */\n    this.$modeler.use = (modelName) => {\n      const methods = {\n        /**\n         * Set the model value\n         * @param {any} val - the model value at certain path\n         * @param {string} path - the $model property path, for example 'product.name'\n         */\n        setValue: (val, path) => {\n          const mprop = !!path ? `${modelName}.${path}` : modelName;\n          this._setModelValue(mprop, val); // see Aux class\n        },\n\n        getValue: (path) => {\n          const mprop = !!path ? `${modelName}.${path}` : modelName;\n          const val = this._getModelValue(mprop); // see Aux class\n          return val;\n        },\n\n        mpush: (arrElem) => {\n          this.$model[modelName].push(arrElem);\n          this.render('$model.' + modelName);\n        },\n\n        mpop: () => {\n          this.$model[modelName].pop();\n          this.render('$model.' + modelName);\n        },\n\n        munshift: (arrElem) => {\n          this.$model[modelName].unshift(arrElem);\n          this.render('$model.' + modelName);\n        },\n\n        mshift: () => {\n          this.$model[modelName].shift();\n          this.render('$model.' + modelName);\n        },\n\n        mrender: () => {\n          this.render('$model.' + modelName);\n        },\n\n      };\n\n      return methods;\n    };\n\n  }\n\n\n\n  /**\n   * Delete all $model properties\n   */\n  emptyModel() {\n    this.$model = {};\n  }\n\n\n\n  /**\n   * Check if the this.$model is empty object\n   * @returns {boolean}\n   */\n  isModelEmpty() {\n    return !Object.keys(this.$model).length;\n  }\n\n\n\n\n}\n\n\nexport default Model;\n","import Model from './Model.js';\nimport navig from '../lib/navig.js';\n\n\nclass Controller extends Model {\n\n  // controller properties: $auth, $debugOpts, $fridge, $model, $modeler, $preflight, $postflight, $rg, $httpClient, $baseURIhost\n  constructor() {\n    super();\n    this.$debugOpts = {}; // debug options, setup with App.debugger()\n    this.$fridge = {}; // fridged properties will not be deleted during controller processing i.e. in the navig.resetPreviousController()\n    this.$navig = navig;\n  }\n\n\n\n  /************* LIFECYCLE HOOK METHODS ***********/\n  /**\n   * LOAD HTML\n   * Load the page views, includes, lazy loads, etc... Use \"View\" methods here.\n   * @param {object} trx - regoch router transitional variable\n   * @returns {Promise<void>}\n   */\n  async loader(trx) { }\n\n  /**\n   * LOAD DATA\n   * Init the controller properties (set initial values).\n   * @param {object} trx - regoch router transitional variable\n   * @returns {Promise<void>}\n   */\n  async init(trx) { }\n\n  /**\n   * REND HTML AND DATA\n   * Render data-rg- elements.\n   * @param {object} trx - regoch router transitional variable\n   * @returns {Promise<void>}\n   */\n  async rend(trx) { await this.render(); }\n\n  /**\n   * Execute after rend.\n   * @param {object} trx - regoch router transitional variable\n   * @returns {Promise<void>}\n   */\n  async postrend(trx) { }\n\n  /**\n   * Destroy the controller when the data-rg-href element is clicked (see parse.href()).\n   * - removes all data-rg-... element lsiteners\n   * @param {Event} pevent - popstate or pushstate event which caused URL change\n   * @returns {Promise<void>}\n   */\n  async destroy(trx) { }\n\n\n\n\n\n  /**\n   * Main router middleware.\n   * 1) destroy() - execute the destroy() of the previous controller\n   * 3) rgKILL() - kill the previous controller event listeners\n   * 2)  $model = {} - reset the pevious and current $model\n   * @param {object} navig - navigation stages {uri:string, ctrl:Controller}\n   * @param {object} trx - regoch router transitional variable (defined in router.js -> _exe())\n   * @returns {Promise<void>}\n   */\n  async processing(trx) {\n    // navig processes\n    navig.setPrevious(); // set previous uri and ctrl\n    await navig.resetPreviousController(trx); // reset previous controller and execute destroy()\n    navig.setCurrent(this); // set the current uri and ctrl\n    if (this._debug().navig) { console.log(`%c---navig---`, 'color:green; background:#D9FC9B;', navig); }\n\n    // model processes\n    this.emptyModel(); // set $model to empty object\n    this.proxifyModel(); // set $model as proxy object\n    this.modeler(); // define this.$modeler methods\n\n    // controller processes\n    try { await this.loader(trx); } catch (err) { console.error(err); }\n    await this.rgInc(true);\n    this.rgSetinitial(); // parse data-rg-setinitial\n    try { await this.init(trx); } catch (err) { console.error(err); }\n    try { await this.rend(trx); } catch (err) { console.error(err); }\n    try { await this.postrend(trx); } catch (err) { console.error(err); }\n\n    // post-view processes\n    await this.rgLazyjs();\n  }\n\n\n\n\n  /************ RENDER METHODS ***********/\n  /**\n   * Render the view i.e. the data-rg- elements with the attrValQuery.\n   * For example: data-rg-print=\"first_name\", where first_name is the controllerProp.\n   * @param {string|RegExp} attrValQuery - query for the attribute value\n   * @param {number} renderDelay - delay in miliseconds\n   */\n  async render(attrValQuery, renderDelay = 5) {\n    if (!!attrValQuery) {\n      /* - remove dynamic part of the attrValquery because dynamic part in the data-rg- elem is not same as solved attrValQuery\n       - for example data-rg-print=\"$model.advert___{{ad_num}}\" is resolved to $model.advert___3 */\n      attrValQuery = attrValQuery.replace(/___.+$/, ''); // $model.advert___3 -> $model.advert\n    }\n\n    this._debug('render', `--------- render (start) -- attrValQuery: ${attrValQuery} -- renderDelay: ${renderDelay} -- ctrl: ${this.constructor.name} ------`, 'green', '#D9FC9B');\n\n    // Render DataRg generators.\n    this.rgFor(attrValQuery);\n    this.rgRepeat(attrValQuery);\n    this.rgPrint(attrValQuery);\n\n    await new Promise(r => setTimeout(r, renderDelay));\n\n    // Render DataRg non-generators.\n    this.rgIf(attrValQuery);\n    this.rgSpinner(attrValQuery);\n    this.rgSwitch(attrValQuery);\n    this.rgDisabled(attrValQuery);\n    this.rgValue(attrValQuery);\n    this.rgChecked(attrValQuery);\n    this.rgClass(attrValQuery);\n    this.rgStyle(attrValQuery);\n    this.rgSrc(attrValQuery);\n    this.rgAttr(attrValQuery);\n    this.rgElem(attrValQuery);\n    this.rgEcho();\n\n    await new Promise(r => setTimeout(r, renderDelay));\n\n    // Render DataRgListeners. First remove all listeners with the rgKILL() and after that associate listeners to data - rg - elements.\n    await this.rgKILL();\n    this.rgHref();\n    this.rgClick();\n    this.rgKeyup();\n    this.rgChange();\n    this.rgEvt();\n    this.rgSet();\n    this.rgModel();\n\n\n    this._debug('render', `--------- render (end) -- attrValQuery: ${attrValQuery} ------`, 'green', '#D9FC9B');\n  }\n\n\n\n  /**\n   * Use render() method multiple times.\n   * @param {string[]|RegExp[]} attrValQuerys - array of the controller property names: ['company.name', /^company\\.year/]\n   * @param {number} renderDelay - delay in miliseconds\n   */\n  async renders(attrValQuerys = [], renderDelay = 5) {\n    for (const attrValQuery of attrValQuerys) { await this.render(attrValQuery, renderDelay); }\n  }\n\n\n\n}\n\nexport default Controller;\n","/**\ninterface CookieOpts {\n  domain?: string;\n  path?: string;\n  expires?: number | Date; // number of hours or exact date\n  secure?: boolean;\n  httpOnly?: boolean;\n  sameSite?: string; // 'strict' for GET and POST, 'lax' only for POST\n}\n */\n\nclass Cookie {\n\n  /**\n   * @param {CookieOpts} cookieOpts - cookie options\n   * @param {boolean} debug - show debug info\n   */\n  constructor(cookieOpts, debug) {\n    this.cookieOpts = cookieOpts;\n    this.debug = debug;\n  }\n\n\n  /**\n   * Set cookie. Cookie value is string.\n   * @param {string} name - cookie name\n   * @param {string} value - cookie value (string)\n   * @returns {void}\n   */\n  put(name, value) {\n    if (!document) { throw new Error('The document is not available.'); }\n\n    // encoding cookie value\n    const valueStr = encodeURIComponent(value); // a b --> a%20b\n\n    // name=value;\n    let cookieStr = `${name}=${valueStr};`;\n\n    // add cookie options: domain, path, expires, secure, HttpOnly, SameSite\n    cookieStr = this._appendCookieOptions(cookieStr);\n    document.cookie = cookieStr;\n\n    if (this.debug) { console.log('cookie-put():cookieStr: ', cookieStr); }\n  }\n\n\n\n  /**\n   * Set cookie. Cookie value is object.\n   * @param {string} name - cookie name\n   * @param {object} valueObj - cookie value (object)\n   * @returns {void}\n   */\n  putObject(name, valueObj) {\n    if (!document) { throw new Error('The document is not available.'); }\n\n    // convert object to string and encode that string\n    const valueStr = encodeURIComponent(JSON.stringify(valueObj)); // a b --> a%20b\n\n    // name=value;\n    let cookieStr = `${name}=${valueStr};`;\n\n    // add cookie options: domain, path, expires, secure, HttpOnly, SameSite\n    cookieStr = this._appendCookieOptions(cookieStr);\n    document.cookie = cookieStr;\n\n    if (this.debug) { console.log('cookie-putObject(): ', cookieStr); }\n  }\n\n\n\n  /**\n   * Get all cookies in string format (cook1=jedan1; cook2=dva2;).\n   * @returns {string} - example: cook1=jedan1; cook2=dva2;\n   */\n  getAll() {\n    if (!document) { throw new Error('The document is not available.'); }\n    const allCookies = document.cookie; // 'cook1=jedan1; cook2=dva2;'\n    if (this.debug) { console.log('cookie-getAll(): ', allCookies); }\n    return allCookies;\n  }\n\n\n\n  /**\n   * Get a cookie by specific name. Returned value is string.\n   * @param {string} name - cookie name\n   * @returns {string}\n   */\n  get(name) {\n    if (!document) { throw new Error('The document is not available.'); }\n\n    const cookiesArr = this._toCookiesArr(); // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n\n    // extract cookie value for specific name\n    let elemArr, cookieVal;\n    cookiesArr.forEach(elem => {\n      elemArr = elem.split('='); // [\"authAPIInit1\", \"jedan1\"]\n      if (elemArr[0] === name) {\n        cookieVal = elemArr[1];\n      }\n    });\n\n    cookieVal = decodeURIComponent(cookieVal); // a%20b --> a b\n\n    // debug\n    if (this.debug) {\n      console.log('cookie-get()-cookiesArr: ', cookiesArr);\n      console.log('cookie-get()-cookieVal: ', name, '=', cookieVal);\n    }\n\n    return cookieVal;\n  }\n\n\n\n  /**\n   * Get cookie by specific name. Returned value is object.\n   * @param {string} name - cookie name\n   * @returns {object}\n   */\n  getObject(name) {\n    if (!document) { throw new Error('The document is not available.'); }\n\n    const cookieVal = this.get(name); // %7B%22jen%22%3A1%2C%22dva%22%3A%22dvica%22%7D\n\n    // convert cookie string value to object\n    let cookieObj = null;\n    try {\n      if (cookieVal !== 'undefined' && !!cookieVal) {\n        const cookieJson = decodeURIComponent(cookieVal);\n        cookieObj = JSON.parse(cookieJson);\n      }\n    } catch (err) {\n      console.error('cookie-getObject(): ', err);\n    }\n\n    // debug\n    if (this.debug) {\n      console.log('cookie-getObject():cookieVal: ', cookieVal);\n      console.log('cookie-getObject():cookieObj: ', cookieObj);\n    }\n\n    return cookieObj;\n  }\n\n\n\n  /**\n   * Remove cookie by specific name.\n   * @param {string} name - cookie name\n   * @returns {void}\n   */\n  remove(name) {\n    if (!document) { throw new Error('The document is not available.'); }\n    let dateOld = new Date('1970-01-01T01:00:00'); // set expires backward to delete cookie\n    dateOld = dateOld.toUTCString(); // Thu, 01 Jan 1970 00:00:00 GMT\n    document.cookie = `${name}=;expires=${dateOld};path=/;`;\n    if (this.debug) { console.log('cookie-remove(): ', name, ' cookie is deleted.'); }\n  }\n\n\n\n  /**\n   * Remove all cookies.\n   * @returns {void}\n   */\n  removeAll() {\n    if (!document) { throw new Error('The document is not available.'); }\n\n    // set expires backward to delete cookie\n    let dateOld = new Date('1970-01-01T01:00:00'); // set expires backward to delete cookie\n    dateOld = dateOld.toUTCString(); // Thu, 01 Jan 1970 00:00:00 GMT\n\n    // get cookies array\n    const cookiesArr = this._toCookiesArr(); // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n\n    // extract cookie value for specific name\n    let elemArr;\n    const cookiesArr2 = [];\n    cookiesArr.forEach(elem => {\n      elemArr = elem.split('='); // [\"authAPIInit1\", \"jedan1\"]\n      document.cookie = `${elemArr[0]}=;expires=${dateOld};path=/;`;\n      cookiesArr2.push(document.cookie);\n    });\n\n    // debug\n    if (this.debug) {\n      console.log('cookie-removeAll():before:: ', cookiesArr);\n      console.log('cookie-removeAll():after:: ', cookiesArr2);\n    }\n  }\n\n\n\n\n  /**\n   * Check if cookie exists.\n   * @param {string} name - cookie name\n   * @return boolean\n   */\n  exists(name) {\n    if (!document) { throw new Error('The document is not available.'); }\n\n    const cookiesArr = this._toCookiesArr(); // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n\n    // extract cookie value for specific name\n    let elemArr, cookieExists = false;\n    cookiesArr.forEach(elem => {\n      elemArr = elem.split('='); // [\"authAPIInit1\", \"jedan1\"]\n      if (elemArr[0] === name) {\n        cookieExists = true;\n      }\n    });\n\n    if (this.debug) { console.log('cookie-exists(): ', cookieExists); }\n\n    return cookieExists;\n  }\n\n\n\n  /******* PRIVATES *******/\n  /**\n   * Add cookie options (domain, path, expires, secure, ...) to the cookie string.\n   * @param {string} cookieStr - cookie string\n   * @returns {string}\n   */\n  _appendCookieOptions(cookieStr) {\n\n    if (!this.cookieOpts) {\n      return cookieStr;\n    }\n\n    // domain=example.com;\n    if (!!this.cookieOpts.domain) {\n      const cDomain = `domain=${this.cookieOpts.domain};`;\n      cookieStr += cDomain;\n    }\n\n    // path=/;\n    if (!!this.cookieOpts.path) {\n      const cPath = `path=${this.cookieOpts.path};`;\n      cookieStr += cPath;\n    }\n\n    // expires=Fri, 3 Aug 2001 20:47:11 UTC;\n    if (!!this.cookieOpts.expires) {\n      let expires;\n      if (typeof this.cookieOpts.expires === 'number') {\n        const d = new Date();\n        d.setTime(d.getTime() + (this.cookieOpts.expires * 60 * 60 * 1000));\n        expires = d.toUTCString();\n      } else {\n        expires = this.cookieOpts.expires.toUTCString();\n      }\n      const cExpires = `expires=${expires};`;\n\n      cookieStr += cExpires;\n    }\n\n    // secure;\n    if (!!this.cookieOpts.secure) {\n      const cSecure = 'secure;';\n      cookieStr += cSecure;\n    }\n\n    // HttpOnly;\n    if (!!this.cookieOpts.httpOnly) {\n      const cHttpOnly = 'HttpOnly;';\n      cookieStr += cHttpOnly;\n    }\n\n    // SameSite=lax; or SameSite=strict;\n    if (!!this.cookieOpts.sameSite) {\n      const cSameSite = `SameSite=${this.cookieOpts.sameSite};`;\n      cookieStr += cSameSite;\n    }\n\n    return cookieStr;\n  }\n\n\n\n  /**\n   * Get all cookies from document.cookie and convert it in the array format.\n   * authAPIInit1=jedan1; authAPIInit2=dva2; authAPI=  --> [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n   * @returns {string[]}\n   */\n  _toCookiesArr() {\n    // fetch all cookies\n    const allCookies = document.cookie; // authAPIInit1=jedan1; authAPIInit2=dva2; authAPI=\n\n    // create cookie array\n    const cookiesArr = allCookies.split(';'); // [\"authAPIInit1=jedan1\", \" authAPIInit2=dva2\", \" authAPI=\"]\n\n    // remove empty spaces from left and right side\n    const cookiesArrMapped = cookiesArr.map(cookiesPair => { // cookiesPair: \" authAPIInit2=dva2\"\n      return cookiesPair.trim();\n    });\n\n    return cookiesArrMapped; // [\"authAPIInit1=jedan1\", \"authAPIInit2=dva2\", \"authAPI=\"]\n  }\n\n\n\n}\n\n\nexport default Cookie;\n","import navig from './navig.js';\nimport Cookie from './Cookie.js';\nimport HTTPClient from './HTTPClient.js';\n\n\n\n/**\n * Authentication with the JWT token and cookie.\n */\nclass Auth {\n\n  /**\n   * authOpts:\n   {\n    apiLogin :string,       // API login URL: http://127.0.0.1:8001/users/login\n    afterGoodLogin :string, // redirect after succesful login: '/{loggedUserRole}', (empty string => dont do anything, location.href => reload same URL)\n    afterBadLogin :string,  // redirect after unsuccesful login: '/login', (empty string => dont do anything, location.href => reload same URL)\n    afterLogout :string     // URL after logout: '/login', (empty string => dont do anything, location.href => reload same URL)\n   }\n   * NOTICE: If afterGoodLogin, afterBadLogin, afterLogout has falsy value then the URL will stay same i.e. location.href.\n   * @param {object} authOpts - auth options\n   */\n  constructor(authOpts) {\n    this.authOpts = authOpts;\n\n    const cookieOpts = {\n      // domain: 'localhost',\n      path: '/',\n      expires: 5, // number of hours or exact date\n      secure: false,\n      httpOnly: false,\n      sameSite: 'strict' // 'strict' for GET and POST, 'lax' only for POST\n    };\n    this.cookie = new Cookie(cookieOpts);\n\n    const opts = {\n      encodeURI: false,\n      timeout: 8000,\n      retry: 3,\n      retryDelay: 5500,\n      maxRedirects: 3,\n      headers: {\n        'authorization': '',\n        'accept': '*/*', // 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\n        'content-type': 'text/html; charset=UTF-8'\n      },\n      responseType: '' // 'blob' for file download (https://developer.mozillfullnamea.org/en-US/docs/Web/API/XMLHttpRequest/responseType)\n    };\n    this.httpClient = new HTTPClient(opts);\n\n    this.jwtToken; // JWT Token string: 'JWT ...'\n    this.loggedUser = this.getLoggedUserInfo(); // the user object: {first_name, last_name, username, ...}\n  }\n\n\n\n\n  /******* CONTROLLER METHODS - use in the controller's constructor as app.auth() ******/\n  /**\n   * Send login request to the API.\n   * @param {object} creds - credentials object send as body to the API, for example: {username, password}\n   * @returns {Promise<any>}\n   */\n  async login(creds) {\n    const url = this.authOpts.apiLogin;\n    const answer = await this.httpClient.askJSON(url, 'POST', creds);\n\n    if (answer.status === 200) {\n      const apiResp = answer.res.content;\n\n      this.jwtToken = apiResp.jwtToken;\n      this.loggedUser = apiResp.loggedUser;\n\n      this.cookie.put('auth_jwtToken', apiResp.jwtToken); // set cookie 'auth_jwtToken': 'JWT xyz...'\n      this.cookie.putObject('auth_loggedUser', apiResp.loggedUser); // set cookie 'auth_loggedUser' and class property 'this.loggedUser': {first_name: , last_name: , ...}\n\n      // redirect to URL\n      const afterGoodLoginURL = this._correctURL(this.authOpts.afterGoodLogin, apiResp.loggedUser);\n      if (!!afterGoodLoginURL) { navig.goto(afterGoodLoginURL); }\n\n      return apiResp;\n\n    } else {\n      this.loggedUser = null;\n      this.cookie.removeAll();\n      const errMSg = !!answer.res.content && (answer.res.content.message || answer.res.content.msg) ? answer.res.content.message || answer.res.content.msg : 'Bad Login';\n      throw new Error(errMSg);\n    }\n\n  }\n\n\n  /**\n   * Logout. Remove login cookie, loggedUser and change the URL.\n   * @param {number} ms - time period to redirect to afterLogoutURL\n   * @returns {void}\n   */\n  async logout(ms) {\n    this.cookie.removeAll(); // delete all cookies\n    this.loggedUser = undefined; // remove class property\n    await new Promise(r => setTimeout(r, ms));\n    const afterLogoutURL = this._correctURL(this.authOpts.afterLogout, null);\n    if (!!afterLogoutURL) { navig.goto(afterLogoutURL); } // change URL\n  }\n\n\n  /**\n   * Get logged user info from the object property (faster) or from the cookie 'auth_loggedUser' (slower)\n   * @returns {object} - {first_name, last_name, ...}\n   */\n  getLoggedUserInfo() {\n    const loggedUser = this.loggedUser || this.cookie.getObject('auth_loggedUser');\n    return loggedUser;\n  }\n\n\n  /**\n   * Set logged user object.\n   * @param {object} user_obj - {first_name, last_name, ...}\n   * @returns {void}\n   */\n  setLoggedUserInfo(user_obj) {\n    this.loggedUser = user_obj;\n    this.cookie.putObject('auth_loggedUser', user_obj);\n  }\n\n\n  /**\n   * Get JWT token from cookie\n   * @return {string} - JWT eyJhbGciOiJIUzI1NiIsInR...\n   */\n  getJWTtoken() {\n    const jwtToken = this.jwtToken || this.cookie.get('auth_jwtToken');\n    return jwtToken;\n  }\n\n\n\n\n\n  /******* ROUTER METHODS (use in the router as authGuards) ******/\n  /**\n   * Check if user is logged and if yes do auto login e.g. redirect to afterGoodLogin URL.\n   * @returns {boolean}\n   */\n  autoLogin() {\n    const loggedUser = this.getLoggedUserInfo(); // get loggedUser info after successful username:password login\n\n    // redirect to URL\n    if (!!loggedUser && !!loggedUser.username) {\n      const afterGoodLoginURL = this._correctURL(this.authOpts.afterGoodLogin, loggedUser);\n      if (!!afterGoodLoginURL) { navig.goto(afterGoodLoginURL); }\n      console.log(`%c AuthWarn:: Autologin to ${afterGoodLoginURL} is triggered.`, `color:Maroon; background:LightYellow`);\n    }\n  }\n\n\n  /**\n   * Check if user is logged and if not redirect to afterBadLogin URL.\n   * @returns {boolean}\n   */\n  isLogged() {\n    const loggedUser = this.getLoggedUserInfo(); // get loggedUser info after successful username:password login\n    const isAlreadyLogged = !!loggedUser && !!loggedUser.username;\n\n    // redirect to afterBadLogin URL\n    if (!isAlreadyLogged) {\n      const afterBadLoginURL = this._correctURL(this.authOpts.afterBadLogin, loggedUser);\n      if (!!afterBadLoginURL) { navig.goto(afterBadLoginURL); }\n      throw new Error('AuthWarn:: This route is blocked because the user is not logged in.');\n    }\n  }\n\n\n  /**\n   * Check if user has required role: admin, customer... which corresponds to the URL.\n   * For example role \"admin\" must have URL starts with /admin/...\n   * If not redirect to /login page.\n   * @returns {boolean}\n   */\n  hasRole() {\n    const loggedUser = this.getLoggedUserInfo(); // get loggedUser info after successful username:password login\n\n    // get current URL and check if user's role (admin, customer) is contained in it\n    const currentUrl = window.location.pathname + window.location.search; // browser address bar URL: /admin/product/23\n\n    let urlHasRole = false;\n    if (!!loggedUser && !!loggedUser.role) {\n      urlHasRole = currentUrl.indexOf(loggedUser.role) !== -1;\n    }\n\n    if (!urlHasRole) {\n      const afterBadLoginURL = this._correctURL(this.authOpts.afterBadLogin, loggedUser);\n      if (!!afterBadLoginURL) { navig.goto(afterBadLoginURL); }\n      throw new Error('AuthWarn:: This route is blocked because the user doesn\\'t have valid role.');\n    }\n  }\n\n\n\n\n  /**** PRIVATES ****/\n  /**\n   * Correct afterGoodLogin, afterBadLogin, afterLogout.\n   * @param {string} url - original url: afterGoodLogin, afterBadLogin, afterLogout\n   * @param {object} loggedUser - {first_name, last_name, ... role}\n   * @returns\n   */\n  _correctURL(url, loggedUser) {\n    let url_corrected;\n    if (!!loggedUser && !!loggedUser.role) {\n      url_corrected = !!url ? url.replace('{loggedUserRole}', loggedUser.role) : '';\n    } else {\n      url_corrected = !!url ? url : '';\n    }\n    return url_corrected;\n  }\n\n\n\n}\n\n\n\nexport default Auth;\n","/**\n * HTML Form Library\n * According to W3C Standard https://html.spec.whatwg.org/multipage/forms.html\n */\nclass Form {\n\n  constructor(formName) {\n    this.formName = formName;\n    this.debugOptions = {\n      setControl: false,\n      setControls: false,\n      getControl: false,\n      getControls: false,\n      delControl: false,\n      delControls: false\n    };\n  }\n\n\n  /**\n   * Set the form control value.\n   * @param {string} key - the value of the \"name\" HTML attribute\n   * @param {any|string[]} val - the value\n   * @returns {void}\n   */\n  setControl(key, val) {\n    this._debug('setControl', `--------- setControl(\"${key}\", \"${val}\") ------`, 'green', '#A1F8DC');\n    const elems = document.querySelectorAll(`[data-rg-form=\"${this.formName}\"] [name=\"${key}\"]`);\n    if (!elems.length) { console.log(`%c FormWarn:: Form \"${this.formName}\" doesn't have control with name=\"${key}\" attribute.`, `color:Maroon; background:LightYellow`); return; }\n\n    for (const elem of elems) {\n      if (elem.type === 'text') { // INPUT[type=\"text\"]\n        if (typeof val === 'object') { val = JSON.stringify(val); }\n        elem.value = val;\n        elem.setAttribute('value', val);\n\n      } else if (elem.type === 'number') { // INPUT[type=\"number\"]\n        if (val === '') { val = 0; }\n        else if (typeof val === 'string') { val = +val; }\n        elem.value = val;\n        elem.setAttribute('value', val);\n\n      } else if (elem.type === 'checkbox') { // CHECKBOX\n        elem.checked = false;\n        if (typeof val !== 'boolean' && val.indexOf(elem.value) !== -1) { elem.checked = true; }\n        else if (typeof val === 'boolean') { elem.checked = val; }\n\n      } else if (elem.type === 'radio') { // RADIO\n        elem.checked = false;\n        if (val === elem.value) { elem.checked = true; }\n\n      } else if (elem.type === 'select-multiple') { // on SELECT with multiple, for example <select name=\"family\" size=\"4\" multiple>\n        const options = elem; // all options\n        for (const option of options) {\n          option.selected = false;\n          if (val.indexOf(option.value) !== -1) { option.selected = true; }  // val is array\n        }\n\n      } else if (elem.type === 'textarea') { // TEXTAREA\n        if (typeof val === 'object') { val = JSON.stringify(val, null, 2); }\n        elem.value = val;\n\n      } else { // ALL OTHER: select-one\n        elem.value = val;\n      }\n      this._debug('setControl', `${elem.type}[name=\"${key}\"] got value=\"${val}\"`, 'green');\n    }\n\n  }\n\n\n\n  /**\n   * Set the multiple form controls with one object.\n   * @param {object} obj - the object which represent the object values, for example: {name:'John Doe', age:23, employed:true}\n   * @returns {void}\n   */\n  setControls(obj) {\n    this._debug('setControls', '--------- setControls ------', 'green', '#88DBC0');\n    if (!obj) { return; }\n    const keys = Object.keys(obj);\n    for (const key of keys) {\n      const elems = document.querySelectorAll(`[data-rg-form=\"${this.formName}\"] [name^=\"${key}\"]`);\n      this._debug('setControls', `\\nElems found: ${elems.length} in the form for name^=\"${key}\".`, 'green');\n      if (!elems.length) {\n        this._debug('setControls', `FormWarn::setControls -> Form \"${this.formName}\" doesn't have control with name^=\"${key}\" attribute.`, 'green');\n        continue;\n      }\n\n      for (const elem of elems) {\n        let val, attrVal;\n        if (!!elem) {\n          attrVal = elem.getAttribute('name'); // seller.name\n          const keys = attrVal.split('.'); // ['seller', 'name']\n          const key1 = keys[0]; // seller\n          const key2 = keys[1]; // name\n          if (key1 && !key2) { val = obj[key1]; }\n          else if (key1 && key2) { val = obj[key1][key2]; }\n        }\n\n        if (!!attrVal) { this.setControl(attrVal, val); }\n\n        if (this._debug().setControls) { console.log(`setControls:: obj-key:: ${key} , attrVal:: ${attrVal} , elem::`, elem); }\n      }\n\n    }\n  }\n\n\n\n  /**\n   * Get the form control value.\n   * @param {string} key - the value of the \"name\" HTML attribute\n   * @param {boolean} convertType - default true\n   * @returns {string|number}\n   */\n  getControl(key, convertType = true) {\n    this._debug('getControl', '--------- getControl ------', 'green', '#A1F8DC');\n    const elems = document.querySelectorAll(`[data-rg-form=\"${this.formName}\"] [name=\"${key}\"]`);\n    if (!elems.length) { console.error(`Form \"${this.formName}\" doesn't have name=\"${key}\" control.`); }\n\n    let val;\n    const valArr = [];\n    let i = 1;\n    for (const elem of elems) {\n      if (elem.type === 'checkbox') {\n        let v = elem.value;\n        if (convertType) { v = this._stringTypeConvert(elem.value); }\n        if (elem.checked) { valArr.push(v); val = valArr; }\n        if (i === elems.length && !val) { val = []; }\n\n      } else if (elem.type === 'select-multiple') {\n        const opts = elem.selectedOptions; // selected options\n        for (const opt of opts) {\n          let v = opt.value;\n          if (convertType) { v = this._stringTypeConvert(opt.value); }\n          valArr.push(v);\n          val = valArr;\n        }\n        if (i === elems.length && !val) { val = []; }\n\n      } else if (elem.type === 'radio') {\n        let v = elem.value;\n        if (convertType) { v = this._stringTypeConvert(elem.value); }\n        if (elem.checked) { val = v; }\n\n      } else if (elem.type === 'number') {\n        val = elem.valueAsNumber;\n\n      } else if (elem.type === 'password') {\n        val = elem.value;\n\n      } else if (elem.type === 'file' && elem.multiple) {\n        val = elem.files;\n\n      } else if (elem.type === 'file') {\n        val = elem.files[0];\n\n      } else {\n        let v = elem.value;\n        if (convertType) { v = this._stringTypeConvert(elem.value); }\n        val = v;\n      }\n      i++;\n    }\n\n    this._debug('getControl', `${val}`, 'green');\n    return val;\n  }\n\n\n  /**\n   * Get the form controll values and return corresponding object\n   * @param {string[]} keys - the value of the \"name\" HTML attribute\n   * @param {boolean} convertType - default true\n   * @returns {object}\n   */\n  getControls(keys, convertType = true) {\n    if (!keys) { console.error('getControlsErr: Argument \"keys\" is not defined. It should be an array.'); }\n    this._debug('getControls', '--------- getControls ------', 'green', '#A1F8DC');\n    this._debug('getControls', keys, 'green');\n    const obj = {};\n    for (const key of keys) {\n      obj[key] = this.getControl(key, convertType);\n    }\n    return obj;\n  }\n\n\n  /**\n   * Empty the form control value.\n   * @param {string} key - the value of the \"name\" HTML attribute\n   * @returns {void}\n   */\n  delControl(key) {\n    this._debug('delControl', '--------- delControl ------', 'green', '#A1F8DC');\n    this._debug('delControl', key, 'green');\n    const elems = document.querySelectorAll(`[data-rg-form=\"${this.formName}\"] [name^=\"${key}\"]`);\n    if (!elems.length) { console.error(`Form \"${this.formName}\" doesn't have name^=\"${key}\" control.`); }\n\n    for (const elem of elems) {\n      if (elem.type === 'checkbox') {\n        elem.checked = false;\n      } else if (elem.type === 'select-multiple') {\n        const options = elem; // all options\n        for (const option of options) {\n          option.selected = false;\n        }\n      } else if (elem.type === 'radio') {\n        elem.checked = false;\n      } else {\n        elem.value = '';\n      }\n    }\n\n  }\n\n\n  /**\n   * Empty the form control values.\n   * @param {string[]} keys - the value of the \"name\" HTML attribute\n   * @returns {void}\n   */\n  delControls(keys) {\n    if (!keys) { console.error('delControlsErr: Argument \"keys\" is not defined. It should be an array.'); }\n    this._debug('delControls', '--------- delControls ------', 'green', '#A1F8DC');\n    this._debug('delControls', keys, 'green');\n    for (const key of keys) {\n      this.delControl(key);\n    }\n  }\n\n\n  /**\n   * Convert string into integer, float or boolean.\n   * @param {string} value\n   * @returns {string | number | boolean | object}\n   */\n  _stringTypeConvert(value) {\n    function isJSON(str) {\n      try { JSON.parse(str); }\n      catch (err) { return false; }\n      return true;\n    }\n\n    if (!!value && !isNaN(value) && !/\\./.test(value)) { // convert string into integer (12)\n      value = parseInt(value, 10);\n    } else if (!!value && !isNaN(value) && /\\./.test(value)) { // convert string into float (12.35)\n      value = parseFloat(value);\n    } else if (value === 'true' || value === 'false') { // convert string into boolean (true)\n      value = JSON.parse(value);\n    } else if (isJSON(value)) {\n      value = JSON.parse(value);\n    }\n\n    return value;\n  }\n\n\n  _debug(tip, text, color, background) {\n    if (this.debugOptions[tip]) { console.log(`%c ${text}`, `color: ${color}; background: ${background}`); }\n    return this.debugOptions;\n  }\n\n\n\n}\n\nexport default Form;\n","/**\ninterface BrowserStorageOpts {\n  storageType: 'local'|'session'  // default is localStorage\n}\n */\n\nclass BrowserStorage {\n\n  /**\n   * @param {BrowserStorageOpts} browserStorageOpts - localStorage or sessionStorage options\n   * @param {boolean} debug - show debug info\n   */\n  constructor(browserStorageOpts, debug) {\n    if (!window) { throw new Error('The \"window\" object is undefined. Run it in the browser environment.'); }\n\n    this.browserStorageOpts = browserStorageOpts;\n    this.debug = debug;\n\n    if (browserStorageOpts.storageType === 'session') { this.storage = window.sessionStorage; }\n    else { this.storage = window.localStorage; }\n  }\n\n\n  /**\n   * Set local or session storage.\n   * The input value can be of any type and it's saved as string.\n   * @param {string} name - storage name\n   * @param {any} value - storage value\n   * @returns {void}\n   */\n  put(name, value) {\n    this.storage.setItem(name, value);\n    if (this.debug) { console.log(`${this.browserStorageOpts.storageType}-put(): ${name} = ${value}`); }\n  }\n\n\n  /**\n   * Set local or session storage.\n   * The input value is object and it's saved as string.\n   * @param {string} name - storage name\n   * @param {object} valueObj - storage value (object)\n   * @returns {void}\n   */\n  putObject(name, valueObj) {\n    const value = JSON.stringify(valueObj);\n    this.storage.setItem(name, value);\n    if (this.debug) { console.log(`${this.browserStorageOpts.storageType}-putObject(): ${name} = ${value.toString()}`); }\n  }\n\n\n  /**\n   * Get all storage values and return it as array of objects.\n   * @returns {array}\n   */\n  getAll() {\n    const storageObjs = [];\n    for (const [key, val] of Object.entries(this.storage)) {\n      storageObjs.push({ [key]: val });\n      if (this.debug) {\n        (typeof val === 'object') ? console.log(`${this.browserStorageOpts.storageType}-getAll(): ${key} = ${JSON.stringify(val)}`) : console.log(`${this.browserStorageOpts.storageType}-getAll: ${key} = ${val}`);\n      }\n    }\n    return storageObjs;\n  }\n\n\n  /**\n   * Get a storage value by specific name. Returned value is string.\n   * @param {string} name - storage name\n   * @returns {string}\n   */\n  get(name) {\n    const value = this.storage.getItem(name) || '';\n    if (this.debug) { console.log(`${this.browserStorageOpts.storageType}-get(): ${name} = `, value); }\n    return value;\n  }\n\n\n  /**\n   * Get a storage value by specific name. Returned value is object.\n   * @param {string} name - storage name\n   * @returns {object}\n   */\n  getObject(name) {\n    const value = this.storage.getItem(name) || '';\n\n    // convert storage string value to object\n    let valueObj = null;\n    try {\n      if (value !== 'undefined' && !!value) {\n        valueObj = JSON.parse(value);\n      }\n    } catch (err) {\n      console.error(`${this.browserStorageOpts.storageType}-getObject(): Storage value has invalid JSON and can not be converted to Object. Use get() method instead getObject() !`);\n    }\n\n    // debug\n    if (this.debug) {\n      console.log(`${this.browserStorageOpts.storageType}-getObject():value:`, value);\n      console.log(`${this.browserStorageOpts.storageType}-getObject():valueObj:`, valueObj);\n    }\n\n    return valueObj;\n  }\n\n\n  /**\n   * Remove storage by specific name.\n   * @param {string} name - storage name\n   * @returns {void}\n   */\n  remove(name) {\n    this.storage.removeItem(name);\n    if (this.debug) { console.log(`${this.browserStorageOpts.storageType}-remove():`, name, ' is deleted.'); }\n  }\n\n\n  /**\n   * Remove all storage values.\n   * @returns {void}\n   */\n  removeAll() {\n    this.storage.clear();\n  }\n\n\n  /**\n   * Check if storage exists.\n   * @param {string} name - storage name\n   * @return boolean\n   */\n  exists(name) {\n    const value = this.storage.getItem(name) || '';\n    return !!value;\n  }\n\n}\n\n\nexport default BrowserStorage;\n","class Paginator {\n\n  /**\n   * @param {number} linksSize - the number of links which will be shown\n   * @param {string[]} currentPageClasses - the CSS classes which marks the active page, usually it's <li class=\"active\">\n   */\n  constructor(linksSize, currentPageClasses) {\n    this.linksSize = +linksSize || 5;\n    this.currentPageClasses = currentPageClasses || ['active'];\n  }\n\n\n  /**\n   * Calculate the page links and make current page active.\n   * @param {number} currentPage - current page\n   * @param {number} itemsTotal - the total number of items\n   * @param {number} itemsPerPage - number of items on one page\n   * @returns {{ pageLinks:{i:number, c:string[]}[], pagesTotal:number }}\n   */\n  async page(currentPage, itemsTotal, itemsPerPage) {\n    currentPage = +currentPage; // convert to number\n    const pagesTotal = Math.ceil(itemsTotal / itemsPerPage); // define total number of pages\n\n    // define pagination numbers that will be shown from start to end\n    const half = Math.ceil(this.linksSize / 2);\n    let istart;\n    let iend;\n    if (pagesTotal >= this.linksSize) {\n      if (currentPage >= 1 && currentPage < this.linksSize) {\n        istart = 1;\n        iend = this.linksSize;\n      } else if (currentPage >= this.linksSize && currentPage <= pagesTotal - half) {\n        istart = currentPage - half;\n        iend = currentPage + half;\n      } else {\n        istart = pagesTotal - this.linksSize + 1;\n        iend = pagesTotal;\n      }\n    } else {\n      istart = 1;\n      iend = pagesTotal;\n    }\n\n    // define pagelinks objects\n    let i; // link number\n    const pageLinks = [];\n    for (i = istart; i <= iend; i++) {\n      const c = i === currentPage ? this.currentPageClasses : []; // current (active) page CSS classes\n      const obj = { i, c };\n      pageLinks.push(obj);\n    }\n\n    return { pageLinks, pagesTotal };\n  }\n\n\n  /**\n   * Calculate the skip number, i.e. how many items to skip.\n   * @param {number} currentPage - current page number\n   * @param {number} itemsPerPage - total items per one page\n   * @returns {number}\n   */\n  skipCalc(currentPage, itemsPerPage) {\n    const skip = (currentPage - 1) * itemsPerPage;\n    return skip;\n  }\n\n\n  /**\n   * Calculate the table ordinal number #.\n   * @param {number} currentPage - current page number\n   * @param {number} itemsPerPage - total items per one page\n   * @param {number} i - table row number: 0, 1, 2, ...\n   * @returns {number}\n   */\n  ordCalc(currentPage, itemsPerPage, i) {\n    const ord = (currentPage - 1) * itemsPerPage + i + 1;\n    return ord;\n  }\n\n\n\n\n}\n\nexport default Paginator;\n","class Util {\n\n  /**\n   * Time delay\n   * @param {number} ms - miliseconds\n   * @returns {Promise<void>}\n   */\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n\n}\n\n\nconst util = new Util();\n\nexport default util;\n","/**\n * The system libraries which can be used in the controller.\n */\nimport Auth from './Auth.js';\nimport Cookie from './Cookie.js';\nimport eventEmitter from './eventEmitter.js';\nimport Form from './Form.js';\nimport HTTPClient from './HTTPClient.js';\nimport BrowserStorage from './BrowserStorage.js';\nimport navig from './navig.js';\nimport Paginator from './Paginator.js';\nimport util from './util.js';\n\n\nexport {\n  Auth,\n  Cookie,\n  eventEmitter,\n  Form,\n  HTTPClient,\n  BrowserStorage,\n  navig,\n  Paginator,\n  util\n};\n","import App from './App.js';\nimport Controller from './mvc/Controller.js';\nimport * as syslib from './lib/index.js';\nimport RegochRouter from './router/RegochRouter.js';\n\nexport { App, Controller, syslib, RegochRouter };\nwindow.regochWeber.sys = { App, Controller, syslib };\n","export default {\n  \"inc/navbar.html\": \"<div class=\\\"w3-bar w3-teal w3-card w3-left-align w3-large\\\"><a class=\\\"w3-bar-item w3-button w3-hide-medium w3-hide-large w3-right w3-padding-large w3-hover-white w3-large w3-teal\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"myFunction()\\\" title=\\\"Toggle Navigation Menu\\\"><i class=\\\"fa fa-bars\\\"></i></a><a data-rg-href=\\\"/\\\" class=\\\"w3-bar-item w3-button w3-padding-large w3-hover-white\\\">Home</a><a data-rg-href=\\\"/quickstart\\\" class=\\\"w3-bar-item w3-button w3-hide-small w3-padding-large w3-hover-white\\\">Quickstart</a><a data-rg-href=\\\"/docs\\\" class=\\\"w3-bar-item w3-button w3-hide-small w3-padding-large w3-hover-white\\\">Docs</a><a data-rg-href=\\\"/examples\\\" class=\\\"w3-bar-item w3-button w3-hide-small w3-padding-large w3-hover-white\\\">Examples</a><a href=\\\"http://www.regoch.org/contact\\\" target=\\\"_blank\\\" class=\\\"w3-bar-item w3-button w3-hide-small w3-padding-large w3-hover-white\\\">Contact</a></div><div id=\\\"navDemo\\\" class=\\\"w3-bar-block w3-white w3-hide w3-hide-large w3-hide-medium w3-large\\\"><a data-rg-href=\\\"/\\\" class=\\\"w3-bar-item w3-button w3-padding-large\\\">Home</a><a data-rg-href=\\\"/quickstart\\\" class=\\\"w3-bar-item w3-button w3-padding-large\\\">Quickstart</a><a data-rg-href=\\\"/docs\\\" class=\\\"w3-bar-item w3-button w3-padding-large\\\">Docs</a><a data-rg-href=\\\"/examples\\\" class=\\\"w3-bar-item w3-button w3-padding-large\\\">Examples</a><a href=\\\"http://www.regoch.org/contact\\\" target=\\\"_blank\\\" class=\\\"w3-bar-item w3-button w3-padding-large\\\">Contact</a></div>\",\n  \"inc/footer.html\": \"<div class=\\\"w3-xlarge w3-padding-32\\\"><i class=\\\"fa fa-facebook-official w3-hover-opacity\\\"></i><i class=\\\"fa fa-instagram w3-hover-opacity\\\"></i><i class=\\\"fa fa-snapchat w3-hover-opacity\\\"></i><i class=\\\"fa fa-pinterest-p w3-hover-opacity\\\"></i><i class=\\\"fa fa-twitter w3-hover-opacity\\\"></i><i class=\\\"fa fa-linkedin w3-hover-opacity\\\"></i></div><p>Powered by <a href=\\\"http://www.regoch.org\\\" target=\\\"_blank\\\">Regoch.org</a></p>\"\n};","export default {\n  api: 'http://127.0.0.1:3336'\n};\n","const $debugOpts = {\n  // general\n  warnings: false,\n\n  // Router\n  router: false,\n  regochRouter: false,\n\n  // Controller.js\n  render: false,\n  navig: false,\n\n  // View.js\n  rgInc: false,\n  loadView: false,\n  emptyView: false,\n  loadHead: false,\n  rgLazyjs: false,\n\n  // DataRg.js\n  rgFor: false,\n  rgRepeat: false,\n  rgPrint: false,\n\n  rgIf: false,\n  rgSpinner: false,\n  rgSwitch: false,\n  rgDisabled: false,\n  rgValue: false,\n  rgChecked: false,\n  rgClass: false,\n  rgStyle: false,\n  rgSrc: false,\n  rgAttr: false,\n  rgElem: false,\n  rgEcho: false,\n\n  // DataRgListeners.js\n  rgKILL: false,\n  rgHref: false,\n  rgClick: false,\n  rgKeyup: false,\n  rgChange: false,\n  rgEvt: false,\n  rgSet: false,\n  rgModel: false\n};\n\n\nexport { $debugOpts };\n","const authOpts = {\n  apiLogin: 'http://localhost:8001/panel/users/login',\n  afterGoodLogin: '/playground/{loggedUserRole}/dashboard', // redirect after succesful login:\n  afterBadLogin: '/playground/login',  // redirect after unsuccesful login\n  afterLogout: '/playground/login'     // URL after logout\n};\n\nexport { authOpts };\n","export { $debugOpts } from './$debugOpts.js';\nexport { authOpts } from './authOpts.js';\n","import { Controller } from '/sys/index.js';\n\nclass HomeCtrl extends regochWeber.sys.Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('Regoch Weber - JS Single Page App Framework');\n    this.setDescription('The Regoch Weber is simple and intuitive JavaScript framework for browser single page applications and mobile applications.');\n    this.setKeywords('regoch, weber, framework, javascript, js, single page app');\n    this.setLang('en');\n\n    await this.loadView('#layout', 'pages/home/layout.html');\n    await this.loadViews([\n      ['#main', 'pages/home/main.html'],\n    ], true);\n  }\n\n}\n\n\nexport default HomeCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass QuickstartCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('Regoch Weber - Quickstart');\n    this.setDescription('The Regoch Weber is simple and intuitive JavaScript framework for browser single page applications and mobile applications.');\n    this.setKeywords('regoch, weber, framework, javascript, js, single page app');\n    this.setLang('en');\n\n    await this.loadViews([\n      ['#layout', 'pages/quickstart/layout.html'],\n      ['#main', 'pages/quickstart/main.html'],\n    ], true);\n  }\n\n\n  async postrend() {\n    this.showButtonBars = false;\n    await this.rgIf('showButtonBars');\n  }\n\n}\n\n\nexport default QuickstartCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass DocsCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('Regoch Weber - Docs');\n    this.setDescription('The Regoch Weber is simple and intuitive JavaScript framework for browser single page applications and mobile applications.');\n    this.setKeywords('regoch, weber, framework, javascript, js, single page app');\n    this.setLang('en');\n\n    await this.loadView('#layout', 'pages/docs/layout.html');\n    await this.loadViews([\n      ['#main', 'pages/docs/main.html'],\n    ], true);\n  }\n\n}\n\n\nexport default DocsCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass ExamplesCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('Regoch Weber - Examples');\n    this.setDescription('The Regoch Weber is simple and intuitive JavaScript framework for browser single page applications and mobile applications.');\n    this.setKeywords('regoch, weber, framework, javascript, js, single page app');\n    this.setLang('en');\n\n    await this.loadViews([\n      ['#layout', 'pages/examples/layout.html'],\n      ['#main', 'pages/examples/main.html'],\n    ], true);\n  }\n\n}\n\n\nexport default ExamplesCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass NotfoundCtrl extends Controller {\n\n  async loader(trx) {\n    this.setTitle('Regoch Weber - NOT FOUND');\n    await this.loadViews([\n      ['#layout', 'pages/notfound/layout.html'],\n      ['#main', 'pages/notfound/main.html'],\n    ]);\n  }\n\n  async postrend(trx) {\n    // console.error(`404 not found: ${trx.uri}`);\n    this.$model.uri = trx.uri;\n  }\n\n}\n\n\nexport default NotfoundCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass Controller_hooksCtrl extends Controller {\n\n  constructor(app) {\n    // console.log('This is playground test. Example: Controller Lifecycle Hooks. Controller_hooksCtrl::constructor(app)  --> param app:', app);\n    super();\n  }\n\n  async loader(trx) {\n    console.log('loader() -- trx::', trx);\n    this.setTitle('Controller Hooks Test');\n    this.loadCSS(['https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism-coy.min.css']);\n    this.unloadCSS(['/client/assets/css/switch-box.css']);\n\n    await this.loadView('#layout', 'pages/playground/controller-hooks/main.html');\n    this.lazyJS([\n      'https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/prism.min.js'\n    ]);\n  }\n\n  async init(trx) {\n    console.log('init() -- trx::', trx);\n    console.log('init() -- navig::', syslib.navig);\n    console.log('init() -- ctrl::', this);\n    this.something = 'smthng';\n  }\n\n  // if rend() is not defined then this.render() is used\n  async rend(trx) {\n    console.log('rend() -- trx::', trx);\n    await this.rgKILL();\n    this.rgHref();\n  }\n\n  async postrend(trx) {\n    console.log('postrend() -- trx::', trx);\n  }\n\n  async destroy(trx) {\n    console.log('destroy() -- trx::', trx);\n    console.log('destroy() -- navig::', syslib.navig);\n    console.log('destroy() -- ctrl::', this);\n    this.unloadCSS(['https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism-coy.min.css']);\n    this.unlazyJS();\n  }\n\n}\n\n\nexport default Controller_hooksCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass ModelCtrl extends Controller {\n\n  constructor(app) {\n    super();\n    // this.$model.user = { name: 'John Doe2', age: 12 }; // this will cause the error. Don't use $model in the constructor\n  }\n\n\n  async loader(trx) {\n    this.setTitle('Model Test');\n    await this.loadView('#layout', 'pages/playground/model/main.html');\n  }\n\n\n  async init(trx) {\n    this.$model.user = { name: 'John Doe', age: 11 }; // this is ok because $model is used after loader()\n    console.log('this.$model::', this.$model);\n  }\n\n\n\n\n  async str() {\n    this.$model.first_name = 'Saša';\n    await new Promise(r => setTimeout(r, 1300));\n    this.$modeler.use('first_name').setValue('Marko');\n    await new Promise(r => setTimeout(r, 1300));\n    this.$model.first_name = 'Petar'; // shortcut for  this.$model.use('first_name').setValue('Petar');\n  }\n\n  async obj() {\n    this.$model.user = { name: 'John', age: 23, isActive: false };\n    await new Promise(r => setTimeout(r, 1300));\n    this.$model.user = { name: 'Peter', age: 28, isActive: true };\n  }\n\n  async arr() {\n    this.$model.pets = ['dog', 'cat'];\n    await new Promise(r => setTimeout(r, 1300));\n    this.$modeler.use('pets').mpush('rabbit');\n    await new Promise(r => setTimeout(r, 1300));\n    this.$modeler.use('pets').mpop();\n    await new Promise(r => setTimeout(r, 1300));\n    this.$modeler.use('pets').munshift('anaconda');\n    await new Promise(r => setTimeout(r, 1300));\n    this.$modeler.use('pets').mshift();\n  }\n\n\n  async level5() {\n    this.$model.car = { x: { y: { z: { w: { year: 2011 } } } } };\n    await new Promise(r => setTimeout(r, 1300));\n    this.$modeler.use('car').setValue(2015, 'x.y.z.w.year');\n    await new Promise(r => setTimeout(r, 1300));\n    const car = this.$modeler.use('car').getValue();\n    console.log('car::', car);\n    const year = this.$modeler.use('car').getValue('x.y.z.w.year');\n    console.log('year::', year);\n\n    this.$model.yearOfCar = year;\n    await new Promise(r => setTimeout(r, 1300));\n    delete this.$model.yearOfCar; // delete will not render the $model\n  }\n\n\n  modelSeeConsole() {\n    console.log('myMdl1::', typeof this.$model.myMdl1, this.$model.myMdl1);\n    console.log('myMdl2::', typeof this.$model.myMdl2, this.$model.myMdl2);\n    console.log('myMdl3::', typeof this.$model.myMdl3, this.$model.myMdl3);\n  }\n\n\n\n\n}\n\n\nexport default ModelCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass View_rgIncCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader() {\n    this.setTitle('rgInc() Test');\n    this.setDescription('Page Test description');\n    this.setKeywords('regoch, playground, test, page');\n    this.setLang('en');\n    await this.loadView('#layout', 'pages/playground/view-rginc/main.html'); // cheange here inner, outer, sibling, prepend, append\n  }\n\n  async rend() { }\n\n}\n\n\nexport default View_rgIncCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass View_loadViewsCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n\n  async loader(trx) {\n    this.setTitle('loadViews() Test');\n\n    await this.loadViews([\n      ['#layout', 'pages/playground/view-loadviews/main.html', 'sibling'],\n      ['#part1', 'pages/playground/view-loadviews/part1.html'],\n      ['#part2', 'pages/playground/view-loadviews/part2.html', 'append'],\n      ['#part3', 'pages/playground/view-loadviews/part3.html', 'prepend']\n    ], true); // isAsync is true\n  }\n\n}\n\n\nexport default View_loadViewsCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass View_lazyJSCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('lazyJS() Test');\n    this.unloadCSS(['/client/assets/css/switch-box.css']);\n    await this.loadView('#layout', 'pages/playground/view-lazyjs/main.html');\n  }\n\n  async destroy() {\n    this.unlazyAllJS();\n    this.emptyView('#layout');\n  }\n\n\n  popup() {\n    window.swal({\n      icon: 'success',\n      text: 'Hello Regoč Weber !',\n    });\n    $.notify('Hello Regoč');\n  }\n\n  // button function\n  async lazyAll() {\n    console.info('Loading...');\n    await this.lazyJS([\n      'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js', // must be loaded before notify.min.js because notify require jQuery\n      'https://cdnjs.cloudflare.com/ajax/libs/notify/0.4.2/notify.min.js',\n      'https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js',\n    ], 1300); // wait 1.3 seconds for next script to load\n    console.info('Scripts are loded. Now click on the POPUP button.');\n  }\n\n  lazyTest() {\n    this.lazyJS([\n      '/client/assets/regoch/js/lazyTest2.js'\n    ], 1000);\n  }\n\n  unlazyAll() {\n    this.unlazyAllJS();\n  }\n\n  unlazySweetalert() {\n    this.unlazyJS([\n      'https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js'\n    ]);\n  }\n\n\n}\n\n\n\nexport default View_lazyJSCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass DataRgCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('DataRg Test');\n    this.addCSS(`\n      .my-italic {\n        font-style: italic;\n      }\n      .my-red {\n        color: red;\n      }\n      .my-font-size {\n        font-size: 21px;\n      }\n    `, '#myCSS');\n    await this.loadView('#layout', 'pages/playground/datarg/main.html', 'inner');\n  }\n\n  async init(trx) {\n    // initial values for the runFOR example\n    this.$model.companies = [\n      { name: 'Cloud Ltd', size: 3 },\n      { name: 'Roto Ltd', size: 5 },\n      { name: 'Zen Ltd', size: 8 },\n      { name: 'Den Ltd', size: 9 },\n      { name: 'Len Ltd', size: 10 },\n      { name: 'Pen Ltd', size: 81 },\n      { name: 'Gen Ltd', size: 82 },\n      { name: 'Ren Ltd', size: 83 }\n    ];\n\n    // initial values for runFOR2\n    this.$model.herbals = [];\n\n    // initial for runFORnested\n    // this.$model.fields = ['name', 'from', 'to', 'duration']; // data-rg-print=\"$model.trains.$i2.($model.fields.$i3) @@ append\"\n    this.fields = ['name', 'from', 'to', 'duration']; // data-rg-print=\"$model.trains.$i2.(fields.$i3) @@ append\"\n    this.$model.trains = [\n      { name: 'TRAIN-A', from: 'DU', to: 'ST', duration: 55 },\n      { name: 'TRAIN-B', from: 'ST', to: 'KN', duration: 66 }\n    ];\n\n    // initial value for runREPEAT\n    this.$model.multiplikator = 3;\n    this.repeat_var_name = 'multiplikator';\n\n    // initial values for the runSWITCH example\n    this.$model.myColor = 'green';\n\n    // initail value for data-rg-print with the pipe\n    this.$model.longText = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry standard.';\n    this.$model.obj4json = { x: 555 };\n\n    // text with the HTML\n    this.$model.htmlText = `The best <b style=\"color:red\">man</b> friend is: <i data-rg-if=\"$model.bestFriend $ne('Dog')\">NOBODY</i> <i data-rg-if=\"$model.bestFriend $eq('Dog')\">DOG</i>`;\n\n    // initial value for the data-rg-model\n    this.$model.myMDL = { name: 'Smokie', animal: 'horse', article: 'Lorem ipsumus ...' };\n\n    // initial value for the data-rg-checked\n    this.$model.checks1 = ['Tin'];\n\n    this.$model.bander = {\n      name: 'Johnny',\n      animal: 'dog',\n      article: 'Some article ...'\n    };\n\n  }\n\n\n  // if rend() is not used then default render() is executed\n  // async rend() {\n  //   this.renderGens();\n  //   await syslib.util.sleep(10);\n  //   this.renderNonGens();\n  //   await syslib.util.sleep(10);\n  //   await this.renderLsns();\n  // }\n\n\n\n\n\n\n  /*********** GENERATORS **********/\n\n  // show array elements by using data-rg-for\n  async runFOR() {\n    this.$model.companies = [\n      { name: 'Cloud2 Ltd', size: 3 },\n      { name: 'Roto2 Ltd', size: 5 },\n      { name: 'Zen2 Ltd', size: 8 },\n      { name: 'Den2 Ltd', size: 81 },\n      { name: 'Len2 Ltd', size: 82 },\n      { name: 'Pen2 Ltd', size: 83 },\n      { name: 'Gen2 Ltd', size: 84 },\n      { name: 'Ren2 Ltd', size: 855 }\n    ];\n  }\n\n  // show array elements by using data-rg-for\n  async runFOR2() {\n    this.skipNum = 10;\n    this.$model.herbals = ['corn', 'banana', 'plum', 'straw'];\n  }\n\n\n  // run data-rg-for inside data-rg-for\n  async runFORnested() {\n    this.$model.trains = [\n      { name: 'TRAIN1', from: 'OS', to: 'NA', duration: 2 },\n      { name: 'TRAIN2', from: 'OS', to: 'ZG', duration: 3 },\n      { name: 'TRAIN3', from: 'SB', to: 'VK', duration: 5 }\n    ];\n  }\n\n\n  // parse interpolated text in variable name\n  async runFOR_solveInterpolated() {\n    this.$model.kids = [\n      { _id: 111, name: 'tom' },\n      { _id: 222, name: 'jill' },\n      { _id: 333, name: 'ben' }\n    ];\n\n    // await syslib.util.sleep(700);\n\n    // print in the variable names with the interpolated text\n    this.$model['kid_111'] = 'TOM';\n    this.$model.kid_222 = 'JILL';\n    this.$model.kid_333 = 'BEN';\n  }\n\n\n\n  // repeat the data-rg-repeat num times\n  async runREPEAT(num) {\n    this.$model.pets = [];\n    this.$model.multiplikator = num;\n  }\n\n\n  // print initial value and after 1300ms the modified value\n  async runPRINT() {\n    this.$model.product = {\n      name: 'Toyota',\n      address: {\n        city: 'London'\n      },\n      colors: ['red', 'green']\n    };\n\n    await syslib.util.sleep(1300);\n\n    this.$model.product = { ...this.$model.product, ...{ address: { city: 'Zagreb' } } };\n\n    await syslib.util.sleep(1300);\n\n    this.$model.product.colors = ['blue', 'orange'];\n    this.$modeler.use('product').mrender(); // call render() because this.$model.product.colors is not Proxy and render() will not be trigered\n  }\n\n\n  printHTML() {\n    this.$model.bestFriend = 'Dog';\n  }\n\n\n  printHTML_solvemath(n) {\n    this.ad_num = n;\n    this.$model.advert___3 = '#3. I sell red Mercedes car.';\n    this.$model.advert___4 = '#4. I sell chickens.';\n  }\n\n\n\n\n  /*********** NON-GENERATORS **********/\n  runIF() {\n    this.myNum = 5;\n    this.myBool = false;\n    this.myStr = 'some str';\n    this.myArr = [5, 4, 'lorem'];\n    this.$model.myStr_model = 'some str';\n\n    this.$model.ifY = {\n      bool: true,\n      num: 5,\n      str: 'some str'\n    };\n  }\n\n\n  runIF2() {\n    this.myNum2 = 5;\n    this.myBool2 = false;\n    this.myStr2 = 'some str';\n    this.$model.myStr_model2 = 'some str';\n\n    this.$model.ifY2 = {\n      bool: true,\n      num: 5,\n      str: 'some str'\n    };\n  }\n\n\n  // toggle if and show hide elements\n  toggleIF() {\n    this.$model.ifX = !this.$model.ifX;\n    // console.log('toggleIF::', this.$model.ifX);\n  }\n\n\n  async toggleIF2() {\n    this.$model.continent = !!this.$model.continent ? '' : 'Europe';\n  }\n\n  // toggle text color by using data-rg-elem\n  runELEM() {\n    this.toggle = !this.toggle;\n    if (this.toggle) {\n      this.$rg.elems.myElem.style.color = 'blue';\n    } else {\n      this.$rg.elems.myElem.style.color = 'silver';\n    }\n  }\n\n\n  // Here are two tests. First will show only one switchcase when red, blue, green is typed in the input field. Another test will show multiple switchcases.\n  runSWITCH() {\n    this.$model.obj = { myColors: ['green2', 'blue2'] };\n  }\n\n  // add CSS classes 'my-red' and 'my-font-size' to the element data-rg-class=\"myKlases\"\n  runCLASS() {\n    this.$model.myKlases = ['my-red', 'my-font-size'];\n  }\n\n  // add style attribute values\n  runSTYLE(fontSize, color) {\n    this.$model.myStajl = { fontSize, color };\n  }\n\n  // define image src attribute\n  runSRC() {\n    this.$model.imageURL = 'http://cdn.dex8.com/img/turnkey_tasks/scraper_free.png';\n  }\n\n\n  runATTR() {\n    this.$model.someURL = 'https://www.adsuu.com';\n  }\n\n\n  toggleDISABLED() {\n    this.$model.isDisabled = !this.$model.isDisabled;\n  }\n\n\n  setVALUES() {\n    this.$model.input_text01 = 'some text';\n    this.$model.input_text_undefined;\n    this.$model.input_text_obj = { a: 22 };\n    this.$model.input_numberAsString = '157';\n    this.$model.input_text01 = 'some text';\n  }\n\n\n  setCHECKED() {\n    this.$model.checks1 = ['Pin', 'Tin'];\n  }\n\n\n  toggleSPINNER() {\n    this.$model.showSpinner = !this.$model.showSpinner;\n  }\n\n\n  showSetinitial() {\n    console.log('someNum_1::', typeof this.someNum_1, this.someNum_1);\n    console.log('someNum_2::', typeof this.someNum_2, this.someNum_2);\n  }\n\n}\n\n\nexport default DataRgCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass DataRgListenersCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('DataRgListeners Test');\n    await this.loadView('#layout', 'pages/playground/datarglisteners/main.html', 'inner');\n  }\n\n\n  async init(trx) {\n    // test <button data-rg-click=\"print.inConsole.makeRed($element)\">CLICK</button>\n    this.print = {\n      inConsole: {\n        makeRed: (elem) => {\n          console.log(elem);\n          elem.style.color = 'orangered';\n        }\n      }\n    };\n\n    // test CLICK2\n    this.products = [\n      { name: 'Toy', price: 22.34 },\n      { name: 'Flower', price: 88.56 },\n    ];\n\n    // test CLICK assignment\n    this.$model.cats = ['Kiki', 'Pepa'];\n\n  }\n\n\n\n\n  // this is needed so that LINK2 work correctly\n  async destroy() {\n    this.loadCSS(['/assets/css/switch-box.css']);\n    this.emptyView('#layout');\n  }\n\n\n\n\n  // show the history\n  historyData() {\n    console.log('window.history::', window.history);\n  }\n\n\n  async callAPI() {\n    const answer = await this.$httpClient.askJSON('api.dex8.com');\n    // const answer = await this.httpClient.askJSON('https://jsonplaceholder.typicode.com/todos/1', 'GET');\n    // const answer = await this.httpClient.askJSON('https://jsonplaceholder.typicode.com/posts?userId=1', 'GET');\n    // const answer = await this.httpClient.askJSON('https://jsonplaceholder.typicode.com/posts', 'POST', {title: 'foo', body: 'bar', userId: 1});\n    // const answer = await this.httpClient.askJSON('https://jsonplaceholder.typicode.com/posts/1', 'PUT', {id: 1, title: 'foogoo', body: 'barboo', userId: 3});\n    // const answer = await this.httpClient.askJSON('https://jsonplaceholder.typicode.com/posts/1', 'DELETE');\n    // const answer = await this.httpClient.askJSON('https://api.dex8.com?q=my str'); // test encodeURI\n    // const answer = await this.httpClient.ask('api.dex8.com'); // to test 408 timeout set opts:: timeout:10,retry:5,retryDelay:1300\n    return answer;\n  }\n\n\n  // A) fetch the API response and show it in the data-rg-print element   B) change the clicked button color\n  async runCLICK(n, str, ...rest) {\n    console.log('This is a click. Params::', n, str, rest);\n    this.$model.answer = await this.callAPI();\n    console.log('answer::', this.$model.answer);\n\n    // make the clicked button green\n    if (rest[2]) {\n      const elem = rest[2];\n      elem.style.color = 'red';\n      elem.style.backgroundColor = 'lightgreen';\n    }\n  }\n\n\n  runCLICK2(prods) {\n    console.log('this.products::', prods);\n  }\n\n  runCLICK3(str, num, bool, reg) {\n    console.log('str::', typeof str, str);\n    console.log('num::', typeof num, num);\n    console.log('bool::', typeof bool, bool);\n    console.log('reg::', typeof reg, reg, '--- reg.test(\"oglas\")::', reg.test('oglas'));\n  }\n\n  // click on the INPUT tag\n  runCLICK4(val) {\n    console.log('val::', typeof val, val);\n  }\n\n\n  // run two methods by one click\n  runCLICK5a(val) {\n    console.log('runCLICK5a-val::', typeof val, val);\n  }\n  runCLICK5b(val) {\n    console.log('runCLICK5b-val::', typeof val, val);\n  }\n\n\n  // run on keyup event\n  runKEYUP(elem, val, evt) {\n    console.log('runKEYUP $element::', elem);\n    console.log('runKEYUP $value::', typeof val, val);\n    console.log('runKEYUP $event::', evt);\n  }\n\n\n  // update data-rg-switch and data-rg-if every time the SELECT is changed\n  async runCHANGE(n, val) {\n    if (n === 1) {\n      this.$model.change1 = val;\n    } else if (n === 2) {\n      this.$model.change2 = val;\n    }\n  }\n\n\n  // change text collor on mouseover and click\n  runEVT(elem, evt, boja) {\n    // console.log('$element::', elem);\n    // console.log('$event::', evt);\n    elem.style.color = boja;\n  }\n\n\n  // change the controller value and affect data-rg-model element\n  runMODEL() {\n    this.$model.myMDL = 'I changed it !!!';\n  }\n\n\n  setSeeConsole() {\n    console.log('mySet10::', typeof this.$model.mySet10, this.$model.mySet10);\n    console.log('mySet11::', typeof this.$model.mySet11, this.$model.mySet11);\n    console.log('mySet12::', typeof this.$model.mySet12, this.$model.mySet12);\n  }\n\n\n}\n\n\nexport default DataRgListenersCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass CookieCtrl extends Controller {\n\n  constructor(app) {\n    super();\n    this.input1;\n    this.input2;\n    this.cookieForm = new syslib.Form('cookieF');\n\n    const cookieOpts = {\n      domain: location.hostname,\n      path: '/',\n      expires: 5, // number of days or exact date\n      secure: false,\n      httpOnly: false,\n      sameSite: 'strict' // 'strict' for GET and POST, 'lax' only for POST\n    };\n    this.cookie = new syslib.Cookie(cookieOpts, true);\n  }\n\n\n\n  async loader(trx) {\n    this.setTitle('Cookie Test');\n    await this.loadView('#layout', 'pages/playground/cookie/main.html', 'inner');\n  }\n\n  async postrend(trx) {\n    this.showFields();\n  }\n\n\n  runCOOKIE() {\n    const cookieName = this.cookieForm.getControl('cookieName');\n    const cookieValue = this.cookieForm.getControl('cookieValue');\n    const cookieMethod = this.cookieForm.getControl('cookieMethod');\n    console.log('\\n', cookieMethod, ':', cookieName, cookieValue);\n\n    switch (cookieMethod) {\n      case 'put': { this.cookie.put(cookieName, cookieValue); break; }\n      case 'putObject': { this.cookie.putObject('someObj', { x: 22, y: 'str' }); break; }\n      case 'getAll': { console.log(this.cookie.getAll()); break; }\n      case 'get': { console.log(this.cookie.get(cookieName)); break; }\n      case 'getObject': { console.log(this.cookie.getObject('someObj')); break; }\n      case 'remove': { this.cookie.remove(cookieName); break; }\n      case 'removeAll': { this.cookie.removeAll(); break; }\n      case 'exists': { console.log(this.cookie.exists(cookieName)); break; }\n    }\n\n  }\n\n\n  showFields() {\n    const cookieMethod = this.cookieForm.getControl('cookieMethod');\n    switch (cookieMethod) {\n      case 'put': { this.$model.input1 = true; this.$model.input2 = true; break; }\n      case 'putObject': { this.$model.input1 = false; this.$model.input2 = false; break; }\n      case 'getAll': { this.$model.input1 = false; this.$model.input2 = false; break; }\n      case 'get': { this.$model.input1 = true; this.$model.input2 = false; break; }\n      case 'getObject': { this.$model.input1 = false; this.$model.input2 = false; break; }\n      case 'remove': { this.$model.input1 = true; this.$model.input2 = false; break; }\n      case 'removeAll': { this.$model.input1 = false; this.$model.input2 = false; break; }\n      case 'empty': { this.$model.input1 = true; this.$model.input2 = false; break; }\n      case 'exists': { this.$model.input1 = true; this.$model.input2 = false; break; }\n    }\n    this.rgIf();\n  }\n\n\n\n}\n\n\nexport default CookieCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass BrowserStorageCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('BrowserStorage Test');\n    await this.loadView('#layout', 'pages/playground/browserstorage/main.html', 'inner');\n  }\n\n  async init() {\n    this.sLocal = new syslib.BrowserStorage({ storageType: 'local' }, true);\n    this.sSess = new syslib.BrowserStorage({ storageType: 'session' }, true);\n  }\n\n\n  test_put() {\n    console.log(this.first_name);\n    this.sLocal.put('first_name', this.first_name);\n    this.sSess.put('first_name', this.first_name);\n  }\n\n  test_putObject() {\n    console.log(this.some_obj);\n    this.sLocal.putObject('some_obj', this.some_obj);\n    this.sSess.putObject('some_obj', this.some_obj);\n  }\n\n  test_getAll() {\n    this.$model.localStorageValues = this.sLocal.getAll();\n    console.log('LOCAL:', this.$model.localStorageValues);\n    this.$model.sessionStorageValues = this.sSess.getAll();\n    console.log('SESS:', this.$model.sessionStorageValues);\n  }\n\n  test_get() {\n    this.$model.localStorageVal = this.sLocal.get(this.storageName);\n    this.$model.sessionStorageVal = this.sSess.get(this.storageName);\n  }\n\n  test_getObject() {\n    this.$model.localStorageVal2 = this.sLocal.getObject(this.storageName2);\n    this.$model.sessionStorageVal2 = this.sSess.getObject(this.storageName2);\n  }\n\n  test_remove() {\n    this.sLocal.remove(this.storageName3);\n    this.sSess.remove(this.storageName3);\n  }\n\n  test_removeAll() {\n    this.sLocal.removeAll();\n    this.sSess.removeAll();\n  }\n\n\n\n\n}\n\n\nexport default BrowserStorageCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass FormCtrl extends Controller {\n\n  constructor(app) {\n    super();\n    this.testForm = new syslib.Form('testF');\n    this.testForm.debugOptions = {\n      setControl: true,\n      setControls: false,\n      getControl: false,\n      getControls: false,\n      delControl: false,\n      delControls: false\n    };\n  }\n\n  async loader(trx) {\n    this.setTitle('Form Test');\n    await this.loadView('#layout', 'pages/playground/form/main.html');\n  }\n\n\n\n  async setFullName() {\n    this.testForm.setControl('fullName', 'John');\n\n    await syslib.util.sleep(1300);\n    this.testForm.setControl('fullName', 'Johnny');\n\n    await syslib.util.sleep(800);\n    const fullName = this.testForm.getControl('fullName');\n    console.log('fullName::', fullName);\n\n    await syslib.util.sleep(800);\n    this.testForm.delControl('fullName');\n  }\n  async getFullName() {\n    const fullName = this.testForm.getControl('fullName');\n    console.log('fullName::', fullName);\n  }\n\n\n  async setAge() {\n    this.testForm.setControl('age', 23);\n  }\n  async getAge() {\n    const age = this.testForm.getControl('age');\n    console.log('age::', typeof age, age);\n  }\n\n\n  async setCountry() {\n    this.testForm.setControl('country', 'Croatia');\n    await syslib.util.sleep(1300);\n    this.testForm.setControl('country', 'UK');\n    await syslib.util.sleep(1300);\n    this.testForm.delControl('country');\n  }\n  async getCountry() {\n    const country = this.testForm.getControl('country');\n    console.log('country::', country);\n  }\n\n\n  async setFamily() {\n    this.testForm.setControl('family', ['Betty', 'Lara']);\n  }\n  async getFamily() {\n    const family = this.testForm.getControl('family');\n    console.log('family::', family);\n  }\n  async emptyFamily() {\n    this.testForm.delControl('family');\n  }\n\n\n  async setJobs() {\n    this.testForm.setControl('jobs', ['IT', 'Marketing']);\n  }\n  async getJobs() {\n    const jobs = this.testForm.getControl('jobs');\n    console.log('selected jobs::', jobs);\n  }\n  async emptyJobs() {\n    this.testForm.delControl('jobs');\n  }\n\n\n  async setPet() {\n    this.testForm.setControl('pet', 'cat');\n  }\n  async getPet() {\n    const pet = this.testForm.getControl('pet');\n    console.log('selected pet::', pet);\n  }\n  async emptyPet() {\n    this.testForm.delControl('pet');\n  }\n\n\n  // used data-rg-print\n  async generateAutos() {\n    this.$model.autos = [\n      { id: 1, name: 'Toyota', price: 8000 },\n      { id: 2, name: 'WV', price: 4000 },\n      { id: 3, name: 'BMW', price: 6000 },\n      { id: 4, name: 'Fiat', price: 1000 },\n      { id: 5, name: 'Audi', price: 5000 }\n    ];\n\n    await new Promise(r => setTimeout(r, 400));\n    this.testForm.setControl('autosN', 2);\n  }\n\n  // used data-rg-echo\n  async generatePlants() {\n    this.$model.plants = [\n      { id: 1, name: 'Corn', price: 8000 },\n      { id: 2, name: 'Ananas', price: 4000 },\n      { id: 3, name: 'Banana', price: 6000 },\n      { id: 4, name: 'Potato', price: 1000 },\n      { id: 5, name: 'Apple', price: 5000 }\n    ];\n\n    await new Promise(r => setTimeout(r, 700));\n    this.testForm.setControl('plantsN', 3);\n  }\n\n\n\n  async setAll() {\n    this.testForm.setControls({\n      fullName: 'John Doe',\n      age: 48,\n      country: 'Kenya',\n      family: ['Mary', 'Betty'],\n      jobs: ['IT'],\n      pet: 'horse',\n      autosN: 5,\n      plantsN: 5,\n    });\n  }\n\n\n\n  // set control with name=\"fruit.seller.name\"\n  async setFruit() {\n    const fruit = {\n      name: 'apple',\n      price: 22,\n      seller: {\n        name: 'Drog Ltd',\n        city: 'London'\n      }\n    };\n\n    this.testForm.setControl('fruit.name', fruit.name);\n    this.testForm.setControl('fruit.seller.name', fruit.seller.name);\n  }\n\n\n\n}\n\n\nexport default FormCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass LoginCtrl extends Controller {\n\n  constructor(app) {\n    super();\n    this.$fridge.formLogin = new syslib.Form('loginForm');\n  }\n\n  async loader(trx) {\n    this.setTitle('Auth Login Test');\n    await this.loadView('#layout', 'pages/playground/login/main.html');\n  }\n\n  async init() {\n    // this.formLogin = new syslib.Form('loginForm');\n  }\n\n  async tryLogin() {\n    const username = this.$fridge.formLogin.getControl('username', false); // false will not convert the type, for example: 12345 will stay string\n    const password = this.$fridge.formLogin.getControl('password', false); // false will not convert the type, for example: 12345 will stay string\n    try {\n      const creds = { username, password };\n      console.log('creds::', creds);\n      const resp = await this.$auth.login(creds);\n      console.log('tryLogin::', username, password, resp);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n\n\n}\n\n\nexport default LoginCtrl;\n","import { Controller } from '/sys/index.js';\n\n\nclass LoginokCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.setTitle('Auth Login OK');\n    await this.loadView('#layout', 'pages/playground/loginok/main.html');\n  }\n\n  async tryLogout() {\n    try {\n      await this.$auth.logout(100);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n\n\n\n}\n\n\nexport default LoginokCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass Navig1Ctrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    console.log('Navig1 loader::', trx);\n    this.setTitle('Navig Test - Page 1');\n    await this.loadView('#layout', 'pages/playground/navig/primary1.html', 'inner');\n    console.log(this);\n  }\n\n\n  async destroy(pevent) {\n    console.log('Navig1 destroy::', pevent);\n  }\n\n\n  runGOTO(url) {\n    syslib.navig.goto(url);\n  }\n\n  runBACK() {\n    syslib.navig.back();\n  }\n\n  runFORWARD() {\n    syslib.navig.forward();\n  }\n\n  runRELOAD() {\n    syslib.navig.reload();\n  }\n\n\n\n}\n\n\nexport default Navig1Ctrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass Navig2Ctrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    console.log('Navig2 loader::', trx);\n    this.setTitle('Navig Test - Page 2');\n    await this.loadView('#layout', 'pages/playground/navig/primary2.html', 'inner');\n  }\n\n\n  async destroy(pevent) {\n    console.log('Navig2 destroy::', pevent);\n  }\n\n\n  runGOTO(url) {\n    syslib.navig.goto(url);\n  }\n\n  runBACK() {\n    syslib.navig.back();\n  }\n\n  runFORWARD() {\n    syslib.navig.forward();\n  }\n\n  runRELOAD() {\n    syslib.navig.reload();\n  }\n\n\n\n}\n\n\nexport default Navig2Ctrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass PaginatorCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n\n  async loader(trx) {\n    this.setTitle('Paginator Test');\n    await this.loadView('#layout', 'pages/playground/paginator/main.html');\n  }\n\n\n  async init(trx) {\n    this.paginator = new syslib.Paginator(3, ['w3-gray']);\n    await this.openPage(1);\n  }\n\n\n  /**\n   * Open new page when paginator links are clicked.\n   * @param {number} pageNum - page number\n   * @param {Element} element - HTML element when clicked will change the page\n   */\n  async openPage(pageNum, element) {\n    if (!!element) { element.blur(); }\n\n    this.currentPage = +pageNum;\n    this.itemsPerPage = 5;\n    await this.getResults();\n\n    const { pageLinks, pagesTotal } = await this.paginator.page(pageNum, this.$model.itemsTotal, this.itemsPerPage);\n    this.$model.pageLinks = pageLinks;\n    this.pagesTotal = pagesTotal;\n  }\n\n\n  getResults() {\n    const limit = this.itemsPerPage;\n    const skip = this.paginator.skipCalc(this.currentPage, this.itemsPerPage);\n\n    const results = [\n      { name: 'John Doe 1', age: 1 },\n      { name: 'John Doe 2', age: 2 },\n      { name: 'John Doe 3', age: 3 },\n      { name: 'John Doe 4', age: 4 },\n      { name: 'John Doe 5', age: 5 },\n      { name: 'John Doe 6', age: 6 },\n      { name: 'John Doe 7 ', age: 7 },\n      { name: 'John Doe 8', age: 8 },\n      { name: 'John Doe 9', age: 9 },\n      { name: 'John Doe 10', age: 10 },\n      { name: 'John Doe 11', age: 11 },\n      { name: 'John Doe 12', age: 12 },\n      { name: 'John Doe 13', age: 13 },\n      { name: 'John Doe 14', age: 14 },\n      { name: 'John Doe 15', age: 15 },\n      { name: 'John Doe 16', age: 16 },\n      { name: 'John Doe 17', age: 17 },\n      { name: 'John Doe 18', age: 18 },\n      { name: 'John Doe 19', age: 19 },\n      { name: 'John Doe 20', age: 20 },\n      { name: 'John Doe 21', age: 21 },\n      { name: 'John Doe 22', age: 22 },\n    ];\n\n    const start = skip;\n    const end = limit + skip;\n    this.$model.results = results.slice(start, end);\n    this.$model.itemsTotal = 22;\n  }\n\n\n\n\n}\n\n\nexport default PaginatorCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass AntiflickCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n  async loader(trx) {\n    this.showViews(false, true); // with spinner\n    // this.showViews(false, false); // no spinner\n    console.log('loader() -- trx::', trx);\n    this.setTitle('Antiflick Test');\n\n    await this.loadView('#layout', 'pages/playground/antiflick/main.html');\n  }\n\n  async init(trx) {\n    await syslib.util.sleep(2000);\n    this.$model.showBtn = true;\n    this.showViews(true, true); // with spinner\n    // this.showViews(true, false); // no spinner\n  }\n\n  // if rend() is not defined then this.render() is used\n  // async rend(trx) {\n  // }\n\n  async postrend(trx) {\n    this.$model.showBtn = true;\n  }\n\n  async destroy(trx) {\n  }\n\n}\n\n\nexport default AntiflickCtrl;\n","import { Controller, syslib } from '/sys/index.js';\n\n\nclass I18nCtrl extends Controller {\n\n  constructor(app) {\n    super();\n  }\n\n\n  async loader(trx) {\n    this.setTitle('i18n Test');\n    await this.loadView('#layout', 'pages/playground/i18n/main.html');\n  }\n\n\n  async init(trx) {\n\n  }\n\n\n  changeLang() {\n    console.log('selected language::', this.$model.lang);\n  }\n\n\n}\n\n\nexport default I18nCtrl;\n","import { App, syslib } from '/sys/index.js';\nimport viewsCached from '/client/_cache/views.js';\nimport env from '/client/env.js';\nconsole.log('env::', env);\n// console.log('viewsCached::', viewsCached);\n\n\n// conf\nimport { $debugOpts, authOpts } from '/client/conf/index.js';\n\n\n// controllers\nimport HomeCtrl from '/client/controllers/HomeCtrl.js';\nimport QuickstartCtrl from '/client/controllers/QuickstartCtrl.js';\nimport DocsCtrl from '/client/controllers/DocsCtrl.js';\nimport ExamplesCtrl from '/client/controllers/ExamplesCtrl.js';\nimport NotfoundCtrl from '/client/controllers/NotfoundCtrl.js';\n\n/// playground\nimport Controller_hooksCtrl from '/client/controllers/playground/Controller_hooksCtrl.js';\nimport ModelCtrl from '/client/controllers/playground/ModelCtrl.js';\nimport View_rgIncCtrl from '/client/controllers/playground/View_rgIncCtrl.js';\nimport View_loadViewsCtrl from '/client/controllers/playground/View_loadViewsCtrl.js';\nimport View_lazyJSCtrl from '/client/controllers/playground/View_lazyJSCtrl.js';\nimport DataRgCtrl from '/client/controllers/playground/DataRgCtrl.js';\nimport DataRgListenersCtrl from '/client/controllers/playground/DataRgListenersCtrl.js';\nimport CookieCtrl from '/client/controllers/playground/CookieCtrl.js';\nimport BrowserStorageCtrl from '/client/controllers/playground/BrowserStorageCtrl.js';\nimport FormCtrl from '/client/controllers/playground/FormCtrl.js';\n\nimport LoginCtrl from '/client/controllers/playground/LoginCtrl.js';\nimport LoginokCtrl from '/client/controllers/playground/LoginokCtrl.js';\n\nimport Navig1Ctrl from '/client/controllers/playground/Navig1Ctrl.js';\nimport Navig2Ctrl from '/client/controllers/playground/Navig2Ctrl.js';\n\nimport PaginatorCtrl from '/client/controllers/playground/PaginatorCtrl.js';\nimport AntiflickCtrl from '/client/controllers/playground/AntiflickCtrl.js';\nimport I18nCtrl from '/client/controllers/playground/I18nCtrl.js';\n\n\n\n\n// routes\nconst routes = [\n  ['when', '/', 'HomeCtrl'],\n  ['when', '/quickstart', 'QuickstartCtrl'],\n  ['when', '/docs', 'DocsCtrl'],\n  ['when', '/examples', 'ExamplesCtrl'],\n\n  ['when', '/playground/controller-hooks', 'Controller_hooksCtrl'],\n  ['when', '/playground/controller-hooks-same', 'Controller_hooksCtrl'],\n  ['when', '/playground/model', 'ModelCtrl'],\n  ['when', '/playground/view-rginc', 'View_rgIncCtrl'],\n  ['when', '/playground/view-loadviews', 'View_loadViewsCtrl'],\n  ['when', '/playground/view-lazyjs', 'View_lazyJSCtrl'],\n  ['when', '/playground/datarg', 'DataRgCtrl'],\n  ['when', '/playground/datarglisteners', 'DataRgListenersCtrl'],\n  ['when', '/playground/cookie', 'CookieCtrl'],\n  ['when', '/playground/browserstorage', 'BrowserStorageCtrl'],\n  ['when', '/playground/form', 'FormCtrl'],\n\n  ['when', '/playground/login', 'LoginCtrl', { authGuards: ['autoLogin'] }],\n  ['when', '/playground/developer/dashboard', 'LoginokCtrl', { authGuards: ['isLogged', 'hasRole'] }],\n\n  ['when', '/playground/navig1', 'Navig1Ctrl'],\n  ['when', '/playground/navig2', 'Navig2Ctrl'],\n  ['redirect', '/playground/navig3', '/playground/navig1'],\n\n  ['when', '/playground/paginator', 'PaginatorCtrl'],\n  ['when', '/playground/antiflick', 'AntiflickCtrl'],\n  ['when', '/playground/i18n', 'I18nCtrl'],\n\n  ['notfound', 'NotfoundCtrl'],\n];\n\n\n// auth\nconst auth = new syslib.Auth(authOpts);\n\n// preflight/postflight\nconst pref1 = async (trx) => { console.log('PREFLIGHT 1 - trx::', trx); };\nconst pref2 = async (trx) => { console.log('PREFLIGHT 2 - trx::', trx); };\nconst pref3 = (trx) => { trx.ctrl.showViews(false, true); };\nconst postf1 = async (trx) => { console.log('POSTFLIGHT 1 - trx::', trx); };\nconst postf2 = async (trx) => { console.log('POSTFLIGHT 2 - trx::', trx); };\nconst postf3 = (trx) => { trx.ctrl.showViews(true, true); };\n\n// app\nconst app = new App();\n\napp\n  .controllers([\n    HomeCtrl,\n    QuickstartCtrl,\n    DocsCtrl,\n    ExamplesCtrl,\n    NotfoundCtrl,\n\n    // playground controllers\n    Controller_hooksCtrl,\n    ModelCtrl,\n    View_rgIncCtrl,\n    View_loadViewsCtrl,\n    View_lazyJSCtrl,\n    DataRgCtrl,\n    DataRgListenersCtrl,\n    CookieCtrl,\n    BrowserStorageCtrl,\n    FormCtrl,\n\n    LoginCtrl,\n    LoginokCtrl,\n\n    Navig1Ctrl,\n    Navig2Ctrl,\n\n    PaginatorCtrl,\n    AntiflickCtrl,\n    I18nCtrl\n  ]);\n\napp\n  .auth(auth) // needed for route authGuards\n  // .preflight(pref3)\n  // .postflight(postf3)\n  .debugger($debugOpts);\n\napp\n  .routes(routes)\n  .viewsCached(viewsCached);\n"],"names":[],"sourceRoot":""}